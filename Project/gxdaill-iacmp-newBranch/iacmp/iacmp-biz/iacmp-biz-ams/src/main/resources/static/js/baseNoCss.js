function addEndPx(w) {
    if (!w) {
        return "0px";
    }
    if ((w + "").indexOf("px") != -1) {
        return w;
    }
    return parseInt(w) + "px";
}

var Line = function (color) {
    var pointArray = [];
    var idocument = document;

    var draw = new Object();
    draw = {
        // 画出最基本的图像，点，和垂直直线或水平直线
        drawBase: function (x1, y1, w, h) {
            try {
                var span = idocument.createElement("span");
                span.style.position = 'absolute';
                span.style.left = addEndPx(x1);
                span.style.top = addEndPx(y1);
                span.style.height = addEndPx(h);
                span.style.width = addEndPx(w);
                span.style.background = color;
                span.className = 'draw-line';
                idocument.body.appendChild(span);
                pointArray.push(span);
            } catch (e) {
            }
        },
        drawLine: function (x1, y1, x2, y2) {
            var w = (((x2 - x1) == 0 ? 1 : (x2 - x1)));
            var h = (((y2 - y1) == 0 ? 1 : (y2 - y1)));
            if (x1 == x2 || y1 == y2) {
                // 水平或垂直
                var minX = (x1 < x2 ? x1 : x2);
                var minY = (y1 < y2 ? y1 : y2);
                draw.drawBase(minX, minY, Math.abs(w), Math.abs(h));
            } else {// 斜线
                var oldX = -1;
                var oldY = -1;
                var newX = 0;
                var newY = 0;
                if (Math.abs(w) > Math.abs(h)) {
                    for (var i = 0; i < Math.abs(w); i++) {
                        newX = (x1 + (w > 0 ? 1 : -1) * i);
                        newY = (y1 + (h > 0 ? 1 : -1) * Math.abs(i * h / w));
                        if (oldX != newX && oldY != newY) {
                            oldX = newX;
                            oldY = newY;
                            draw.drawBase(oldX, oldY, 1, 1);
                        }
                    }
                } else {
                    for (var i = 0; i < Math.abs(h); i++) {
                        newX = (x1 + (w > 0 ? 1 : -1) * Math.abs(i * w / h));
                        newY = (y1 + (h > 0 ? 1 : -1) * i);
                        if (oldX != newX && oldY != newY) {
                            oldX = newX;
                            oldY = newY;
                            draw.drawBase(oldX, oldY, 1, 1);
                        }
                    }
                }
            }
        },
        drawArrowheaded: function (x0, y0, x1, y1) {// 箭头

            var d = Math.sqrt((y1 - y0) * (y1 - y0) + (x1 - x0) * (x1 - x0));
            var Xa = x1 + 10 * ((x0 - x1) + (y0 - y1) / 2) / d;
            var Ya = y1 + 10 * ((y0 - y1) - (x0 - x1) / 2) / d;
            var Xb = x1 + 10 * ((x0 - x1) - (y0 - y1) / 2) / d;
            var Yb = y1 + 10 * ((y0 - y1) + (x0 - x1) / 2) / d;

            draw.drawLine(x1, y1, Xa, Ya);
            draw.drawLine(x1, y1, Xb, Yb);
        },
        drawArrowheadedLine: function (x1, y1, x2, y2) {
            // 直线
            draw.drawLine(x1, y1, x2, y2);
            // 箭头
            draw.drawArrowheaded(x1, y1, x2, y2);
        }
    };

    Line.prototype.drawArrowLine = function (x1, y1, x2, y2) {
        draw.drawArrowheadedLine(x1, y1, x2, y2);
    };

    Line.prototype.remove = function () {// 删除画出的线
        var len = pointArray.length;
        for (var i = 0; i < len; i++) {
            idocument.body.removeChild(pointArray[i]);
        }
        pointArray = null;
        pointArray = [];
    };

    Line.prototype.setDocument = function (idoc) {
        idocument = idoc;
    };

    Line.prototype.setColor = function (newColor) {// 设置线条颜色
        color = newColor;
    };
};

// var line = new Line();

// line.drawArrowLine(1, 1, 123, 438);
﻿

document.write('<base href="http://' + window.location.host + '/'
    + (window.location.pathname.indexOf('/') == 0 ? window.location.pathname.split('/')[1] : window.location.pathname.split('/')[0]) + '/"/>');
//document.write("<link href='JBFCommon/css/JBF_Base.css' rel='stylesheet' type='text/css' />");
var G_WebRoot = '/' + (window.location.pathname.indexOf('/') == 0 ? window.location.pathname.split('/')[1] : window.location.pathname.split('/')[0]) + '/';
var JS_SERVER = '';
var jjj = 0;

function selectValue(obj) {
    var input = JBF.getNextElement(obj.parentNode);
    document.all.box.value = obj.options[obj.selectedIndex].text;
    document.getElementById("txtSection").value = obj.options[obj.selectedIndex].value;
    changeOperation(obj.options[obj.selectedIndex].value);
}

function InputValue(obj) {
    var n = 1;
    var tmpObj;
    var items = document.all.trCode;
    var msg = document.all.msg;
    if (event.keyCode != 40 && event.keyCode != 38 && event.keyCode != 13) {
        if (obj.value != "") {
            msg.style.display = "";
            msg.innerHTML = "";
            if (msg.hasChildNodes()) {
                msg.childNodes[0].parentNode.removeChild(msg.childNodes[0]);
            }
            for (var i = 0; i < items.length; i++) {
                var selValue = document.createElement("div");
                var selText = document.createElement("div");
                selText.value = items(i).value;
                selText.innerHTML = items(i).text;
                selText.className = 'auto-div';
                if (items(i).text.toLowerCase().indexOf(obj.value.toLowerCase()) >= 0) {
                    selText.setAttribute("id", "selText" + n);
                    selText.onmouseover = function () {
                        this.style.backgroundColor = '#003399';
                        this.style.color = '#ffffff';
                    }
                    selText.onmouseout = function () {
                        this.style.backgroundColor = '#ffffff';
                        this.style.color = '#000000';
                    }
                    selText.onclick = function () {
                        document.all.box.value = this.innerHTML;
                        msg.style.display = "none";
                        document.getElementById("txtSection").value = this.value;
                        changeOperation(this.value);
                    }
                    msg.appendChild(selText);
                    n++;
                }
            }

        } else {
            document.all.msg.style.display = "none";
        }
    } else {
        //press down key
        if (event.keyCode == 40) {
            jjj++;
            for (var i = 0; i < items.length; i++) {
                tmpObj = document.getElementById("selText" + i);
                if (tmpObj != null) {
                    tmpObj.style.backgroundColor = '#ffffff';
                    tmpObj.style.color = '#000000';
                }
            }
            tmpObj = document.getElementById("selText" + jjj);
            if (tmpObj != null) {
                tmpObj.style.backgroundColor = '#003399';
                tmpObj.style.color = '#ffffff';
            } else {
                jjj = 0;
            }
        }
        //press up key
        if (event.keyCode == 38) {
            jjj--;
            for (var i = 0; i < items.length; i++) {
                tmpObj = document.getElementById("selText" + i);
                if (tmpObj != null) {
                    tmpObj.style.backgroundColor = '#ffffff';
                    tmpObj.style.color = '#000000';
                }
            }
            tmpObj = document.getElementById("selText" + jjj);
            if (tmpObj != null) {
                tmpObj.style.backgroundColor = '#003399';
                tmpObj.style.color = '#ffffff';
            } else {
                jjj = 2;
            }
        }
        //press enter key
        if (event.keyCode == 13) {
            tmpObj = document.getElementById("selText" + jjj);
            document.all.box.value = tmpObj.innerHTML;
            msg.style.display = "none";
            document.getElementById("txtSection").value = tmpObj.value;
            changeOperation(tmpObj.value);
        }
    }
}


function SelMatch(items) {
    var currSel = document.all.box.value;
    for (var i = 0; i < items.length; i++) {
        if (items(i).text == currSel) {
            items.options(i).selected = true;
        }
    }
}

function NoMsg() {
    if (document.activeElement.id == "msg")
        return false;
    else
        document.all.msg.style.display = 'none';
}
﻿function Tip(tipStructure) {
    this.tipStructure = tipStructure;
    this.data = this.tipStructure.data;
    this.absX = this.tipStructure.x ? this.tipStructure.x : 0;
    this.absY = this.tipStructure.y ? this.tipStructure.y : 0;
    this.width = this.tipStructure.width ? this.tipStructure.width : 300;
    this.height = this.tipStructure.height ? this.tipStructure.height : 50;
    //回调方法
    if (this.tipStructure.endFunction) {
        if (typeof (this.tipStructure.endFunction) == "function") {//节点上的单击事件
            this.endFunction = this.tipStructure.endFunction;
        } else if (typeof (this.tipStructure.endFunction) == "string") {
            this.endFunction = eval(this.tipStructure.endFunction.replace("(", "").replace(")", ""));
        }
    }
    this.changeDiv = null;
    this.moveObjs = [];
    this.moveDiv = null;
    this.moveIframe = null;
    this.backIframe = null;
    this.backDiv = null;
    this.backObjs = [];
    this.dataIndex = -1;
    this.keyUp = 38;
    this.keyDown = 40;
    this.keyEnter = 13;
    this.keyOne = 49;
    this.keyZero = 48;
    this.mouseMoveObj = {x: 0, y: 0, status: 0};//1代表鼠标按下 0代表起来
    this.changeStatus = false;
    this.bodyKeyUp = null;
    this.backDivMouseup = null;
    this.backDivMousemove = null;
    this.changeDivMousedown = null;
    this.moveDivMousedown = null;
}

Tip.prototype = {
    constructor: Tip,
    show: function () {
        this.getCookieXY();
        this.createTip();
        this.addEventLinkTip();
    },
    getCookieXY: function () {
        var cookieStr = JBF.getCookieByName();
        var xy = JBF.strToObj(cookieStr);
        if (xy) {
            if (xy.left) {
                this.absX = xy.left;
            }
            if (xy.top) {
                this.absY = xy.top;
            }
            if (xy.width) {
                this.width = xy.width;
            }
            if (xy.height) {
                this.height = xy.height;
            }
        }
    },
    createInnerHTML: function (parentDiv, data, index) {
        if (data) {
            var icon = "<div style='width:44px;height:44px;background: url(" + JBF.getUrl() + "JBFCommon/css/dialog-icons.gif) no-repeat scroll  0px 0px  #ff0000;'></div>";
            if (!data.icon) {
                icon = "<div  style='width:44px;height:44px;background: url(" + JBF.getUrl() + "JBFCommon/css/dialog-icons.gif) no-repeat scroll  0px -48px  #f0f3fa;'></div>";
            }
            parentDiv.innerHTML = "<table cellspacing='0' cellpadding='0' style='width:95%; height:100%;'><tr><td bgcolor='#ff9900' align='center' width='15%'>" + (index + 1) + "</td><td width='65%'  align='left'><font size='4'>" + data.text + "</font></td><td align='center'>" + icon + "</td><td align='right' nowrap='nowrap'><font size='2' color='gray'>1-通过<br>0-不通过</font></td></tr></table>";
            parentDiv.appendChild(this.changeDiv);
            return;
        }
        parentDiv.innerHTML = "";
    },
    createTip: function () {
        if (null == this.changeDiv) {
            this.changeDiv = document.createElement("div");
            this.changeDiv.id = "tipDiv";
            this.changeDiv.style.height = "7px";
            this.changeDiv.style.width = "7px";
            this.changeDiv.style.position = "relative";
            this.changeDiv.style.left = (this.width - 7) + "px";
            this.changeDiv.style.top = "-7px";
            this.changeDiv.style.cursor = "se-resize";
            this.changeDiv.style.background = "url('" + JBF.getUrl() + "JBFCommon/css/changeWH.gif') no-repeat";
        }
        if (null == this.moveDiv) {
            this.moveDiv = document.createElement("div");
            this.moveDiv.style.backgroundColor = "#eeeeee";
            this.moveDiv.style.border = "2px #8b8b8b solid";
            this.moveDiv.style.fontFamily = " '黑体','宋体',Arial,sans-serif;";
            this.moveDiv.style.fontWeight = 900;
            this.moveDiv.style.fontSize = "18px";
            this.moveDiv.style.color = "#0000ff";
            this.moveDiv.style.zIndex = 10001;
            this.moveObjs.push(this.moveDiv);
            if (this.data && this.data.length > 0) {
                this.createInnerHTML(this.moveDiv, this.data[0], 0);
                this.dataIndex = 0;
            }
        }
        if (null == this.moveIframe) {
            this.moveIframe = document.createElement("iframe");
            this.moveIframe.setAttribute("frameborder", "0");
            this.moveIframe.setAttribute("scrolling", "no");
            this.moveIframe.style.filter = "alpha(opacity=0)";
            this.moveIframe.style.backgroundColor = "#54573e";
            this.moveIframe.style.zIndex = 1000;
            this.moveObjs.push(this.moveIframe);
        }
        if (null == this.backIframe) {
            this.moveIframe = document.createElement("iframe");
            this.moveIframe.setAttribute("frameborder", "0");
            this.moveIframe.setAttribute("scrolling", "no");
            this.moveIframe.style.filter = "alpha(opacity=0)";
            this.moveIframe.style.backgroundColor = "#ffffff";
            this.moveIframe.style.zIndex = 10;
            this.backObjs.push(this.moveIframe);
        }
        if (null == this.backDiv) {
            this.backDiv = document.createElement("div");
            this.backDiv.style.backgroundColor = "#ffffff";
            this.backDiv.style.filter = "alpha(opacity=0)";
            this.backDiv.style.zIndex = 100;
            this.backObjs.push(this.backDiv);
        }
        for (var i = 0; i < this.backObjs.length; i++) {
            var backObj = this.backObjs[i];
            backObj.style.width = JBF.getScreenWidth();
            backObj.style.height = JBF.getScreenHeight();
            backObj.style.position = "absolute";
            backObj.style.left = "0px";
            backObj.style.top = "0px";
            backObj.style.display = "none";
            document.body.appendChild(backObj);
        }
        for (var i = 0; i < this.moveObjs.length; i++) {
            var moveObj = this.moveObjs[i];
            moveObj.style.width = this.width;
            moveObj.style.height = this.height;
            moveObj.style.position = "absolute";
            moveObj.style.left = this.absX;
            moveObj.style.top = this.absY;
            document.body.appendChild(moveObj);
        }
    },
    addEventLinkTip: function () {
        var that = this;
        this.bodyKeyUp = function () {
            var ev = JBF.getEvent(event);
            var keyCode = JBF.getKeyValue(ev);
            if (keyCode == that.keyUp) {
                that.dataIndex -= 1;
                if (that.dataIndex < 0) {
                    that.dataIndex = 0;
                    return;
                } else {
                    that.createInnerHTML(that.moveDiv, that.data[that.dataIndex], that.dataIndex);
                }
            }
            if (keyCode == that.keyDown) {
                that.dataIndex += 1;
                if (that.dataIndex >= that.data.length) {
                    that.dataIndex = that.data.length - 1;
                    return;
                } else {
                    that.createInnerHTML(that.moveDiv, that.data[that.dataIndex], that.dataIndex);
                }
            }
            if (keyCode == that.keyEnter) {
                that.dataIndex += 1;
                if (that.dataIndex >= that.data.length) {
                    that.dataIndex = that.data.length - 1;
                    if (typeof (that.tipStructure.endFunction) == "function") {
                        var returnObj = [];
                        for (var i = 0; i < that.data.length; i++) {
                            if (that.data[i].icon) {
                                returnObj.push("1");
                            } else {
                                returnObj.push("0");
                            }
                        }
                        that.endFunction(returnObj);
                    }
                } else {
                    that.createInnerHTML(that.moveDiv, that.data[that.dataIndex], that.dataIndex);
                }
            }
            if (keyCode == that.keyOne) {
                that.data[that.dataIndex].icon = true;
                that.createInnerHTML(that.moveDiv, that.data[that.dataIndex], that.dataIndex);
            }
            if (keyCode == that.keyZero) {
                that.data[that.dataIndex].icon = false;
                that.createInnerHTML(that.moveDiv, that.data[that.dataIndex], that.dataIndex);
            }
        };
        this.moveDivMousedown = function () {
            var left = JBF.getStyleNum(that.moveDiv.style.left);
            var top = JBF.getStyleNum(that.moveDiv.style.top);
            var height = JBF.getStyleNum(that.moveDiv.style.height);
            var width = JBF.getStyleNum(that.moveDiv.style.width);
            that.mouseMoveObj = {
                height: height,
                width: width,
                left: left,
                top: top,
                x: JBF.getMouseX(event),
                y: JBF.getMouseY(event),
                status: 1
            };
            for (var i = 0; i < that.backObjs.length; i++) {
                var backObj = that.backObjs[i];
                backObj.style.display = "inline";
            }
            that.backDiv.style.zIndex = "100000";
        };
        this.backDivMousemove = function (event) {
            if (that.changeStatus) {//要改变大小
                that.changeWH();
            } else {//移动
                that.objMove();
            }
        };
        this.backDivMouseup = function (event) {
            endX = JBF.getMouseX(event);
            endY = JBF.getMouseY(event);
            that.mouseMoveObj = {x: endX, y: endY, status: 0};
            that.changeStatus = false;
            var left = JBF.getStyleNum(that.moveDiv.style.left);
            var top = JBF.getStyleNum(that.moveDiv.style.top);
            var width = JBF.getStyleNum(that.moveDiv.style.width);
            var height = JBF.getStyleNum(that.moveDiv.style.height);

            var cookieStr = "{left:" + left + ",top:" + top + ",width:" + width + ",height:" + height + "}";
            JBF.saveCookie("ls", 1000, cookieStr);
            for (var i = 0; i < that.backObjs.length; i++) {
                var backObj = that.backObjs[i];
                backObj.style.display = "none";
            }
            //this.backDiv.zIndex=100;
        };
        this.changeDivMousedown = function (event) {
            that.changeStatus = true;
        };
        JBF.addEvent(document.body, "keyup", this.bodyKeyUp);
        JBF.addEvent(this.moveDiv, "mousedown", this.moveDivMousedown);
        JBF.addEvent(this.backDiv, "mousemove", this.backDivMousemove);
        JBF.addEvent(this.backDiv, "mouseup", this.backDivMouseup);
        JBF.addEvent(this.changeDiv, "mousedown", this.changeDivMousedown);
    },
    changeWH: function () {
        var that = this;
        var endX = JBF.getMouseX(event);
        var endY = JBF.getMouseY(event);
        var moveX = endX - that.mouseMoveObj.x;
        var moveY = endY - that.mouseMoveObj.y;
        for (var i = 0; i < that.moveObjs.length; i++) {
            var obj = that.moveObjs[i];
            var width = that.mouseMoveObj.width + moveX;
            //alert("width"+width);
            if (width < 400) {
                width = 400;
            }
            obj.style.width = width + "px";
            var height = that.mouseMoveObj.height + moveY;
            //alert("height"+height);
            if (height < 70) {
                height = 70;
            }
            obj.style.height = height + "px";
        }
        this.changeDiv.style.left = (that.mouseMoveObj.width - 7 + moveX) + "px";
    },
    objMove: function () {
        var that = this;
        if (that.mouseMoveObj.status == 1) {
            //alert("mouseMove");
            var endX = JBF.getMouseX(event);
            var endY = JBF.getMouseY(event);
            var moveX = endX - that.mouseMoveObj.x;
            var moveY = endY - that.mouseMoveObj.y;
            for (var i = 0; i < that.moveObjs.length; i++) {
                var obj = that.moveObjs[i];
                obj.style.left = (that.mouseMoveObj.left + moveX) + "px";
                obj.style.top = (that.mouseMoveObj.top + moveY) + "px";
            }
        }
    },
    hideTip: function () {
        for (var i = 0; i < this.moveObjs.length; i++) {
            this.moveObjs[i].style.display = "none";
        }
        for (var i = 0; i < this.backObjs.length; i++) {
            this.backObjs[i].style.display = "none";
        }
    },
    changeTip: function (data) {
        this.data = data;
        this.dataIndex = -1;
    },
    removeTip: function () {
        JBF.removeEvent(document.body, "keyup", this.bodyKeyUp);
        JBF.removeEvent(this.moveDiv, "mousedown", this.moveDivMousedown);
        JBF.removeEvent(this.backDiv, "mousemove", this.backDivMousemove);
        JBF.removeEvent(this.backDiv, "mouseup", this.backDivMouseup);
        JBF.removeEvent(this.changeDiv, "mousedown", this.changeDivMousedown);
        this.dataIndex = -1;
        for (var i = 0; i < this.moveObjs.length; i++) {
            this.moveObjs[i].parentNode.removeChild(this.moveObjs[i]);
        }
        for (var i = 0; i < this.backObjs.length; i++) {
            this.backObjs[i].parentNode.removeChild(this.backObjs[i]);
        }

    }
};


var TagConst = {

    /**
     * 标签常量
     */
    name: {
        TR: "tr", TD: "td", INPUT: "input", SPAN: "span", B: "b", LABEL: "label",
        FONT: "font", DIV: "div", TABLE: "table"
    }, type: {
        RADIO: "RADIO", CHECKBOX: "CHECKBOX",
        TEXT: "TEXT", HIDDEN: "hidden", BUTTON: "button", SUBMIT: "submitButton"
    }
}
﻿/*******************************************************************************
 * 颜色面板块
 *
 * @param colorObj
 * @param opObj
 * @returns
 */
function ColorPanel(colorObj, opObj) {
    this.keyStatus = false;
    this.startX = 0;
    this.maxLength = 128;
    this.rColor = 0;
    this.gColor = 0;
    this.bColor = 0;
    this.bit = "1";
    this.moveObj = null;
    this.colorObj = colorObj;
    this.objLeft = 0;
    this.color = "#000000";
    this.opObj = opObj;
}

ColorPanel.prototype = {
    constructor: ColorPanel,
    getX: function (ev) {

        return ev.screenX;

    },
    getEventTarget: function (ev) {
        if (ev.srcElement) {
            return ev.srcElement;
        } else {
            return ev.target;
        }
    },
    mouseDown: function (status) {
        this.keyStatus = true;
        var ev = window.event;
        this.moveObj = this.getEventTarget(ev);
        this.objLeft = Number(this.moveObj.style.left.replace("px", ""));
        this.startX = this.getX(ev);
        this.bit = status + "";
        window.event.cancelBubble = true;
    },
    mouseMove: function () {
        if (this.keyStatus) {
            var ev = window.event;
            var moveX = this.getX(ev) - this.startX;
            var colorValue = (this.objLeft + moveX);
            if (colorValue > this.maxLength) {
                colorValue = this.maxLength;
            } else if (colorValue < 0) {
                colorValue = 0;
            }
            this.moveObj.style.left = colorValue + "px";
            var dbColor = colorValue * 2;
            if (dbColor > 255) {
                dbColor = 255;
            }
            if (this.bit == "1") {
                this.rColor = dbColor;
            } else if (this.bit == "2") {
                this.gColor = dbColor;
            } else if (this.bit == "3") {
                this.bColor = dbColor;
            }
            this.getColor();
        }
        window.event.cancelBubble = true;
    },
    getColor: function () {
        this.color = "#" + JBF.to16(this.rColor) + JBF.to16(this.gColor)
            + JBF.to16(this.bColor);
        JBF.el(this.colorObj + "MinColor").style.backgroundColor = this.color;
        JBF.el(this.colorObj + "InputColor").value = this.color;
        this.opObj.value = this.color;
        this.opObj.style.backgroundColor = this.color;
    },
    mouseUp: function () {
        this.keyStatus = false;
        window.event.cancelBubble = true;
    },
    show: function (colorStr) {
        var colorLeftStyle = "";
        if (colorStr) {
            colorStr = colorStr.replace("#", "");
        } else {
            colorStr = "000000";
        }
        var str = "<div class='colorPanel' onclick='if(window.event){window.event.cancelBubble=true;}' onmousemove='"
            + this.colorObj
            + ".mouseMove();' onmouseup='"
            + this.colorObj
            + ".mouseUp()'>";
        str += "<div id='"
            + this.colorObj
            + "MinColor' style='width:16px;height:16px; float:left;margin-right:10px;background-color:#"
            + colorStr
            + ";border:1px solid #880000;'></div><div style='float:left;'><input style='width:80px;border:none;' id='"
            + this.colorObj + "InputColor'></div>";
        for (var i = 1; i < 4; i++) {
            var otherClass = "blue";
            colorLeftStyle = colorStr.substring((i - 1) * 2, i * 2);
            colorLeftStyle = parseInt("0x" + colorLeftStyle, 16);
            switch (i) {
                case 1:
                    this.rColor = colorLeftStyle;
                    otherClass = "red";
                    break;
                case 2:
                    this.gColor = colorLeftStyle;
                    otherClass = "green";
                    break;
                case 3:
                    this.bColor = colorLeftStyle;
                    otherClass = "blue";
                    break;
            }
            colorLeftStyle = "style='left:" + colorLeftStyle / 2 + "px;'";
            str += "<div class='parentDiv " + otherClass
                + "'><div class='childDiv' " + colorLeftStyle
                + " onmouseout='event.cancelBubble=true;' onmousedown='"
                + this.colorObj + ".mouseDown(" + i + ");'></div></div>";
        }
        str += "<div style='width:100%; text-align:right;'><a href='javascript:void(0)' onclick='JBF.closeColorPanel();'>关闭</a></div>";
        return str + "</div>";
    }
};
﻿function newElement(str) {
    return document.createElement(str);
}

// new表格
function Table(tableStructure, tableName, formName, addWndWidth, addWndHeight) {
    this.eventListners = new Array();
    this.addWndWidth = addWndWidth;
    this.addWndHeight = addWndHeight;
    this.isShowBlankTr = false; // 是否显示空白行
    this.defaultWidth = 120;// 默认的列宽
    this.pageSize = 10;// 每页显示的记录
    this.pageIndex = 1;// 当前页的索引
    this.totalRows = 0;// 总记录行数
    this.pageCount = 0;// 共有多少页（总页数）
    this.pageRows = 0;// 当前页记录个数
    this.url = "";// 数据url
    this.selectType = "generic";// 选择类型
    this.tableStructure = tableStructure;// 所有对象
    this.tableDiv = null;// 生成的脚本存方的位置
    this.tableName = tableName;// 生成的对像名称。必须传进来
    this.tableId = this.tableName + "Table";
    this.formName = formName;// 看是否有form表单操作如果有的话，则增加查询条件
    this.selectRowIndexes = [];// 选中行的索引数组
    this.trHeight = 20;// 行高，默认20
    this.rowClick = null;// 点击事件
    this.rowDbClick = null;// 双击事件
    this.titleSpan = null;// 合并表头信息
    this.isFooter = true;// 是否显示分页信息
    this.isShowCheck = true;// 是否显示radio/checkbox控件
    this.opCode = "";// 操作的对像(如增加，详细页面的文件名)，用于龙虎说的增删改查的全部封装()
    this.opName = "";// 同上，表示增删改查的titfle名
    this.orderName = tableStructure.orderName;
    this.orderType = tableStructure.orderType;
    this.filter = tableStructure.filter;
    this.defaultSelectedRowIndex = 0;
    this.datas = [];// 初始化表格数据信
    this.columns = [];// 初始化表格列信息
    this.titleTr = "";// 表头字符串
    this.content = "";// 内容字符串
    this.footer = "";// 脚本字符串
    this.tableConfigDiv = null;// 表格配置div
    this.tableWidth = 0;
    this.closeMethod = null;
    this.buttonDatas = [];// 默认按钮
    this.cookieColumns = [];
    this.columnsColors = ["#ff0000", "#00FFff", "#0000ff",];
    this.extendAttribute = null;
    this.trOverColor = '#ffffd4';// 鼠标经过颜色
    this.trSelectedColor = '#ffffd4';
    this.lockRows = [];
    this.checkedForm = false;
    this.trOnmouseover = '';
    this.trMoveDiv = null;
    this.tdButtonEvents = [];
    this.moveObj = new function () {
        this.opTd = null;
        this.startX = 0;
        this.endX = 0;
        this.status = false;
        this.mouseMove = null;
        this.mouseUp = null;
        this.selectstart = null;
    };

    this.openWinStyle = "dialogWidth=" + (window.screen.availWidth) + "px;dialogHeight=" + (window.screen.availHeight)
        + "px; status=no; scroll=no; resizable=no;";// 用于简单的增删改查操作
    // ---
    if (this.tableStructure) {
        if (this.tableStructure.isShowBlankTr != undefined
            && (this.tableStructure.isShowBlankTr == "false" || this.tableStructure.isShowBlankTr == false)) {
            this.isShowBlankTr = false;
        }
        if (this.tableStructure.isFooter && this.tableStructure.isFooter == "false") {
            this.isFooter = false;
        }
        if (this.tableStructure.pageSize) {
            this.pageSize = this.tableStructure.pageSize;
        }
        if (this.tableStructure.url) {
            this.url = this.tableStructure.url;
        }
        if (this.tableStructure.selectType) {
            this.selectType = this.tableStructure.selectType;
        }
        if (this.tableStructure.rownumbers) {
            this.rownumbers = this.tableStructure.rownumbers;
        }

        if (this.tableStructure.trHeight) {
            this.trHeight = this.tableStructure.trHeight;
        }
        if (typeof (this.tableStructure.rowClick) == "function") {
            this.rowClick = this.tableStructure.rowClick;
        } else if (typeof (this.tableStructure.rowClick) == "string") {
            this.rowClick = eval(this.tableStructure.rowClick.replace("(", "").replace(")", ""));
        }
        if (typeof (this.tableStructure.rowDbClick) == "function") {
            this.rowDbClick = this.tableStructure.rowDbClick;
        } else if (typeof (this.tableStructure.rowDbClick) == "string") {
            this.rowDbClick = eval(this.tableStructure.rowDbClick.replace("(", "").replace(")", ""));
        }

        if (typeof (this.tableStructure.rowMouseOver) == "function") {
            this.rowMouseOver = this.tableStructure.rowMouseOver;
        } else if (typeof (this.tableStructure.rowMouseOver) == "string") {
            this.rowMouseOver = eval(this.tableStructure.rowMouseOver.replace("(", "").replace(")", ""));
        }
        if (typeof (this.tableStructure.rowMouseOut) == "function") {
            this.rowMouseOut = this.tableStructure.rowMouseOut;
        } else if (typeof (this.tableStructure.rowMouseOut) == "string") {
            this.rowMouseOut = eval(this.tableStructure.rowMouseOut.replace("(", "").replace(")", ""));
        }

        if (this.tableStructure.titleSpan) {
            this.titleSpan = this.tableStructure.titleSpan;
        }
        if (this.tableStructure.opCode) {
            this.opCode = this.tableStructure.opCode;
        }
        if (this.tableStructure.opName) {
            this.opName = this.tableStructure.opName;
        }
        if (this.tableStructure.extendAttribute) {
            this.extendAttribute = this.tableStructure.extendAttribute;
        }
        if (this.tableStructure.buttons) {
            this.buttonDatas = this.tableStructure.buttons;
        }
        if (this.tableStructure.useDefaultButtons) {
            this.buttonDatas = defaultFormButtons.datas;
        }
        if (this.tableStructure.checkedForm) {
            this.checkedForm = true;
        }
        if (this.tableStructure.isShowCheck && this.tableStructure.isShowCheck == "false") {// 设置是否显示checkbox
            // radio列
            this.isShowCheck = false;
        }
        if (this.tableStructure.lockRows) {
            this.lockRows = this.tableStructure.lockRows;
        }

        if (this.tableStructure.columnShadow) {// 字段列做投影操作，如果查询出的字段名称与实际名称不符合可以用此集合来做映射，而不需要修改后台代码
            this.columnShadow = this.tableStructure.columnShadow;
        }

        if (this.tableStructure.columns) {
            for (var i = 0; i < this.tableStructure.columns.length; i++) {
                var column = this.tableStructure.columns[i];
                if (!(column.hidden && column.hidden == "true")) {
                    this.columns.push(column);
                }
            }
        }
        if (this.tableStructure.data) {
            if (this.tableStructure.data.rows) {
                this.datas = this.tableStructure.data.rows;
            }
            if (this.tableStructure.data.pageIndex) {
                this.pageIndex = this.tableStructure.data.pageIndex;
            }
            if (this.tableStructure.data.totalRows) {
                this.totalRows = this.tableStructure.data.totalRows;
            }
            if (this.datas) {
                this.pageRows = this.datas.length;
            }
        }
        if (this.columns) {
            var cookieStr = JBF.getCookieByName();
            if (cookieStr) {
                var cookies = JBF.strToObj(cookieStr);
                var cookieColumns = cookies["columns"];
                var cookieColors = cookies["colors"];
                if (cookieColumns) {
                    cookieColumns.sort(function (pojo1, pojo2) {
                        if (pojo1.index > pojo2.index) {
                            return 1;
                        } else if (pojo1.index < pojo2.index) {
                            return -1;
                        } else {
                            return 0;
                        }
                    });
                    for (var i = 0; i < cookieColumns.length; i++) {
                        for (var j = 0; j < this.columns.length; j++) {
                            if (cookieColumns[i]["name"] == this.columns[j].name) {
                                var width = cookieColumns[i]["width"];
                                this.columns[j].width = Number(width);
                                this.cookieColumns.push(this.columns[j]);
                            }
                        }
                    }
                }
                if (cookieColors) {
                    if (cookieColors["overColor"]) {
                        this.trOverColor = cookieColors["overColor"];
                    }
                    if (cookieColors["selectedColor"]) {
                        this.trSelectedColor = cookieColors["selectedColor"];
                    }
                }
            } else {
                this.cookieColumns = this.columns;
            }
        }
    }
}

Table.prototype = {
    addEventListner: function (eventListner) {
        this.eventListners.push(eventListner);
    },
    throwOnclickEvent: function (rowIndexa) {
        for (var i = 0; i < this.eventListners.length; i++) {
            if (this.eventListners[i].processOnclickEvent) {
                this.eventListners[i].processOnclickEvent(rowIndex, this.datas[rowIndex].id,
                    this.tableStructure.extendAttribute);
            }
        }
    },
    mousePresss: function (columnIndex, ev, cty) {
        if (null != this.trMoveDiv) {
            this.trMoveDiv.style.display = "inline";
        } else {
            var absY = JBF.getAbsY(cty);
            var table = JBF.getParentNodeByNodeName("TABLE", cty);
            var absHeight = "100px";
            if (null != table) {
                absHeight = JBF.getObjHeight(table);
            }
            this.trMoveDiv = document.createElement("div");
            this.trMoveDiv.className = "trMoveDiv";
            this.trMoveDiv.style.top = absY + "px";
            this.trMoveDiv.style.height = absHeight + "px";
            document.body.appendChild(this.trMoveDiv);
        }
        var x = JBF.getX(ev) + 2;
        this.trMoveDiv.style.left = x + "px";
        this.moveObj.startX = x;
        this.moveObj.endX = x;
        this.moveObj.opTd = JBF.getParentNodeByNodeName("TD", cty);
        this.moveObj.status = true;

        this.moveObj.mouseMove = this.tdMouseMove();
        this.moveObj.mouseUp = this.tdMouseUp();
        this.moveObj.selectstart = this.tableSelect();

        JBF.addEvent(document.body, "mousemove", this.moveObj.mouseMove);
        JBF.addEvent(document.body, "mouseup", this.moveObj.mouseUp);
        JBF.addEvent(document.body, "selectstart", this.moveObj.selectstart);
    },
    tdMouseMove: function () {
        var that = this;
        return function () {
            if (that.moveObj.status) {
                var x = JBF.getX(arguments.event) + 2;
                that.trMoveDiv.style.left = x + "px";
                that.moveObj.endX = x;
            }
        };
    },
    tableSelect: function () {
        return function () {
            return false;
        };
    },
    tdMouseUp: function () {
        var that = this;
        return function () {
            var offset = that.moveObj.endX - that.moveObj.startX;
            var tdWidth = JBF.getObjWidth(that.moveObj.opTd) + offset;
            that.moveObj.opTd.style.width = tdWidth + "px";
            // alert(that.moveObj.opTd.attributes["columnName"].value);
            JBF.removeEvent(document.body, "mousemove", that.moveObj.mouseMove);
            JBF.removeEvent(document.body, "mouseup", that.moveObj.mouseUp);
            JBF.removeEvent(document.body, "selectstart", that.moveObj.selectstart);
            that.moveObj.status = false;
            var tableWidth = JBF.el(that.tableId).style.width.replace("px", "");
            JBF.el(that.tableId).style.width = (Number(tableWidth) + offset) + "px";
            that.trMoveDiv.style.display = "none";
            that.changeColumnWidth(that.moveObj.opTd.attributes["columnName"].value, tdWidth);
        };
    },
    changeColumnWidth: function (name, width) {
        for (var i = 0; i < this.columns.length; i++) {
            if (this.columns[i].name == name) {
                this.columns[i].width = width;
            }
        }
    },
    /**
     * 行鼠标经过移出事件
     */
    outTrClass: function (trObj, rowIndex) {
        if (trObj.className != 'trOnClick') {
            if (trObj.attributes["srcClass"]) {
                setClassName(trObj, trObj.attributes["srcClass"].value);
            } else {
                setClassName(trObj, '');
            }
        }
    },
    /**
     * 行鼠标单击事件，如果单击时行背景色变化。同时如果checkbox类型，则将选中的行索引加入到keyIndexs
     * 如果传递了行单击事件，还会执行，行单击事件
     */
    clickRow: function (rowIndex) {// 行鼠标单击
        var otc = JBF.el(this.tableId).rows[rowIndex + 1];
        if (!otc.orgBack) {
            otc.orgBack = otc.style.backgroundColor;
            if (!otc.orgBack) {
                otc.orgBack = "";
            }
        }
        if (this.datas && this.datas.length > 0) {
            if (this.selectType == "radio" || this.selectType == "generic") {
                if (this.selectRowIndexes.length == 0) {
                    this.selectRow(rowIndex);
                } else {
                    if (rowIndex == this.selectRowIndexes[0])
                        return;
                    else {
                        this.deSelectRow(this.selectRowIndexes[0]);
                        this.selectRow(rowIndex);
                    }
                }
            } else if (this.selectType == "check") {
                if (this.isRowSelected(rowIndex)) {
                    this.deSelectRow(rowIndex);
                    return;
                }
                this.selectRow(rowIndex);
            }
            if (null != this.rowClick) {
                this.rowClick(rowIndex, this.datas[rowIndex].id, this.tableStructure.extendAttribute);
            }
            this.throwOnclickEvent(rowIndex);
        }
    },
    /**
     * 行双击事件，所触发的事件
     */
    dbClickRow: function (rowIndex) {
        if (null != this.rowDbClick) {
            this.rowDbClick(rowIndex, this.datas[rowIndex].id, this.tableStructure.extendAttribute);
        }
    },
    /**
     * 检查当前选中行在keyIndexs数组中是否有此索引值，如果有的话，则不在存储到此数据中(只有在多选时才用到)
     */
    isRowSelected: function (rowIndex) {
        // --用来存储选中值的索引
        for (var i = 0; i < this.selectRowIndexes.length; i++) {
            if (this.selectRowIndexes[i] == rowIndex) {
                return true;
            }
        }
        return false;
    },
    /**
     * -删除数组当中的值
     */
    deSelectRow: function (rowIndex) {
        // this.datas.splice(index, 1);
        for (var i = 0; i < this.selectRowIndexes.length; i++) {
            if (this.selectRowIndexes[i] == rowIndex) {
                this.selectRowIndexes.splice(i, 1);
                this.changeRowClassName("", rowIndex);
                // 修改颜色
                return;
            }
        }
        return;
    },

    /**
     * 行鼠标经过移入事件
     */
    overTrClass: function (otc) {
        setClassName(otc, 'trOver');
        if (this.rowMouseOver) {
            this.rowMouseOver(11);
        }
    },
    /**
     * 进行排序操作
     */
    onclickTitle: function (columnName) {// 进行排序操作
        if (this.orderName == columnName) {
            if (this.orderType == "asc") {
                this.orderType = "desc";
            } else if (this.orderType == "desc") {
                this.orderType = "";
                this.orderName = "";
            } else {
                this.orderType = "asc";
            }
        } else {
            this.orderName = columnName;
            this.orderType = "asc";
        }
        this.searchByForm();
    },

    /**
     * 选择所有记录（同是改变选择行的背景色，如果checkbox则选取所有，如果radio则选择当前项）
     */
    checkedAll: function (cty) {
        var className = "checkbox_checked";
        var bit = true;
        if (cty.className && cty.className == className) {
            className = "checkbox";
            bit = false;
        }
        cty.className = className;
        for (var i = 0; i < this.datas.length; i++) {
            // JBF.el("check"+i).className=className;
            if (!this.isLockTrByIndex(i)) {
                if (bit) {
                    this.selectRow(i);
                } else {
                    this.deSelectRow(i);
                }
            }
        }
    },
    /**
     * 首页
     */
    pre_first: function () {
        this.pageIndex = 1;
        this.searchByForm();
    },
    /**
     * 上一页
     */
    pre_page: function () {
        this.pageIndex -= 1;
        this.searchByForm();
    },
    /**
     * 下一页
     */
    next_page: function () {
        this.pageIndex += 1;
        this.searchByForm();
    },
    /**
     * 尾页
     */
    next_end: function () {
        this.pageIndex = this.pageCount;
        this.searchByForm();
    },
    /**
     * 刷新页面
     */
    flush_page: function (pageIndex) {
        if (pageIndex) {
            this.pageIndex = pageIndex;
        } else {
            var flushInput = JBF.el(this.tableName + "FlushInput");
            if (flushInput && flushInput.value) {
                if (flushInput.value < this.pageCount) {
                    this.pageIndex = flushInput.value;
                } else if (flushInput.value < 1) {
                    this.pageIndex = 1;
                } else {
                    this.pageIndex = this.pageCount;
                }
            } else {
                this.pageIndex = 1;
            }
        }
        this.searchByForm();
    },
    /**
     * 按钮鼠标经过时
     */
    btn_over: function (cty) {
        cty.className = cty.className + " fonterBtnDivOver";
    },
    /**
     * 按钮鼠标离开
     */
    btn_out: function (cty) {
        cty.className = cty.className.replace(" fonterBtnDivOver", "");
    },
    /**
     * 获取指定字段的值，并通过数组形式返回
     */
    getSelectedValues: function (columnName, rowIndex) {
        var key = columnName;
        if (!key) {
            key = "id";
        }
        var values = [];
        // alert("typeof(rowIndex):"+typeof(rowIndex));
        if (rowIndex != undefined && typeof (rowIndex) == "number") {
            var data = this.groupEditValue(this.datas[rowIndex], key, rowIndex);
            values.push(data[key]);
        } else {
            for (var i = 0; i < this.selectRowIndexes.length; i++) {
                var dataIndex = parseInt(this.selectRowIndexes[i]);
                var data = this.groupEditValue(this.datas[dataIndex], key, dataIndex);
                values.push(data[key]);
            }
        }
        return values;
    },
    groupEditValue: function (data, columnName, rowIndex) {
        var column = this.getColumnByName(columnName);
        if (column && column.isEdit) {
            var name = column.name + "EditInput_" + rowIndex;
            if (JBF.el(name)) {
                data[column.name] = JBF.el(name).value;
            }
        }
        return data;
    },
    /**
     * 根据选择行索引，获取某字段的值
     */
    getValueForIndex: function (columnName, rowIndex) {
        var key = columnName;
        if (!key) {
            key = "id";
        }
        var rowData = this.datas[rowIndex];
        return rowData[key];
    },
    setValueForIndex: function (rowIndex, columnName, value) {
        var data = this.datas[rowIndex];
        data[columnName] = value;
        this.refreshDatas();
    },
    /**
     * 设置行的背景
     */
    setRowBgColor: function (rowIndex, bgColor) {
        JBF.el(this.tableId).rows[rowIndex + 1].style.backgroundColor = bgColor;
    },
    /**
     * 得到行的记录数
     */
    getRowsCount: function () {
        return this.datas.length;
    },

    /**
     * 显示表格的主函数,用于整合表格，并放到页面中的指定位置//有问题，需要修改
     */
    show: function (tableDiv) {
        if (tableDiv) {
            this.tableDiv = tableDiv;
        } else {
            this.tableDiv = newElement("div");
            this.tableDiv.id = "tableDiv";
            document.body.appendChild(this.tableDiv);
        }
        this.refreshDatas();

    },
    showAndQuery: function (tableDiv) {
        if (tableDiv) {
            this.tableDiv = tableDiv;
        } else {
            this.tableDiv = newElement("div");
            this.tableDiv.id = "tableDiv";
            document.body.appendChild(this.tableDiv);
        }
        this.searchByForm();
    },
    toHtml: function () {
        var tohtml = this.searchByForm(true);
        if (this.datas && this.datas.length > 0) {
            this.selectRowIndexes.push(0);
        }
        return tohtml;
    },

    /** 通过url,及查询条件进行查询操作* */
    searchByForm: function (isToHTML, callFun) {
        var that = this;
        var tableStr = "";
        this.selectRowIndexes = [];
        if (this.url) {
            var params = this.getParams();
            var searchBit = true;
            if (this.checkedForm && params.length <= 0) {
                alert("query condition error");
                searchBit = false;
            }
            if (searchBit) {
                var pageInfo = this.getPagesParams();
                var datassss = pageInfo + params;
                if (this.tableStructure && this.tableStructure.extData) {
                    datassss += this.tableStructure.extData;
                }
                JBF.ajax(this.url, datassss, function (msg) {
                    // 测试代码:
                    if (window.location.href.indexOf("testManage.html") != -1) {
                        msg = new Object();
                        msg.pageSize = 10;
                        msg.pageList = new Array();
                        for (var i = 0; i < 20; i++) {
                            msg.pageList[msg.pageList.length] = {
                                'smUserByUserId.code_name': '111-张三',
                                'smRoleByRoleId.code_name': "管理员" + i
                            };
                        }
                        msg.totalRows = 100;
                        msg.pageIndex = 1;
                    }
                    // 测试代码结束
                    if (msg && msg.pageList) {
                        try {
                            onSearch();
                        } catch (e) {
                        }
                        if (typeof (msg.pageSize) == "number") {
                            that.pageSize = msg.pageSize;
                        }
                        that.datas = msg.pageList;
                        that.groupColumnsShadow(that.datas);
                        if (typeof (msg.totalRows) == "number") {
                            that.totalRows = msg.totalRows;
                        }
                        if (typeof (msg.pageIndex) == "number") {
                            that.pageIndex = msg.pageIndex;
                        }
                        // 刷新表格
                        tableStr = that.refreshDatas(isToHTML);
                        if (callFun) {
                            callFun(msg);
                        }
                    }
                });
            }
        } else {
            tableStr = this.refreshDatas(isToHTML);
        }
        if (isToHTML) {
            return tableStr;
        }
    },
    groupColumnsShadow: function (datas) {
        if (datas && datas.length > 0 && this.columnShadow && this.columnShadow.length > 0) {
            for (var i = 0; i < datas.length; i++) {
                this.groupColumnShadow(datas[i]);
            }
        }
    },
    groupColumnShadow: function (data) {
        if (this.columnShadow && this.columnShadow.length > 0) {
            for (var j = 0; j < this.columnShadow.length; j++) {
                var shadow = this.columnShadow[j];
                if (shadow.length > 1) {
                    var newData = data;
                    newData[shadow[0]] = newData[shadow[1]];
                    data = newData;
                }
            }
        }
        return data;
    },
    getPagesParams: function () {
        if (JBF.el(this.tableName + "pageSize")) {
            this.pageSize = JBF.el(this.tableName + "pageSize").value;
        }
        var params = "pageIndex=" + this.pageIndex + "&pageSize=" + this.pageSize + "&selectRowIndex="
            + this.selectRowIndexes;
        if (this.filter) {
            params += "&filter=" + encodeURIComponent(this.filter);
        }
        if (this.orderName) {
            var names = this.orderName.split(",");
            var orderbyNames = "";
            for (var i = 0; i < names.length; i++) {
                if (names[i].length > 5 && names[i].substring(names[i].length - 5) == "_date") {
                    orderbyNames += names[i].substring(0, names[i].length - 5);
                } else if (names[i].length > 5 && names[i].substring(names[i].length - 5) == "_time") {
                    orderbyNames += names[i].substring(0, names[i].length - 5);
                } else {
                    orderbyNames += names[i];
                }
                if (i < names.length - 1) {
                    orderbyNames += ",";
                }
            }
            params += "&orderName=" + orderbyNames;
            if (this.orderType) {
                params += "&orderType=" + this.orderType;
            }
        }
        return params;
    },
    getParams: function () {
        var params = "";
        if (this.formName) {
            var formStr = "";
            if (this.checkedForm) {
                formStr = (eval(this.formName + ".checkPojos()"));
                if (formStr.length < 1) {
                    return "";
                }
            } else {
                formStr = (eval(this.formName + ".getValues()"));
            }
            params += "&" + formStr;
        }
        return params;
    },

    /**
     * 整合表格，将表头，内容，及表尾进行整合
     */
    refreshDatas: function (isToHTML) {
        this.tableWidth = 0;
        this.createTableTitle();
        this.createTableFoot();
        this.tableContentTr();
        if (this.isShowBlankTr) {
            this.createBlankTr();
        }
        var str = "<div class='tableDiv' id='" + this.tableName + "TableDiv' name='" + this.tableName + "TableDiv' "
            + "style=' height:" + "px;' " + "><table class='tableData'  id='" + this.tableName
            + "Table' cellpadding='0' cellspacing='0' style='wid1th:" + this.tableWidth + "px;'>";
        str += this.titleTr;
        str += this.content;
        str += "</table></div>";
        if (this.footer && this.isFooter) {
            str += "<div class='footerDiv' id='footerDiv' name='footerDiv'>" + this.footer + "</div>";
        }
        if (isToHTML) {
            return str;
        }
        this.tableDiv.innerHTML = str;
        if ((this.selectType == 'radio' || this.selectType == 'generic') && this.selectRowIndexes.length == 0) {
            if (this.datas.length > 0)
                this.clickRow(0);
        } else {
            if (this.selectType == 'radio' || this.selectType == 'generic') {
                var curRowIndex = this.selectRowIndexes[0];
                this.selectRowIndexes.length = [];
                this.clickRow(curRowIndex);
            }
        }
        // 用来做ie7-ie8中的处理滚动条的部分
        if (JBF.getBrowseIsIe()) {
            if (JBF.getBrowseVersion() < 8) {
                var tableWidth = JBF.getObjWidth(JBF.el(this.tableId));
                var div = JBF.el(this.tableName + "TableDiv");
                var divWidth = JBF.getObjWidth(div);
                var divHeight = JBF.getObjHeight(div);
                if (tableWidth > divWidth) {
                    div.style.height = (divHeight + 16) + "px";
                }
            }
        }
    },
    /**
     * 使rowIndex指定的行可见.rowIndex从0开始
     */
    makeRowVisible: function (rowIndex, noHead, headRowNum) {// rowIndex可以是id也可以是序号
        if (!this.datas) {
            return;
        }
        if (this.datas.length < 5) {
            return;
        }
        if (JBF.isString(rowIndex)) {
            for (var i = 0; i < this.datas.length; i++) {
                var data = this.datas[i];
                if (data["id"] == rowIndex) {
                    rowIndex = i;
                    break;
                }
            }
        }
        if (rowIndex > this.datas.length - 1 || this.datas.length < 0) {
            return;
        }
        if (!headRowNum) {
            headRowNum = 1;
        }
        var div = JBF.el(this.tableName + "TableDiv");
        var curDivscrollTop = div.scrollTop;
        var divHeight = div.offsetHeight;
        var trHeight = JBF.el(this.tableId).rows[2].offsetHeight;
        var thHeight = 0;
        for (var i = 0; i < headRowNum; i++) {
            thHeight += JBF.el(this.tableId).rows[i].offsetHeight;
        }
        if (noHead) {
            thHeight = 0;
        }
        var rowIndexofTop = parseInt((curDivscrollTop - thHeight) / trHeight);
        var rowIndexofBottom = parseInt(((curDivscrollTop - thHeight) + divHeight) / trHeight);
        if (rowIndex < rowIndexofTop) {// 使rowIndex到窗口顶部
            var newScrollTop = rowIndex * trHeight + thHeight;
            if (newScrollTop != curDivscrollTop) {
                div.scrollTop = rowIndex * trHeight + thHeight;
            }
        } else if (rowIndex >= rowIndexofBottom) {// 使rowIndex到窗口底部
            var newScrollTop = rowIndex * trHeight + thHeight * 3 - divHeight;// 不乘3出去了,乘2如果底部有滚动条,将遮住.所以乘3
            if (newScrollTop != curDivscrollTop) {
                div.scrollTop = newScrollTop;
            }
        }
    },
    /**
     * 删除选择的记录（全部交给框架来完成，直接通过url来删除）
     */
    delPojo: function (url) {
        var ids = this.getSelectedValues('id');
        if (ids.length <= 0) {
            alert(JBF.language.selectOneRow);
            return;
        }
        if (confirm(JBF.language.confirmDelete)) {
            var table = this;
            var data = "id=" + ids.toString();

            try {
                if (addURL) {
                    data += addURL;
                }
            } catch (e) {
            }
            JBF.ajax(url, data, function () {
                table.removeSelectedTR();
            });
        }
    },
    /**
     * 开放接口，用于直接移除选中的行
     */
    removeSelectedTR: function () {
        var isLastRow = (this.selectType == "radio" || this.selectType == 'generic')
            && this.selectRowIndexes[0] == (this.datas.length - 1);
        var ids = this.getSelectedValues('id');
        if (ids && ids.length > 0) {
            var datas = this.datas;
            var newDatas = [];
            for (var i = 0; i < datas.length; i++) {
                var data = datas[i];
                var bit = true;
                for (var j = 0; j < ids.length; j++) {// 过滤选择的数据。
                    if (data.id == ids[j]) {
                        bit = false;
                        j = ids.length;
                    }
                }
                if (bit) {// 没有选择的数据进行重新整合，
                    newDatas.push(datas[i]);
                }
            }
            this.datas = newDatas;// 对整合后的数据进行重绘按钮
            var curSelectRow = this.selectRowIndexes[0];
            this.selectRowIndexes.length = 0;
            if ((this.selectType == "radio" || this.selectType == 'generic') && isLastRow) {
                if (this.datas.length > 0)
                    this.selectRowIndexes.push(curSelectRow - 1);
            } else if (this.selectType == "radio" || this.selectType == 'generic') {
                this.selectRowIndexes.push(curSelectRow);
            }
            this.refreshDatas();
        }

        // alert("表中数据已经为空不能进行移除操作，请刷新后再点击删");
    },
    /**
     * 增加一条新的记录//
     */
    addPojo: function (params) {
        if (!this.datas) {
            var rows = new Array();
            this.datas = rows;
        }
        this.groupColumnShadow(params);
        this.datas.unshift(params);
        this.selectRowIndexes.length = 0;
        this.selectRowIndexes.push(0);
        this.refreshDatas();
    },
    /**
     * 修改数据当中的一条记录(然后进行全部刷新表格，使其重新展示);
     */
    modifyPojo: function (params) {
        var id = this.getSelectedValues('id');
        for (var i = 0; i < this.datas.length; i++) {
            if (id == this.datas[i].id) {
                this.datas[i] = this.groupColumnShadow(params);
                break;
            }
        }
        this.refreshDatas();
    },
    modifyPojoForIndex: function (params, index) {
        this.datas[index] = this.groupColumnShadow(params);
        this.refreshDatas();
    },
    /**
     * 修改表格数据刷新一行数据，主要体现是的居部刷新
     */
    flushTableTr: function (trObj, rowIndex) {
        var table = JBF.el(this.tableId);
        var trRow = table.rows[rowIndex + 1];
        var tds = trRow.cells;
        if (tds) {
            for (var i = 0; i < tds.length; i++) {
                var td = tds[i];
                var tdType = td.attributes["tdType"];
                var isEdit = td.attributes["isEdit"];
                if (isEdit && isEdit.value) {
                    td.setAttribute("isEdit", "");
                }
                if (tdType && tdType.value && tdType.value == "text") {
                    var tdNode = td.attributes["cName"];
                    if (tdNode && tdNode.options) {
                        var column = this.getColumnByName(tdNode.options);
                        if (column) {
                            value = this.createTdInnerHTML(column, trObj[tdNode.options], trObj);
                            td.innerHTML = value;
                        }
                    }
                }
            }
            this.datas[rowIndex] = trObj;
        }
        this.selectRow(rowIndex);
    },
    /**
     * 通过字段名来获取到字段名称
     */
    getColumnByName: function (columnName) {
        for (var i = 0; i < this.cookieColumns.length; i++) {
            var column = this.cookieColumns[i];
            if (column.name == columnName) {
                return column;
            }
        }
        return null;
    },
    /**
     * 整合表头数据
     */
    createTableTitle: function () {// 整合表头
        var columns = this.cookieColumns;// this.columns;
        var trStr = "<tr class='DataTable_Head' id='tableHeader' width='100%' >";
        var spanStr = "";
        if (this.titleSpan) {// 用于合并表格操作
            spanStr += " rowspan='2' class='tableSpanHr' ";
        }
        if (this.rownumbers) {
            this.tableWidth = 20;
            trStr += "<td nowrap "
                + spanStr
                + " style='width:20px; vertical-align:middle;' ><a href='javascript:void(0)'  onclick='"
                + this.tableName + ".showTableConfig(event)' class='tableConfigIcon' style='display:none;'></a></td>";
        }
        if (this.isShowCheck) {// 是否显示radio/checkbox列
            if (this.selectType) {
                if (this.selectType == "check") {
                    trStr += "<td nowrap "
                        + spanStr
                        + " style='width:30px; vertical-align:middle;' ><ul><li class='tableHR'><span><div class='checkbox' id='checkAll"
                        + this.tableName + "' onclick='" + this.tableName
                        + ".checkedAll(this)'></div></span></li></ul></td>";
                } else if (this.selectType == "radio") {
                    trStr += "<td nowrap "
                        + spanStr
                        + "style='width:30px; vertical-align:middle;' ><ul><li class='tableHR'><span></span></li></ul></td>";
                }
                this.tableWidth += 30;
            }
        }
        if (this.titleSpan) {// 用于表格合并操作
            trStr += this.getSpanTdStr(columns, this.titleSpan);
        } else {
            trStr += this.getBasicTdStr(columns);
        }
        this.titleTr = trStr;
    },

    /**
     * 得到合并单元格的字符串(优化，优化优化，优化优化，优化优化，优化)
     */
    getSpanTdStr: function (columns, titleSpans) {
        var spanTds = new Array();// 存放第一行数据，未补合并的，及合并后的td
        var spans = new Array();// 用于存放合并后的的td在每二行显示
        for (var i = 0; i < this.titleSpan.length; i++) {
            var title = this.titleSpan[i];// 得到合并的组合,把所有组合全部提取
            if (title.span) {
                var tdStr = "<td align='center' valign='middle' colspan='" + title.span.length + "'>" + title.display
                    + "</td>";
                spanTds.push({
                    index: title.span[0],
                    str: tdStr
                });
                for (var j = 0; j < title.span.length; j++) {
                    spans.push(title.span[j]);
                }
            }
        }
        // 过滤不合并的表头，因为不合并的表头，与合并的表头在同一行显示
        for (var i = 0; i < columns.length; i++) {
            if (this.filterTdHeader(spans, i)) {
                spanTds.push({
                    index: i,
                    str: this.tableTitleTd(columns[i], i, true)
                });
            }
        }
        spanTds.sort(this.compare);// 根据表头第一行对表头进行排序。
        var str = "";
        for (var i = 0; i < spanTds.length; i++) {// 整合第一行数据
            str += spanTds[i].str;
        }
        str += "</tr> <tr class='tableHeader'>";
        for (var i = 0; i < spans.length; i++) {
            str += this.tableTitleTd(columns[spans[i]], spans[i]);
        }
        return str += "</tr>";
    },
    /*
	 * 过滤头信息(在合并单元格的前提下重新整合表头)
	 */
    filterTdHeader: function (filters, index) {
        if (filters) {
            for (var i = 0; i < filters.length; i++) {
                if (filters[i] == index) {
                    return false; // 存在合并放在第二行
                }
            }
        }
        return true;// 否则放在每一行
    },
    compare: function (td1, td2) {
        if (td1.index > td2.index) {
            return 1;
        } else if (td1.index < td2.index) {
            return -1;
        } else {
            return 0;
        }
    },
    /**
     * 得基本形式的表格字符串
     */
    getBasicTdStr: function (columns, rowSpan) {
        var trStr = "";
        if (columns && columns.length > 0) {
            for (var i = 0; i < columns.length; i++) {
                trStr += (this.tableTitleTd(columns[i], i));
            }
            var spanStr = "";
            if (rowSpan) {
                spanStr += " rowspan='2' class='tableSpanHr' ";
            }
            // trStr+="<td "+ spanStr+"valign=middle style='width:0px;
            // vertical-align:middle;'></td></tr>";
            trStr += "</tr>";
        }
        return trStr;
    },
    /**
     * 整合表头的每个字段
     */
    tableTitleTd: function (tdObj, rowIndex, rowSpan) {
        if (typeof (tdObj) != "object") {
            return '';
        }
        var orderStr = "<li class='tableHR'><span>" + tdObj.display + "</span></li>";
        if (tdObj.isOrder && (tdObj.isOrder == true || tdObj.isOrder == "true")) {
            var isOrder = this.orderName == tdObj.name;

            var orderSpan = "class='thOrderNoDes'";
            if (isOrder) {
                if (this.orderType == "desc") {
                    orderSpan = "class='thOrderDesc'";
                } else if (this.orderType = "asc") {
                    orderSpan = "class='thOrderAsc'";
                }

            }
            orderStr = "<li onclick='" + this.tableName + ".onclickTitle(\"" + tdObj.name
                + "\",this)'  class='tableHR'><span><a href='javascript:void(0)'>" + tdObj.display
                + "</a></span><span " + orderSpan + ">&nbsp;&nbsp;&nbsp;</span></li>";
        }
        var tdStr = "";
        var widthStr = this.defaultWidth;
        if (tdObj.width) {
            widthStr = tdObj.width;
        }
        this.tableWidth += widthStr;
        widthStr += "px;";
        if (this.rownumbers) {
            ++rowIndex;
        }
        if (this.selectType) {
            ++rowIndex;
        }
        var spanStr = "";
        if (rowSpan) {
            spanStr += " rowspan='2' class='tableSpanHr' ";
        }
        tdStr += "<td columnName=" + tdObj["name"] + " nowrap" + spanStr + " style='width:" + widthStr + ";' ><ul>"
            + orderStr + "<li class='tabelHRMove' title='Drag to change width' onmousedown='" + this.tableName
            + ".mousePresss(" + rowIndex + ",event,this);'></li></ul></td>";
        return tdStr;
    },
    isLockTrByIndex: function (rowIndex) {
        if (this.lockRows && this.lockRows.length > 0) {
            for (var i = 0; i < this.lockRows.length; i++) {
                if (this.lockRows[i] == rowIndex) {
                    return true;
                }
            }
        }
        return false;
    },
    getTrStyleExt: function (data, isLockedTr) {
        return "bac1kground:transparent;";
    },
    /**
     * 整合行数据内容
     */
    tableContentTr: function () {// 整合内容行
        var trStr = "";
        if (this.datas.length > 0) {
            for (var d = 0; d < this.datas.length; d++) {
                var className = "";
                var srcClassName = "";
                if (d % 2 != 0) {
                    className = "class='trEven' ";
                    srcClassName = "srcClass='trEven' ";
                }
                var data = this.datas[d];
                if (this.isLockTrByIndex(d)) {
                    trStr += "<tr " + srcClassName + className + " style='" + this.getTrStyleExt(data, true)
                        + "height:" + this.trHeight + "px;'>";
                } else {
                    trStr += "<tr " + srcClassName + className + " style='" + this.getTrStyleExt(data, false)
                        + "height:" + this.trHeight + "px;'  onmouseover='" + this.tableName
                        + ".overTrClass(this);' onmouseout='" + this.tableName + ".outTrClass(this," + d
                        + ");' onclick='" + this.tableName + ".clickRow(" + d + ");' ondblclick='" + this.tableName
                        + ".dbClickRow(" + d + ")'>";
                }
                if (this.rownumbers) {// 是否显示行号
                    var pageStartIndex = (this.pageIndex - 1) * this.pageSize;
                    trStr += "<td  class='sequenceNum'>" + (d + pageStartIndex + 1) + "</td>";
                }
                if (this.isShowCheck) {
                    if (this.selectType) {// 是否显示选择类型，check/radio
                        if (this.selectType == "check") {
                            trStr += "<td style='text-align:center'><div value='" + d + "' id='check" + d
                                + "' name='checks' class='checkbox'></div></td>";
                        } else if (this.selectType == "radio") {
                            trStr += "<td style='text-align:center'><input value='" + d + "' type='radio' id='radio"
                                + d + "' name='radios'/></td>";
                        }
                    }
                }
                trStr += this.tableContentTds(data, d);
                trStr += "</tr>";
            }
        } else {
            this.defaultSelectedRowIndex = -1;
        }
        this.content = trStr;
    },
    /**
     * 整合内容，对每个字段进行组合
     */
    tableContentTds: function (data, rowIndex) {// 整合内容字段
        var tdStr = "";
        if (this.cookieColumns.length > 0) {// cookieColumns实际上是通过cookie过滤的字段集合，如果没有cookie设置，则保存的原始数
            for (var i = 0; i < this.cookieColumns.length; i++) {// 通过
                var column = this.cookieColumns[i];
                var styleStr = " text-align:" + JBF.setObjValue(column.align, column.align, "left") + "; ";
                var value = "";
                var srcValue = "";
                var className = "";
                var tdExtAttribute = " cName='" + column.name + "'";// 将字段名称记录在当前td中的某个字段中。
                if (column.type && column.type == "button") {
                    value = this.createTdButtonHTML(data, column, rowIndex);
                    tdExtAttribute += " tdType='button'";
                } else {
                    if (column.name) {
                        value = data[column.name];
                        if (!value) {
                            if (column.name.indexOf(".name") != -1) {

                                var idx = column.name.indexOf(".name");
                                if (data[column.name.substr(0, idx)]) {
                                    value = data[column.name.substr(0, idx)].name;
                                }
                            }
                        }
                        value = value + "";
                        if (column.extend) {

                            value = data[column.name][column.extend] + "";
                        }
                        srcValue = value;
                        value = this.createTdInnerHTML(column, value, data);
                    }
                    tdExtAttribute += " tdType='text'";
                }
                if (column.dynamicCss) {
                    styleStr += column.dynamicCss(srcValue);
                }
                if (column.dynamicClassName) {
                    className = " class= " + column.dynamicClassName(srcValue);
                }
                if (!srcValue)
                    srcValue = "";
                tdStr += "<td " + this.createEditEvent(column, rowIndex) + tdExtAttribute + className
                    + " nowrap title='" + srcValue + "' valign='middle'" + this.createTdExtra(column) + "style='"
                    + styleStr + "'>" + value + "</td>";

            }
        }
        return tdStr;
    },

    createBlankTr: function () {
        var trHeight = (Number(this.trHeight)) * (Number(this.pageSize) - Number(this.datas.length));
        this.content += "<tr><td height='" + trHeight + "px' style='border:0px;'></td></tr>";
    },
    createTdButtonHTML: function (data, column, rowIndex) {
        if (column.buttons && column.buttons.length > 0) {
            var buttonStr = "";
            for (var i = 0; i < column.buttons.length; i++) {
                var button = column.buttons[i];
                var name = JBF.setObjValue(button.name, button.name, "未定义名称");
                var onclickStr = "";
                if (button.fun) {
                    var funName = column.name + "_" + rowIndex + "_" + i;
                    this.pushButtonClickFun({
                        name: funName,
                        fun: this.callButtonClick(rowIndex, data["id"], button.fun)
                    });
                    onclickStr = "onclick='" + this.tableName + ".getTdButtonClick(\"" + funName + "\");'";
                }
                buttonStr += "<input type='button' value='" + name + "' " + onclickStr + ">&nbsp;";
            }
            return buttonStr;
        }
        return "";
    },
    pushButtonClickFun: function (clickObj) {
        var bit = false;
        for (var i = 0; i < this.tdButtonEvents.length; i++) {
            var bEvent = this.tdButtonEvents[i];
            if (bEvent.name == clickObj.name) {
                bit = true;
                break;
            }
        }
        if (!bit) {
            this.tdButtonEvents.push(clickObj);
        }
    },
    callButtonClick: function (rowIndex, id, fun) {
        return function () {
            if (fun) {
                fun(rowIndex, id);
            }
        };
    },
    getTdButtonClick: function (funName) {
        if (this.tdButtonEvents) {
            for (var i = 0; i < this.tdButtonEvents.length; i++) {
                bEvent = this.tdButtonEvents[i];
                if (funName == bEvent.name) {
                    bEvent.fun();
                }
            }
        }
    },
    createTdInnerHTML: function (column, value, dataObj) {
        if (column && column.dynamicValue) {
            value = column.dynamicValue(dataObj);
        }
        if (value != undefined && value != "undefined" && value.length > 0 && value != "null") {
            if (column.type) {// 根据不同的类型进行赋值。
                if (column.type == "option") {
                    value = this.fullOption(value, column.options);
                } else {
                    value = JBF.getFormatValue(value, column.type);
                }
            }
            if (column.maxLength && value.length > column.maxLength) {
                value = value.substr(0, column.maxLength) + "...";
            }
            return value;
        }
        return "&nbsp;";
    },
    /**
     * //用于给td增加扩展属性
     *
     * @param tdColumn
     * @returns {String}
     */
    createTdExtra: function (tdColumn) {
        var extra = "";
        if (tdColumn.extra) {
            for (var j = 0; j < tdColumn.extra.length; j++) {
                extra += " " + tdColumn.extra[j][0] + "=" + tdColumn.extra[j][1] + " ";
            }
        }
        return extra;
    },
    /**
     * 用于为可编缉字段增加可编辑控件
     *
     * @param tdColumn
     * @param rowIndex
     * @returns {String}
     */
    createEditEvent: function (tdColumn, rowIndex) {
        if (tdColumn && tdColumn.isEdit) {
            var onDbClickStr = " ondblclick='" + this.tableName + ".createEditInput(event,this,\"" + tdColumn.name
                + "\"," + rowIndex + ")' ";
            return onDbClickStr;
        }
        return "";
    },
    createEditInput: function (ev, tdObj, columnName, rowIndex) {
        ev.cancelBubble = true;
        if (!(tdObj.attributes["isEdit"] && tdObj.attributes["isEdit"].nodeValue == "true")) {
            var height = (tdObj.clientHeight - 8) + "px";
            var width = "98%";
            var tdColumn = this.getColumnByName(columnName);
            if (tdColumn) {
                var editName = tdColumn.name + "EditInput_" + rowIndex;
                var type = "text";
                if (tdColumn.type) {
                    type = tdColumn.type;
                }
                if (type == "text") {
                    tdObj.innerHTML = "<input type='text' id='" + editName
                        + "' onkeydown='JBF.getKeyValue(event)==13?event.keyCode=9:event.keyCode'" + " name='"
                        + editName + "' onclick='event.cancelBubble=true;' style='width:" + width + "; height:"
                        + height + ";border:1px solid #ff0000;'" + " value='" + tdObj.innerText + "'>";
                } else if (type == "option") {
                    var selStr = "";
                    selStr += "<select id='" + editName + "' name='" + editName
                        + "' onclick='event.cancelBubble=true;'";
                    selStr += " style='width:" + width + "; height:" + height + ";border:1px solid #ff0000;' >";
                    selStr += function () {
                        var sptionStr = "";
                        if (tdColumn.options) {
                            for (var i = 0; i < tdColumn.options.length; i++) {
                                var option = tdColumn.options[i];
                                sptionStr += "<option value='" + option.value + "'>" + option.showText + "</option>";
                            }
                            return sptionStr;
                        }
                        return "";
                    }();
                    +"</select>";
                    tdObj.innerHTML = selStr;
                }
            }
            tdObj.setAttribute("isEdit", "true");
        }
    },
    /**
     * 为新建可编缉下拉框做准备
     *
     * @param ev
     * @param tdObj
     * @param rowIndex
     * @param editName
     */
    createEditOption: function (ev, tdObj, rowIndex, editName) {

    },
    /**
     * 赋值select类型
     */
    fullOption: function (value, Options) {
        if (Options) {
            for (var i = 0; i < Options.length; i++) {
                if (Options[i].value == value) {
                    return Options[i].showText;
                }
            }
        }
        return "<font color=#ff0000>错误值 (" + value + ")</font>";
    },
    pageSizeChange: function () {
        this.pageIndex = 1;
    },
    /**
     * 整合表尾内容
     */
    createTableFoot: function () {
        this.pageCount = parseInt(this.totalRows / this.pageSize);
        if (this.totalRows % this.pageSize > 0) {
            this.pageCount += 1;
        }
        if (this.tableStructure.shortFooter == true) {
            this.createShortFooter();
        } else {
            this.createBasicFooter();
        }
        if (document.getElementById('rownumLabel')) {
            document.getElementById('rownumLabel').innerHTML = this.totalRows;
        }
    },
    createShortFooter: function () {
        if (this.tableStructure && this.tableStructure.noFooter) {
            return;
        }
        var pageBtn = "<ul>";

        if (this.pageIndex && this.pageIndex > 1) {
            pageBtn += "<li><div class='splitDiv'></div></li>"
                // +"<li><div class='footerBtnDiv' onmouseover='" + this.tableName +
                // ".btn_over(this);' onclick='" + this.tableName
                // + ".pre_first();' onmouseout='" + this.tableName
                // + ".btn_out(this)'><span class='footerBtn footerIcon_first'
                // title='首页'></span></div></li>"
                + "<li><div class='footerBtnDiv' onmouseover='" + this.tableName + ".btn_over(this)' onclick='"
                + this.tableName + ".pre_page();' onmouseout='" + this.tableName
                + ".btn_out(this)'><span class='footerBtn footerIcon_prev' title='" + JBF.language.prevPage + "'></span></div></li>";
        }
        pageBtn += "<li><div class='splitDiv'></div></li><li><font color='red'>" + this.pageIndex + "</font> / "
            + this.pageCount + "</li>";
        if (this.pageIndex < this.pageCount) {
            pageBtn += "<li><div class='splitDiv'></div></li><li><div class='footerBtnDiv' onmouseover='"
                + this.tableName + ".btn_over(this)' onclick='" + this.tableName + ".next_page();' onmouseout='"
                + this.tableName
                + ".btn_out(this)'><span class='footerBtn footerIcon_next' title='" + JBF.language.nextPage + "'></span></div></li>"
            // +"<li><div class='footerBtnDiv' onmouseover='" + this.tableName
            // + ".btn_over(this)' onclick='" + this.tableName + ".next_end();'
            // onmouseout='" + this.tableName
            // + ".btn_out(this)'><span class='footerBtn footerIcon_last'
            // title='尾页'></span></div> </li>"
            ;
        }
        if (this.tableStructure && this.tableStructure.onlyPrevNext) {

        } else {
            pageBtn += "<li><div class='splitDiv'></div></li><li><input id='"
                + this.tableName
                + "FlushInput'  value='' onkeyup='JBF.replaceNum(this);'  class='fonterJumpInput'></li><li><div class='footerBtnDiv' onmouseover='"
                + this.tableName
                + ".btn_over(this)' onclick='"
                + this.tableName
                + ".flush_page();' onmouseout='"
                + this.tableName
                + ".btn_out(this)'><span class='footerBtn footerIcon_brush' title='" + JBF.language.refresh + "'></span></div> </li><li><div class='splitDiv'></div></li>";
            var showPageSize = ((this.pageIndex - 1) * this.pageSize + 1) + "-"
                + ((this.pageIndex - 1) * this.pageSize + this.getRowsCount());

        }

        pageBtn += "</ul>	";
        this.footer = pageBtn;
    },
    createBasicFooter: function () {
        if (this.tableStructure && this.tableStructure.noFooter) {
            return;
        }
        var pageBtn = "<ul>";
        if (this.tableStructure.pages) {
            if (typeof (this.tableStructure.pages) == "string") {
                this.tableStructure.pages = JBF.strToObj(this.tableStructure.pages);
            }
            var optionStr = "";
            for (var i = 0; i < this.tableStructure.pages.length; i++) {
                var value = this.tableStructure.pages[i];
                var selectedStr = "";
                if (value == this.pageSize) {
                    selectedStr = "selected='selected'";
                }
                optionStr += "<option " + selectedStr + " value='" + value + "'>" + value + "</option>";
            }
            pageBtn += "<li><select onchange='" + this.tableName + ".pageSizeChange()' id='" + this.tableName
                + "pageSize' name='" + this.tableName + "pageSize'>" + optionStr + "</select></li>";
        }

        if (this.pageIndex && this.pageIndex > 1) {
            pageBtn += "<li><div class='splitDiv'></div></li><li><div class='footerBtnDiv' onmouseover='"
                + this.tableName
                + ".btn_over(this);' onclick='"
                + this.tableName
                + ".pre_first();' onmouseout='"
                + this.tableName
                + ".btn_out(this)'><span class='footerBtn footerIcon_first' title='" + JBF.language.firstPage + "'></span></div></li><li><div class='footerBtnDiv' onmouseover='"
                + this.tableName + ".btn_over(this)' onclick='" + this.tableName + ".pre_page();' onmouseout='"
                + this.tableName
                + ".btn_out(this)'><span class='footerBtn footerIcon_prev' title='" + JBF.language.prevPage + "'></span></div></li>";
        }
        pageBtn += "<li><div class='splitDiv'></div></li>" + this.createPageBlocks();
        pageBtn += "<li><div class='splitDiv'></div></li><li><font color='red'>" + this.pageIndex + "</font> / "
            + this.pageCount + "</li>";
        if (this.pageIndex < this.pageCount) {
            pageBtn += "<li><div class='splitDiv'></div></li><li><div class='footerBtnDiv' onmouseover='"
                + this.tableName
                + ".btn_over(this)' onclick='"
                + this.tableName
                + ".next_page();' onmouseout='"
                + this.tableName
                + ".btn_out(this)'><span class='footerBtn footerIcon_next' title='" + JBF.language.nextPage + "'></span></div></li><li><div class='footerBtnDiv' onmouseover='"
                + this.tableName + ".btn_over(this)' onclick='" + this.tableName + ".next_end();' onmouseout='"
                + this.tableName
                + ".btn_out(this)'><span class='footerBtn footerIcon_last' title='" + JBF.language.endPage + "'></span></div> </li>";
        }
        if (this.tableStructure && this.tableStructure.onlyPrevNext) {

        } else {
            pageBtn += "<li><div class='splitDiv'></div></li><li><input id='"
                + this.tableName
                + "FlushInput'  value='' onkeyup='JBF.replaceNum(this);'  class='fonterJumpInput'></li><li><div class='footerBtnDiv' onmouseover='"
                + this.tableName
                + ".btn_over(this)' onclick='"
                + this.tableName
                + ".flush_page();' onmouseout='"
                + this.tableName
                + ".btn_out(this)'><span class='footerBtn footerIcon_brush' title='" + JBF.language.refresh + "'></span></div> </li><li><div class='splitDiv'></div></li>";
            var showPageSize = ((this.pageIndex - 1) * this.pageSize + 1) + "-"
                + ((this.pageIndex - 1) * this.pageSize + this.getRowsCount());
            var buttons = JBF.getCopyButtonsHTML(this.buttonDatas);
            var buttonStr = "<li style='float:right'>" + JBF.language.current + "<font color='red'>" + showPageSize
                + "</font>," + JBF.language.totalRows + "<font color='red'> " + this.totalRows + "</font>," + JBF.language.pageSize + "<font color='red'>" + this.pageSize
                + "</font></li>&&&";

            if (buttons && buttons.length > 0) {
                pageBtn += buttonStr.replace("right", "left").replace("&&&",
                    "<li style='float:right'>" + buttons + "</li>");
            } else {
                pageBtn += buttonStr.replace("&&&", "");
            }
        }

        pageBtn += "</ul>	";
        this.footer = pageBtn;
    },
    createPageBlocks: function () {
        if (this.tableStructure && this.tableStructure.onlyPrevNext) {
            return "";
        }
        var blockStr = "";
        if (this.pageIndex) {
            var length = 6;
            var minValue = 1;
            var maxValue = this.pageCount;
            var avg = (length % 2 == 0) ? (length / 2) : (length / 2 + 1);
            if (this.pageIndex > avg) {
                if ((this.pageIndex + avg) < this.pageCount) {
                    maxValue = this.pageIndex + avg;
                } else {
                    maxValue = this.pageCount;
                }
            } else if (this.pageCount < length) {
                maxValue = this.pageCount;
            } else {
                maxValue = length;
            }

            if (maxValue > length) {
                minValue = maxValue - length + 1;
            } else {
                minValue = 1;
            }
            for (var i = minValue; i <= maxValue; i++) {
                className = 'footerDivSelect';
                if (i == this.pageIndex) {
                    className = 'footerDivSelected';
                }
                blockStr += "<li><a onclick='" + this.tableName + ".flush_page(" + i
                    + ")' href='javascript:void(0);' class='" + className + "'>&nbsp;" + i + "&nbsp;</a></li>";
            }
        }
        return blockStr;
    },
    updateRowByIndex: function (index, data) {
        if (this.datas.length > 0) {
            if (index < this.datas.length) {
                this.datas[index] = data;
                this.refreshDatas();
            } else {
                alert("index not exists");
            }
        } else {
            alert("no data to modify");
        }
    },
    updateRowById: function (id, data) {
        for (var i = 0; i < this.datas.length; i++) {
            var data = this.datas[i];
            if (data["id"] && data["id"] == id) {
                this.updateRowByIndex(i, data);
                break;
            }
        }
    },
    insertRow: function (index, data) {
        if (index < this.datas.length) {
            this.datas.splice(index, 0, data);
        } else {
            this.datas.push(data);
        }
        this.refreshDatas();
    },
    deleteRowByIndex: function (index) {
        if (this.datas.length > 0) {
            if (index < this.datas.length) {
                this.datas.splice(index, 1);
            } else {
                alert("the index not exists");
            }
        } else {
            alert("no data to delete");
        }
        this.refreshDatas();
    },
    deleteRowById: function (id) {
        if (this.datas.length > 0) {
            for (var i = 0; i < this.datas.length; i++) {
                var data = this.datas[i];
                if (data["id"] == id) {
                    this.deleteRowByIndex(i);
                    break;
                }
            }
        }
    },
    selectRow: function (rowIndex) {
        // alert("rowIndex:"+rowIndex+" this.datas.length:"+this.datas.length);
        if (rowIndex >= this.datas.length || rowIndex < 0) {
            alert("错误的序号");
            return;
        }
        this.changeRowClassName("trOnClick", rowIndex);
        if (this.isShowCheck) {
            if (this.selectType == "radio") {
                JBF.el("radio" + rowIndex).checked = "checked";
            } else if (this.selectType == "check") {
                JBF.el("check" + rowIndex).className = "checkbox_checked";
            }
        }
        if (!this.isRowSelected(rowIndex)) {
            this.selectRowIndexes.push(rowIndex);
        }
    },
    clearDatas: function () {
        this.datas = [];
        this.refreshDatas();
    },
    changeRowClassName: function (className, rowIndex) {
        var table = JBF.el(this.tableId);
        var selectRowIndex = (rowIndex + (table.rows.length - this.datas.length));
        if (this.isShowBlankTr) {
            selectRowIndex = (rowIndex + (table.rows.length - this.datas.length - 1));
        }
        var tr = table.rows[selectRowIndex];
        if (tr) {
            if (className.length > 0) {
                tr.className = className;
                // tr.style.backgroundColor = this.trSelectedColor;
            } else {
                if (this.selectType == "check") {
                    JBF.el("check" + rowIndex).className = "checkbox";
                }
                if (tr.attributes["srcClass"]) {
                    tr.className = tr.attributes["srcClass"].value;
                } else {
                    tr.className = "";
                }
                if (tr.orgBack) {
                    // tr.style.backgroundColor = tr.orgBack == " " ? "" :
                    // tr.orgBack;
                } else {
                    // tr.style.backgroundColor = '';
                }
            }
        }
    },
    selectRowById: function (id) {
        if (index < this.datas.length) {
            for (var i = 0; i < this.datas.length; i++) {
                var data = this.datas[i];
                if (data["id"] == id) {
                    selectRow(i);
                    break;
                }
            }
        }
    },
    toJson: function () {
        var jsons = [];
        for (var i = 0; i < this.datas.length; i++) {
            var cols = [];
            var data = this.datas[i];
            for (var j = 0; j < this.columns.length; j++) {
                var name = this.columns[j].name;
                cols.push(name + ":'" + data[this.columns[j].name] + "'");
            }
            jsons.push("{" + cols.toString() + "}");
        }
        return "[" + jsons.toString() + "]";
    },
    /***************************************************************************
     * 表格配置块内容
     **************************************************************************/
    showTableConfig: function (ev) {
        if (JBF.language.prevPage == "previous page") return;
        ev.cancelBubble = true;
        if (this.tableConfigDiv) {
            this.tableConfigDiv.style.display = "inline";
            this.tableConfigDiv.innerHTML = "";
        } else {
            this.tableConfigDiv = document.createElement("div");
            this.tableConfigDiv.className = "tableConfigMainDiv";
            this.tableConfigDiv.style.left = JBF.pointerX(ev) + "px";
            this.tableConfigDiv.style.top = JBF.pointerY(ev) + "px";
            JBF.addEvent(this.tableConfigDiv, 'click', function () {
                window.event.cancelBubble = true;
            });
            document.body.appendChild(this.tableConfigDiv);
        }
        var checkStr = "<div class='tableConfigTitle'><a href='javascript:void(0)'   onclick='" + this.tableName
            + ".tableConfigSelectAll(1)' >全选</a>" + "<a href='javascript:void(0)'   onclick='" + this.tableName
            + ".tableConfigSelectAll(2)'>还原</a>" + "<a href='javascript:void(0)' onclick='" + this.tableName
            + ".tableConfigSelectAll(3)'>返选</a>" + "<a href='javascript:void(0)' onclick='" + this.tableName
            + ".saveTableConfig();'>保存配置</a>" + "<a href='javascript:void(0)' onclick='" + this.tableName
            + ".clearTableConfig();'>清空配置</a>" + "<a href='javascript:void(0)' style='float:right;' onclick='"
            + this.tableName + ".closeTableConfig()();'>关闭</a></div>";
        if (this.columns) {
            checkStr += "<div style='float:left;'><table>";
            var colorsStr = "";
            for (var i = 0; i < this.columnsColors.length; i++) {
                colorsStr += "<option style='background-color:" + this.columnsColors[i] + ";' value='"
                    + this.columnsColors[i] + "'>&nbsp;&nbsp;&nbsp;</option>";
            }
            for (var i = 0; i < this.columns.length; i++) {
                var column = this.columns[i];
                var index = i;
                var checked = "";
                for (var j = 0; j < this.cookieColumns.length; j++) {
                    if (column["name"] == this.cookieColumns[j]["name"]) {
                        checked = " checked=checked;";
                        if (this.cookieColumns[j]["index"])
                            index = this.cookieColumns[j]["index"];
                        break;
                    }
                }
                checkStr += "<tr><td><input type='checkbox' "
                    + checked
                    + " name='"
                    + this.tableName
                    + "TableConfigDiv' value='"
                    + column['name']
                    + "'></td><td>"
                    + column['display']
                    + "</td>"
                    + "<td>宽：<input type='text' onkeyup=JBF.replaceNum(this) style='width:30px;'  name='"
                    + this.tableName
                    + "TableConfigWidth' value='"
                    + column['width']
                    + "'>px</td>"
                    + "<td>颜色：<select>"
                    + colorsStr
                    + "</select></td><td>顺序：<input type='text' onkeyup=JBF.replaceNum(this) style='width:30px;'  name='"
                    + this.tableName + "TableConfigIndex' value='" + index + "'></td>";
            }

        }
        if (checkStr.length > 0) {
            checkStr += "</table></div><div><table><tr>"
                + "<td>表头颜色:</td><td><input class='tableConfigTitleColor' id='"
                + this.tableName
                + "TableTitleColor' onclick='JBF.showColorPanel();'></td> "
                // +"<td>字体颜色:</td><td><input class='tableConfigTitleColor'
                // id='"+this.tableName+"FontTitleColor'
                // onclick='JBF.showColorPanel();'></td> </tr>"
                + "<tr><td>奇数行颜色:</td><td><input class='tableConfigTitleColor' id='"
                + this.tableName
                + "OddTrColor'  onclick='JBF.showColorPanel();'></td>"
                + "<td>偶数行颜色:</td><td><input class='tableConfigTitleColor' id='"
                + this.tableName
                + "EvenTrColor"
                + "' onclick='JBF.showColorPanel();'></td></tr>"
                + "<tr><td>经过颜色:</td><td><input class='tableConfigTitleColor' style='background-color:"
                + this.trOverColor
                + "' id='"
                + this.tableName
                + "MouseOverColor' value='"
                + this.trOverColor
                + "' onclick='JBF.showColorPanel();'></td>"
                + "<td>选中颜色:</td><td><input class='tableConfigTitleColor' style='background-color:"
                + this.trSelectedColor
                + "' id='"
                + this.tableName
                + "MouseSelectedColor' value='"
                + this.trSelectedColor + "' onclick='JBF.showColorPanel();'></td></tr></table></div>";
        }
        this.tableConfigDiv.innerHTML = checkStr;
        JBF.addEvent(document.body, "click", this.closeTableConfig());
    },
    tableConfigSelectAll: function (checkType) {
        var configCheck = JBF.elByName(this.tableName + "TableConfigDiv");
        for (var i = 0; i < configCheck.length; i++) {
            var check = configCheck[i];
            if (checkType == '1') {
                if (!check.checked) {
                    check.checked = 'true';
                }
            } else if (checkType == "2") {
                if (check.checked) {
                    check.checked = '';
                }
            } else if (checkType == '3') {
                if (check.checked) {
                    check.checked = '';
                } else {
                    check.checked = 'true';
                }
            }
        }
    },
    saveTableConfig: function () {
        var checkStr = "columns:[";
        var overColor = JBF.el(this.tableName + "MouseOverColor").value;// 鼠标经过颜色
        var selectedColor = JBF.el(this.tableName + "MouseSelectedColor").value;// 行选中颜色
        var oddTrColor = JBF.el(this.tableName + "OddTrColor").value;// 奇数行颜色
        var evenTrColor = JBF.el(this.tableName + "EvenTrColor").value;// 偶数行颜色
        var tableTitleColor = JBF.el(this.tableName + "TableTitleColor").value; // 表头颜色
        var tableFontColor = JBF.el(this.tableName + "TableTitleColor").value;// 文字颜色
        var colorStr = "colors:{overColor:'" + overColor + "',selectedColor:'" + selectedColor + "',oddTrColor:'"
            + oddTrColor + "',evenTrColor:'" + evenTrColor + "',tableTitleColor:'" + tableTitleColor
            + "',tableFontColor:'" + tableFontColor + "'}";
        var configCheck = JBF.elByName(this.tableName + "TableConfigDiv");
        var widths = JBF.elByName(this.tableName + "TableConfigWidth");
        var indexs = JBF.elByName(this.tableName + "TableConfigIndex");
        for (var i = 0; i < configCheck.length; i++) {
            var check = configCheck[i];
            if (check.checked) {
                checkStr += "{name:'" + check.value + "',width:'" + widths[i].value + "',index:'" + indexs[i].value
                    + "'},";
            }
        }
        if (checkStr.length > 0) {
            checkStr = checkStr.substring(0, checkStr.length - 1) + "]";
        }
        var saveStr = "{" + checkStr + "," + colorStr + "}";
        // 保存表格配置信息到本地cookie
        JBF.saveCookie("columns", 1000, saveStr);
        this.closeTableConfig()();
    },
    clearTableConfig: function () {
        JBF.saveCookie("columns", -10, "");
    },
    /**
     * 关闭表格配置信息
     *
     * @returns
     */
    closeTableConfig: function () {
        var op = this;
        this.closeMethod = function () {
            op.tableConfigDiv.style.display = 'none';
            JBF.removeEvent(document.body, 'click', op.closeMethod);
            JBF.closeColorPanel();
        };
        return this.closeMethod;
    },
    /***************************************************************************
     * 封装死的增加
     **************************************************************************/
    add: function (width, height) {
        var url = G_WebRoot + "genhtml/" + this.opCode + '/' + this.opCode + 'Add.html';
        try {
            if (addURL) {
                url += addURL;
            }
        } catch (e) {
        }
        var returnValue = this.openByUrl(url, width, height);
        // window.open(url);
        if (returnValue) {
            this.addPojo(returnValue);
        }
        // window.open(url);
    },
    openByUrl: function (url, width, height) {
        var defaultStyle = "";
        if ((this.addWndWidth && this.addWndHeight) || (width && height)) {
            defaultStyle = "dialogWidth=" + (this.addWndWidth || width) + "px;dialogHeight="
                + (this.addWndHeight || height) + "px";
        } else {
            defaultStyle = this.openWinStyle;
        }
        return window.showModalDialog(url, window, defaultStyle);
    },
    modify: function (width, height) {
        if (this.selectRowIndexes.length == 0 || this.selectRowIndexes.length > 1) {
            alert(JBF.language.selectOneRow);
            return;
        }
        var url = G_WebRoot + "genhtml/" + this.opCode + '/' + this.opCode + 'Modify.html?id='
            + this.getSelectedValues();
        try {
            if (addURL) {
                url += addURL;
            }
        } catch (e) {
        }
        var returnValue = this.openByUrl(url, width, height);
        if (returnValue) {
            this.modifyPojo(returnValue);
        }
    },
    view: function (width, height) {
        if (this.selectRowIndexes && this.selectRowIndexes.length > 0) {
            var id = this.getSelectedValues("id");
            var code = this.getSelectedValues("code");
            var name = this.getSelectedValues("name");
            if (id) {
                var url = (G_WebRoot + "genhtml/" + this.opCode + '/' + this.opCode + '.html?id=' + id + "&code="
                    + code + "&name=" + name);
                try {
                    if (addURL) {
                        url += addURL;
                    }
                } catch (e) {
                }
                this.openByUrl(url, width, height);
            } else {
                alert(JBF.language.selectOneRow);
            }
        } else {
            alert(JBF.language.selectOneRow);
        }
    },
    getPageIndex: function () {
        return this.pageIndex;
    },
    getPageSize: function () {
        return this.pageSize;
    },
    getSelectIndex: function () {
        return this.selectRowIndexes;
    },
    getSelectedDatas: function () {

        if (0 == this.selectRowIndexes || this.selectRowIndexes) {
            if (this.selectRowIndexes.length) {
                var datas = [];
                for (var i = 0; i < this.selectRowIndexes.length; i++) {
                    datas.push(this.datas[this.selectRowIndexes[i]]);
                }
                return datas;

            } else {
                return this.datas[this.selectRowIndexes];
            }
        }
    },
    getSelectedData: function () {
        if (0 == this.selectRowIndexes || this.selectRowIndexes) {
            if (this.selectRowIndexes.length) {
                return this.datas[this.selectRowIndexes[0]];
            } else {
                return this.datas[this.selectRowIndexes];
            }
        }
    },
    del: function () {
        var delUrl = this.url.replace('query', 'delete');
        this.delPojo(delUrl);
    },
    query: function (callFun) {
        this.pageIndex = 1;
        this.searchByForm(false, callFun);
    },
    toExcel: function () {
        searchBit = true;
        var params = this.getParams();
        if (this.checkedForm && params.length <= 0) {
            searchBit = false;
        }
        if (searchBit) {
            var linkChar = "?";
            if (this.url.indexOf("?") > -1) {
                linkChar = "&";
            }
            var url = this.url.replace('query', 'queryForExcel') + linkChar + params;
            window.location.href = url;
        }
    },
    toTreeMode: function (isViewOnly) {
        if (isViewOnly) {
            window.location.href = G_WebRoot + "genhtml/" + this.opCode + '/' + this.opCode
                + "ManageTree.html?isViewOnly=true";
        } else {
            window.location.href = G_WebRoot + "genhtml/" + this.opCode + '/' + this.opCode + "ManageTree.html";
        }
    },
    toListMode: function () {
        window.location.href = G_WebRoot + "genhtml/" + this.opCode + '/' + this.opCode + "Manage.html";
    }
};
﻿function Form(obj, objName, fullDatas, addWndWidth, addWndHeight) {
    this.addWndWidth = addWndWidth;
    this.addWndHeight = addWndHeight;
    this.BASIC = "basic";
    this.ELEMENTS = "elements";
    this.GROUP = "group";
    this.IMAGE_INPUT = "imageInput";
    this.GROUP_TYPE_COLUMN = "column";
    this.GROUP_TYPE_INDEX = "index";
    this.TDIDHEAD = "FM-TR-TD-";
    this.obj = obj;// 对象数据
    this.objName = objName;// new的像名称
    this.columns = 1;// 所有要素显示的列数，默认是两列
    this.showNameWidth = 100;// 当前显示的名称的宽度
    this.valueWidth = 0;
    this.title = '';// 工具栏上的名称
    this.titleBar = "";// 生成的工具栏字符串
    this.searchStr = "";// 生成的查询框内的字符串
    this.buttonStr = "";// 生成的按钮字符串
    this.opWidth = "150";// 操作元素的宽度，默认为150;
    this.tableWidth = "250";// 当前操作区域的宽度，默认为250,实际上是由（显示名称+控件名称）*显示列数得来的宽度
    this.panelHeight = JBF.getScreenHeight() - 46;// 整个面板的高度，是由当前屏幕的高度-当前工具栏的高度-一些空隙的值
    this.subPanelTop = 0;// 当前输入面板的y坐标，针对一般输入框
    this.rows = 1;// 通过要素的个数，及所显示的列数，计算出的行数
    this.innerWidth = 10;// 输入面板的子面板与父面板的间隙
    this.rowHeight = 30;// 每行显示的高度
    this.type = "search";// 如果是基本格式，或要素格式都可以进行提交
    this.url = "";// 提交时使用的url
    this.id = null;// 如果是修改操作，将用来保存id值

    this.fillPojo = null;// 填充数据的pojo
    this.hiddenElements = [];// 用来存放隐藏域元素
    this.totleElements = []; // forms.datas
    this.elements = [];// 用来存放普通元素
    this.elementNames = []; // 用于装载form各个控件的顺序
    this.isTip = false;
    this.pageObjs = [];
    this.formType = "";
    // 初始化数据
    if (this.obj) {
        if (this.obj.buttons && this.obj.buttons.datas) {
            this.buttonsDatas = this.obj.buttons.datas;
        } else {
            if (typeof (this.obj.defaultFormButtons) != "undefined") {
                if (this.obj.defaultFormButtons) {
                    this.buttonsDatas = defaultFormButtons.datas;
                }
            } else {
                this.buttonsDatas = defaultFormButtons.datas;
            }
        }
        if (this.obj.title) {
            this.title = this.obj.title;
            this.titleBar = this.createToolbar();
        }
        if (window.location.href.indexOf("anage.html") != -1) {
            this.condTitle = this.createCondTitle();
        }


        if (this.obj.forms && this.obj.forms.datas) {// 用来判断是否有数据传入，如果没有数据传入，则直接生成表头工具栏
            if (this.obj.forms.columns) {
                this.columns = this.obj.forms.columns;
            }
            if (this.obj.forms.showNameWidth) {
                this.showNameWidth = this.obj.forms.showNameWidth;
            }
            if (this.obj.forms.opWidth) {
                this.opWidth = this.obj.forms.opWidth;
            }
            if (this.obj.forms.innerWidth) {
                this.innerWidth = this.obj.forms.innerWidth;
            }
            if (this.opWidth && this.showNameWidth && this.columns) {
                this.tableWidth = (parseInt(this.opWidth) + parseInt(this.showNameWidth)) * parseInt(this.columns)
                    + (this.innerWidth * 2) + parseInt(this.columns) * 30;
            }
            if (this.obj.forms.rowHeight) {
                this.rowHeight = this.obj.forms.rowHeight;
            }
            if (this.obj.forms.url) {
                this.url = this.obj.forms.url;
            }
            if (this.obj.forms.imageUrl) {
                this.imageUrl = this.obj.forms.imageUrl;
            }
            if (this.obj && this.columns) {
                this.rows = this.getRowsCount(this.obj.forms.datas);// 得到生成的记录数(在分组时此段数据可以不记算)并且用来分开隐藏与否的控件
                this.totleElements = this.obj.forms.datas;
            }
            if (this.panelHeight && this.rows) {
                this.subPanelTop = (this.panelHeight - this.rows * (this.rowHeight + 2) - (this.innerWidth * 2)) / 3;
                if (this.subPanelTop < 0) {
                    this.subPanelTop = 0;
                }
            }
            if (this.obj.forms.isTip) {
                this.isTip = this.obj.forms.isTip;
            }
        }
    }
}

Form.prototype = {
    constructor: Form,
    /**
     * 滚动条是否跟随焦点滚动
     */
    isScrollHeight: false,
    containerId: null,
    /*
	 * 新建工具栏面板
	 */
    createToolbar: function () {
        this.buttonStr = JBF.getButtonsHTML(this.buttonsDatas);
        var str = "<div class='toolbar'>";
        str += "<div class='toolbar_left'></div>";
        str += "<div class='toolbar_text'><label class='toolbar_title' id='" + this.objName + "toolbar_title'>"
            + this.title + "</label></div>";
        str += "<div class='toolbar_middle'></div>";
        str += "<div class='toolbar_buttons' id='" + this.objName + "buttons'>" + this.buttonStr + "</div>";
        str += "</div>";
        return str;
    },
    createCondTitle: function () {
        this.titleBar += "<div class='condDiv'><img src='JBFCommon/css/cond_ico.gif'><a href='javascript:void(0);' onclick=''>搜索条件(显示/隐藏)</a></div>"
    },
    /**
     * 改变工具栏的title
     */
    changeToolBarTitle: function (text) {
        JBF.el(this.objName + "toolbar_title").innerHTML = text;
    },
    /**
     * 动态改变工具栏的按钮
     */
    changeToolBarButtons: function (buttonDatas) {
        JBF.el(this.objName + "buttons").innerHTML = JBF.getButtonsHTML(buttonDatas);
    },
    /**
     * 增加相应的操作按钮
     */
    addButtons: function (buttonObj) {
        if (buttonObj) {
            for (var i = 0; i < buttonObj.length; i++) {
                var button = buttonObj[i];
                var buttonName = this.objName + "buttons";
                button.appendObj = JBF.el(buttonName);
                JBF.newButton(button).append();
            }
        }
    },
    /**
     * 增加查询面板，将所有查询要素整合到查询面板当中
     */
    createSearch: function (objs, rowCount) {
        if (objs && objs.length > 0) {
            this.formType = "search";
            var str = "  <div onkeydown='" + this.objName + ".checkKey(event);' class='search' style='overflow:auto'>";
            if (this.tableWidth.toString().indexOf('%') > 0) {
                str += "<div class='search_panel' style='width:" + this.tableWidth + "'>";
            } else {
                str += "<div class='search_panel' style='width:" + this.tableWidth + "px'>";
            }
            str += "<table width='100%' id='table_" + this.obj.id + "'>";
            str += this.createTrs(objs, rowCount);
            str += "</div></div>";
            if (window.location.href.indexOf("anage.html") != -1) {
                str += "<div class='listTitle'><img src='JBFCommon/css/list_ico.gif'>信息列表<label id='rownumLabel'>-1</label></div>";
            }
            return str;
        }
        return "";
    },
    /**
     * 增加隐藏域区块
     */
    createHiddenInput: function () {
        var hiddenInput = "";
        if (this.hiddenElements && this.hiddenElements.length > 0) {
            for (var i = 0; i < this.hiddenElements.length; i++) {
                var hiddenField = new HiddenField(this, (this.objName + ".pageObjs[" + this.pageObjs.length + "]"),
                    this.hiddenElements[i])
                this.pageObjs.push(hiddenField);
                hiddenInput += hiddenField.toHtml();
            }
        }
        return hiddenInput;
    },
    /**
     * 新建带有影像控件的页面（可以删除）
     */
    createImagePanel: function () {
        ;
        var width = JBF.getScreenWidth();
        var margin = 26;
        if (document.all) {
            if (width <= 1024) {
                margin = 20;
            }
        } else {
            margin = 30;
        }
        width = width - this.tableWidth - margin;
        var str = "  <div class='search' style='height:"
            + this.panelHeight
            + "px;' ><div class='imageIframe' style='width:"
            + width
            + "px'>  <iframe id='imageOcx' name='imageOcx' src='"
            + this.imageUrl
            + "' width='100%' height='100%' z-index:-1;></iframe> </div><div class='form_panel image_form_panel' style='width:"
            + (this.tableWidth - margin) + "px;float:right; margin:2px 2px 0px 0px'><div class='form_div'><table>";
        str += this.createTrs(this.elements, this.rows);
        str += "</div></div></div>";
        return str;
    },

    /*
	 * 新建输入操作面板
	 */
    createInputPanel: function () {
        var str = "<div class='search' onkeydown='" + this.objName + ".checkKey(event);' style='height:"
            + this.panelHeight + "px; overflow:auto;'>";
        var padding = "";
        if (document.all) {
            padding = "padding-top:20px;";
        }
        str += "<div class='form_panel' style='" + padding + "width:" + (this.tableWidth) + "px; margin-top:"
            + this.subPanelTop + "px;'>";
        // str+="<div class='formHeader'></div>";
        str += "<table style='margin:0px " + this.innerWidth + "px " + this.innerWidth + "px " + this.innerWidth
            + "px; '>";
        str += this.createTrs(this.elements, this.rows);
        str += "</div></div>";
        return str;
    },
    /*
	 * 整合分组面板
	 */
    createGroupPanel: function () {
        var groups = [];
        var datas = this.totleElements;
        var srcGroups = this.obj.forms.groups;// 分组信息，一共有几组
        if (datas && srcGroups && srcGroups.length > 0) {// 跟据不同的分组信息，进行重新分组
            for (var i = 0; i < srcGroups.length; i++) {
                var subGroupNums = srcGroups[i];// 获取一个分组
                var subGroupDatas = [];
                var subRowCount = 0;
                var isShrink = true;// 是否进行伸缩下拉操作，默认进行伸缩处理
                if (subGroupNums.isShrink && subGroupNums.isShrink == "false") {// 如果设置isShrink并且=="false"则不进行伸缩
                    isShrink = false;
                }
                var spans = subGroupNums.spans;
                var groupType = this.GROUP_TYPE_INDEX;
                if (subGroupNums.type && subGroupNums.type == this.GROUP_TYPE_COLUMN) {// 用来判断分类时按什么类型，字段或索引
                    groupType = this.GROUP_TYPE_COLUMN;
                }
                for (var j = 0; j < spans.length; j++) {
                    var index = spans[j];
                    try {
                        if (groupType == this.GROUP_TYPE_COLUMN) {
                            subGroupDatas.push(this.getPojoByName(spans[j]));
                        } else {
                            subGroupDatas.push(datas[index]);
                        }
                    } catch (e) {
                        alert(e + "-字段名/索引定义错误");
                    }
                }
                subRowCount = this.getRowsCount(subGroupDatas);
                groups.push({
                    title: subGroupNums.groupName,
                    datas: subGroupDatas,
                    rows: subRowCount,
                    isShrink: isShrink,
                    titlePanel: subGroupNums.titlePanel,
                    className: subGroupNums.className
                });
            }
        }
        var divStr = "";
        // 对分完组后的信息进行面板整合
        for (var i = 0; i < groups.length; i++) {
            var clickStr = "";
            var className;
            if (groups[i].className == undefined) {
                className = "titleShowName";
            } else {
                className = groups[i].className;
            }
            if (groups[i].isShrink) {
                clickStr = " onclick='" + this.objName + ".shrinkDiv(this);'";
                className = "titleShowNameClose";
            }
            divStr += "<div>";
            if (groups[i].titlePanel == undefined) {
                divStr += "<div class='titlePanel' " + clickStr + "><div class='" + className + "'>" + groups[i].title
                    + "</div></div>";
            } else {
                divStr += "<div class='" + groups[i].titlePanel + "' " + clickStr + "><div class='" + className + "'>"
                    + groups[i].title + "</div></div>";
            }
            divStr += this.createSearch(groups[i].datas, groups[i].rows);
            divStr += "</div>";
        }
        return divStr;
    },
    /**
     * 点击组合面板头时的伸缩div
     */
    shrinkDiv: function (opDiv) {
        var imageDiv = opDiv.childNodes[0];
        var nextDiv = JBF.getNextElement(opDiv);
        var srcHeight = nextDiv.attributes["srcHeight"];
        if (srcHeight && srcHeight.value && srcHeight.value.length > 0) {
            nextDiv.style.height = srcHeight.value + "px";
            nextDiv.setAttribute("srcHeight", "");
            imageDiv.className = "titleShowNameOpen";
        } else {
            var ch = nextDiv.clientHeight;
            if (document.all) {
                ch = nextDiv.offsetHeight - 2;
            }
            nextDiv.setAttribute("srcHeight", ch);
            nextDiv.style.height = "0px";
            imageDiv.className = "titleShowNameClose";
        }
    },
    /**
     * 整合表格中的每行数据（因为可能存在几列数据显示，所以需要记算所生成的行数）;
     */
    createTrs: function (obj, rowCount) {

        var str = "";
        if (obj && this.columns) {
            var dataIndex = 0;
            for (var i = 0; i < rowCount; i++) {// this.rows是当前行的记录数。这是计算出来的。
                str += "<tr style='height:" + this.rowHeight + "px'>";
                for (var cIndex = 0; cIndex < this.columns; cIndex++) {// 列的个数
                    if (dataIndex < obj.length) {
                        var colspan = '';
                        var pojo = obj[dataIndex];
                        var isAbsolute = pojo.formLeft || pojo.formTop;
                        var showName = JBF.setObjValue(pojo.showName, pojo.showName);
                        var type = JBF.setObjValue(pojo.type, pojo.type, "text");
                        if (isAbsolute) {
                            str += "<td>";
                            str += "<div style='"
                                + (pojo.formTotalWidth ? ("width:" + pojo.formTotalWidth + "px;") : "")
                                + (pojo.formFontSize ? ("font-size:" + pojo.formFontSize + "px;") : "")
                                + "position:absolute;left:" + pojo.formLeft + "px;top:" + pojo.formTop + "px;'>";
                            str += "<table style='width:100%;'>";
                            str += "<tr>";

                        }

                        if (pojo.colspan) {
                            var spanValue = parseInt(pojo.colspan);
                            colspan = "colspan='" + (spanValue * 3) + "'";// 乘以2的目的是为合并显示名称的td（因为一组元素是有显示名称的td和输入框
                            // 的td）
                            cIndex += (spanValue - 1);// 强行将列数加上（合并的个数）
                        }
                        if (pojo.formLabelWidth) {
                            this.showNameWidth = pojo.formLabelWidth;
                        }
                        var must = ((pojo && pojo.notNull) ? "<label style='width:15px;display:inline;color:#FF0000; font-size:16px;margin-top:0px;'>★</label>"
                            : "");
                        if (pojo.showNameClass == undefined) {
                            str += "<td align='right' class='showText' width='" + this.showNameWidth + "px'>" + must
                                + showName + "：</td>";
                        } else {
                            str += "<td align='right' class='" + pojo.showNameClass + "' width='" + this.showNameWidth
                                + "px'>" + must + showName + "：</td>";
                        }

                        if (pojo.formInputWidth) {
                            this.valueWidth = pojo.formInputWidth;
                        }
                        if (pojo.showValueClass == undefined) {
                            str += "<td id='" + this.TDIDHEAD + pojo.name + "' align='left' class='showValue' width='"
                                + this.valueWidth + "px' " + colspan + ">";
                        } else {
                            str += "<td id='" + this.TDIDHEAD + pojo.name + "' align='left' class='"
                                + pojo.showValueClass + "' width='" + this.valueWidth + "px' " + colspan + ">";
                        }
                        str += this.createObjHTML(type, pojo);
                        str += "</td>";
                        /*
						 * if (pojo && pojo.notNull) { str += "<td width='25px'><label
						 * style='width:15px;display:inline;color:#FF0000;float:left;
						 * font-size:16px;margin-top:0px;'>★</label></td>"; }
						 * else { str += "<td width='25px'>&nbsp;</td>"; }
						 */
                        if (pojo && pojo.exceptionTypes) {
                            str += "<td width='50px' class='exceptionTD'>";
                            for (var jj = 0; jj < pojo.exceptionTypes.length; jj++) {
                                var exceptionType = pojo.exceptionTypes[jj];
                                str += "&nbsp;<label class='labelExceptionType' id='" + pojo.name + "_exceptionType_"
                                    + exceptionType.value + "' style='display:none;'>" + exceptionType.showText
                                    + "</label>";
                            }
                            str += "</td>";
                        } else {
                            str += "<td width='25px'>&nbsp;</td>";
                        }
                        str += "<td width='200px' class='exceptionTD'><label class='exception' id='" + pojo.name
                            + "_exceptionTD'></label></td>";
                        if (isAbsolute) {
                            str += "</tr></table></div></td>";

                        }
                        dataIndex++;
                    }
                }
                str += "</tr>";
            }
        }
        var copyButtonStr = JBF.getCopyButtonsHTML(this.buttonsDatas);
        if (copyButtonStr && copyButtonStr.length > 0) {
            str += "<tr><td colspan='" + (this.columns * 3) + "' align='right'>" + copyButtonStr + "</td></tr>";
        }
        if (this.fillPojo && JBF.getBrowseVersion() < 8) {
            str += "<tr style='height:30px'><td>&nbsp;</td> </tr>";
        }
        str += "</table>";
        str += this.createHiddenInput();
        return str;
    },

    createObj: function (type, pojo, index) {
        if (index < 0) {
            index = this.pageObjs.length;
        }
        var opObjStr = type.substring(0, 1).toUpperCase() + type.substring(1, type.length) + "Field";
        var OpObj = JBF.strToObj(opObjStr);
        var width = pojo.colspan ? (pojo.colspan * (this.opWidth + this.showNameWidth + 25) - this.showNameWidth)
            : this.opWidth;
        var newObj = new OpObj(this, (this.objName + ".pageObjs[" + index + "]"), width, pojo);
        return newObj;
    },
    createObjHTML: function (type, pojo) {
        // ;
        var newObj = this.createObj(type, pojo, -1);
        this.pageObjs.push(newObj);
        // newObj.init();

        var returnHTML = "";
        if (null != this.fillPojo) {
            returnHTML = newObj.toLabel(this.fillPojo);
        } else {
            returnHTML = newObj.toHtml();
        }
        for (var index = 0; index < newObj.fieldObjectNames.length; index++) {
            this.elementNames.push({
                "tabIndex": index,
                "objName": newObj.fieldObjectNames[index],
                "type": newObj.type,
                "field": newObj
            });
        }
        return returnHTML;
        // }catch(e){};

    },

    createFillCheckStr: function (name) {
        var innerText = "";
        var inValue = this.fillPojo[name];
        if (inValue) {
            var checks = inValue.split(",");
            if (cty.value) {
                for (var i = 0; i < cty.value.length; i++) {
                    var option = cty.value[i];
                    for (var j = checks.length - 1; j > -1; j--) {
                        if (option.value == checks[j]) {
                            innerText += option.showText + ",";
                            j = -1;
                        }
                    }
                }
            }
        } else {
            inValue = "&nbsp;";
        }
        if (innerText.length > 0) {
            innerText = innerText.substring(0, innerText.length - 1);
        }
        return innerText;
    },
    /**
     * 如果存在loadUrl时，以loadUrl取的值覆盖原有的value值
     *
     * @param cty
     * @returns
     */
    loadOptionValues: function (cty) {
        var returnValue = cty.options;
        if (cty.fillMethod) {
            cty.value = cty.fillMethod();
        }
        if (cty.loadUrl && cty.loadUrl.length > 0) {
            JBF.ajax(cty.loadUrl, "", function (msg) {
                returnValue = msg.pageList;
            });
        }
        return returnValue;
    },

    /*
	 * 得到所有录入要素的的值，以json格式返回
	 */
    getValues: function () {
        var valueStr = "";
        for (var i = 0; i < this.pageObjs.length; i++) {
            var obj = this.pageObjs[i];
            valueStr += obj.getValueStr();
            if (!obj.data.range) {

                var et = "";
                for (var j = 1; j < 10; j++) {
                    var exceptionType = obj.data.name + "_exceptionType_" + (j);
                    exceptionType = document.getElementById(exceptionType);
                    if (exceptionType) {
                        if (exceptionType.style.display != "none") {
                            exceptionType.style.display = "inline";
                            if (et == "") {
                                et += "@abc";
                            }
                            et += j;
                        }
                    }
                }
                if (et && et.length > 0) {
                    valueStr += et;
                }
            }
        }
        return valueStr;
    },
    /**
     * 根据元素名称获取元素对象
     */
    getFieldByName: function (eName) {
        for (var i = 0; i < this.pageObjs.length; i++) {
            var obj = this.pageObjs[i];
            if (obj.name == eName) {
                return obj;
            }
        }
        return null;
    },
    /*
	 * 校验所有控件(如果返回的为对象，则校验通过，如果返回null则校验不能通过)
	 */
    checkPojos: function () {
        var valueStr = "";
        var checkCount = 0;
        for (var i = 0; i < this.pageObjs.length; i++) {
            var obj = this.pageObjs[i];
            // alert("obj instanceof LabelField:"+);
            if (LabelField.prototype.isPrototypeOf(obj)) {
                checkCount += 1;
                continue;
            }
            if (obj.checkValidate()) {
                checkCount += 1;
                valueStr += obj.getValueStr();
            } else {
                obj.focus();
            }
        }
        // alert(checkCount+"----"+this.pageObjs.length);
        if (checkCount >= this.pageObjs.length) {
            return valueStr;
        }
        return "";
    },

    saveForm: function (fun) {
        // var idStr="id="+this.id;
        this.save(fun);
    },
    save: function (fun) {
        if (this.type) {
            var params = this.checkPojos();
            if (!(params && params.length > 0)) {// 此段代码用于兼容修改时的form表单
                alert("Data format error!");
                return;
            }
            if (this.id && null != this.id) {
                var bit = true;
                for (var i = 0; i < this.totleElements.length; i++) {
                    if (this.totleElements[i].name == "id") {
                        bit = false;
                        i = this.totleElements.length;
                    }
                }
                if (bit) {
                    params += ("&id=" + this.id);
                }
            }
            // alert(params);
            this.ajaxPojoSave(params, fun);

        }
    },
    /**
     * 此方法暂时可以放弃，因为通过表单序列化已手工完成
     *
     * @param fun
     * @param idStr
     */
    ajaxFormSave: function (fun, idStr) {

        var subStr = $("#" + this.objName + "form").serialize();
        if (idStr) {
            subStr += ("&" + idStr);
        }
        JBF.ajax(this.url, subStr, fun);
    },
    ajaxPojoSave: function (params, fun) {
        JBF.ajax(this.url, params, fun);
    },
    /*
	 * 以填充值的开形式进行填充,只是展示，不能进行修改等操作。
	 */
    fillinValues: function (type, fillinPojo) {
        if (typeof (fillinPojo) == "string") {
            this.fillPojo = JBF.strToObj(fillinPojo);
        } else {
            this.fillPojo = fillinPojo;
        }
        return this.show(type);
    },
    /*
	 * 生成相应的查询字符串，并且将字符串反回 存在的问题，要素及搜索面板的组(如果不加type则直接)
	 */
    show: function (type) {
        // 有顺序，先new出button然后再new别的div 因为别的地方用的到
        // this.buttonStr=this.createButtons(this.obj.buttons.datas);
        // basic imageInput elements group display
        if (this.valueWidth < this.opWidth) {
            this.valueWidth = this.opWidth;
        }
        if (!type) {
            this.searchStr = this.createSearch(this.elements, this.rows);
        } else {
            this.type = type;
            if (type == this.BASIC) {
                this.searchStr = this.createInputPanel();
            } else if (type == this.IMAGE_INPUT) {
                this.searchStr = this.createImagePanel();
            } else if (type == this.ELEMENTS) {// 不需要头信息
                this.searchStr = this.createSearch(this.elements, this.rows);
            } else if (type == this.GROUP) {// 不需要头信息
                this.searchStr = this.createGroupPanel();
            }
        }
        return this.titleBar + this.searchStr;
    },
    /**
     * 重置所有字段的属性
     *
     * @param filterColumns
     */
    reset: function (filterColumns) {
        for (var i = 0; i < this.pageObjs.length; i++) {
            var pageObj = this.pageObjs[i];
            pageObj.reset();
        }
    },
    /**
     * 用来计算元素行的记录数
     */
    getRowsCount: function (datas) {// 用于分离隐藏域，同时算出行的记录数
        var rowsCount = 0;
        var cells = 0;
        for (var i = 0; i < datas.length; i++) {
            var element = datas[i];
            var check = function () {
                if (typeof (element.hidden) == "string") {
                    if (element.hidden == "true") {
                        return true;
                    }
                } else {
                    return element.hidden;
                }
            };
            if (check()) {
                this.hiddenElements.push(element);
            } else {
                this.elements.push(element);
                if (element.colspan) {
                    cells += (parseInt(element.colspan));
                } else {
                    cells++;
                }
            }
        }
        rowsCount = parseInt(cells / parseInt(this.columns));
        if (cells % this.columns > 0) {
            rowsCount += 1;
        }
        return rowsCount;
    },

    /**
     * 当点击回车后，定位到下一个控件
     */
    getNextCty: function (elementName) {
        for (var i = 0; i < this.elementNames.length; i++) {
            var element = this.elementNames[i];
            if ((element.field && (element.field.name == elementName || element.field.name + "-other" == elementName || element.field.name
                + "-other_span" == elementName))
                || element["objName"] == elementName || element["objName"] == elementName + "_span") {
                if (i + 1 <= this.elementNames.length) {
                    return this.elementNames[i + 1];
                }
            }
            this.elementNames[0];
        }
        return null;
    },
    /**
     * 当按下Ctrl+Enter后，定位到前一个控件
     */
    getPreviousCty: function (elementName) {
        for (var i = 0; i < this.elementNames.length; i++) {
            var element = this.elementNames[i];
            if (element["objName"] == elementName) {
                if (i - 1 >= 0) {
                    return this.elementNames[i - 1];
                }
            }
            this.elementNames[0];
        }
        return null;
    },
    /**
     * 检测键盘的当前事件
     */
    checkKey: function (event, obj) {
    },
    /**
     * 最后一个表单元素的回车事件
     */
    lastFieldEnterEvent: function (event) {
        if (event) {
            event.keyCode = 9;
        }
    },
    skipNextObj: function (event, tabName) {
        if (tabName.indexOf("_code1111") != -1) {
            tabName = tabName.replace("_code1111", "");
        } else {
            var ee_code1111 = JBF.el(tabName + "_code1111");
            if (ee_code1111) {
                ee_code1111.focus();
                return;
            }
        }
        var nextObj = this.getNextCty(tabName);
        if (nextObj) {
            try {
                nextObj.field.focus(nextObj.objName);
            } catch (e) {
                this.skipNextObj(event, nextObj["objName"]);
            }
        } else {
            this.lastFieldEnterEvent(event);
        }
    },
    skipPreviousObj: function (event, tabName) {
        var previousObj = this.getPreviousCty(tabName);
        if (previousObj) {
            previousObj.field.focus(previousObj.objName);
            return true;
        } else {
            return false;
        }
    },
    modify: function (modifyUrl, fun) {
        if (typeof (modifyUrl) == "string") {
            JBF.ajax(modifyUrl, "", fun);
            // this.ajaxModifyFun(modifyUrl,fun);
        }
    },
    /*
	 * linkageId 级联的需要重新设置的控件的id
	 */
    linkageObjLink: function (linkageObjId, linkageData) {
        for (var i = 0; i < this.pageObjs.length; i++) {
            var subObj = this.pageObjs[i];
            if (subObj.name == linkageObjId) {
                subObj.linkageReDrew(linkageData);
            }
        }
    },
    /**
     * 用来重绘级联对像的内容
     *
     * @param linkageObjId//当前的级联对像
     * @param newObj新对像的json内容
     */
    linkageObjChangeType: function (linkageObjId, newObj) {
        // alert(linkageObjId);
        for (var i = 0; i < this.pageObjs.length; i++) {
            var subObj = this.pageObjs[i];
            if (subObj.name == linkageObjId) {
                var obj = this.createObj(newObj.type, newObj, i);
                var aa = obj.toHtml();
                JBF.el(subObj.name).parentNode.innerHTML = aa;
                this.pageObjs[i] = obj;
                if (JBF.el(subObj.name).onchange) {
                    JBF.el(subObj.name).onchange();
                }

                break;
            }
        }
    },
    /**
     * 填充值(可以以查询或是修改的模式进行展示)
     */
    fullValue: function (pojo) {
        var elements = this.totleElements;
        ;
        if (elements && pojo) {
            for (var i = 0; i < this.pageObjs.length; i++) {
                var obj = this.pageObjs[i];
                try {
                    obj.fillinValue(pojo);
                } catch (e) {
                }
            }
        }
    },
    /**
     * 在value值与loadUrl同时存在时，以loadUrl的值为先
     *
     * @param pojo
     * @param value
     */
    fullLabelValue: function (pojo, value) {
        var values = "";
        if (pojo.loadUrl) {
            values = this.loadOptionValues(pojo);
        } else if (pojo.value) {
            values = pojo.value;
        }
        if (values) {
            for (var i = 0; i < values.lenght; i++) {
                if (value == values[i].value) {
                    value = values[i].showText;
                    i = values.length;
                }
            }
        }
        JBF.el(pojo["name"]).innerHTML = value;
    },
    setAttributes: function (elementName, attributeName, attributeValue) {
        JBF.el(elementName).setAttribute(attributeName, attributeValue);
    },
    /*
	 * 通过id获取元素集合中的相对应的pojo
	 */
    getPojoByName: function (id) {
        if (this.totleElements && id) {
            var datas = this.totleElements;
            for (var i = datas.length; i > 0; i--) {
                if (datas[i - 1].name == id) {
                    return datas[i - 1];
                }
            }
        }
    },
    /**
     * 通过id或name获取元素
     */
    getElementById: function (id) {
        return this.getElementByName(id);
    },
    getElementByName: function (name) {
        return JBF.el(name);
    },
    /**
     * 通过id或name获取所元素的值
     */
    getElementValueById: function (id) {
        return this.getElementValueByName(id);
    },

    getElementValueByName: function (name) {
        for (var i = 0; i < this.pageObjs.length; i++) {
            var pageObj = this.pageObjs[i];
            if (pageObj.name == name) {
                return pageObj.getValue();
            }
        }
    },
    /*
	 * 设置form要素的值，同样开发两个函数
	 */
    setElementValueById: function (id, value) {
        this.setElementValueByName(id, value);
    },
    setElementValueByName: function (name, value) {
        var pojo = this.getPojoByName(name);
        if (pojo.range) {
            JBF.setValue(name + "_ge", pojo.type, value);
            JBF.setValue(name + "_le", pojo.type, value);
        } else {
            JBF.setValue(name, pojo.type, value);
        }
    },
    selectedOptionByIndex: function (name, index) {
        var pojo = JBF.el(name);
        if (pojo.options.length > 0) {
            pojo.options[0].selected = "selected";
        }
    },
    getFirstElement: function () {
        if (this.elements && this.elements.length > 0) {
            var pojo = this.elements[0];
            var elName = pojo["name"];
            if (pojo.range) {
                elName = elName + "_ge";
            } else if (pojo.type == "radio" || pojo.type == "check") {
                elName = elName + "_";
            }
            return JBF.el(elName);
        }
    }
};
﻿function MoveParm(srcX, srcY, status, movePojo) {
    this.srcX = srcX;
    this.srcY = srcY;
    this.status = status;
    this.movePojo = movePojo;
}

function OpenUrl(title, url, width, height, objName, type, callFunction) {
    this.title = title;
    this.url = url;
    this.width = width;
    this.height = height;
    this.innerWidth = parseInt(width) - 12;
    this.innerHeight = parseInt(height) - 26 - 6;
    this.type = type;
    this.moveParm = null;
    this.left = 200;
    this.top = 200;
    this.objName = objName;
    this.closeCallFunction = callFunction;
    this.getWinLeft();
    this.getWinTop();

    this.objDiv = null;
    this.iframe = null;// 用来覆盖activex控件的
    this.maskDiv = null;// 模板的div
    this.moveDiv = null;// 要生成的div
    this.iframeName = this.objName + "win_dialog_iframe";
}

OpenUrl.prototype = {
    mouseDown: function (ev, cty) {
        if (null == this.moveDiv) {
            this.moveDiv = document.createElement("DIV");
            this.moveDiv.style.width = this.width + "px";
            this.moveDiv.style.height = this.height + "px";
            this.moveDiv.style.position = "absolute";
            document.body.appendChild(this.moveDiv);
            this.moveDiv.className = "moveDiv";
            JBF.addEvent(this.maskDiv, "mousemove", this.moveDivMth(this));
            JBF.addEvent(this.maskDiv, "mouseup", this.mouseUp(this));
        }
        this.moveDiv.style.left = this.objDiv.style.left;
        this.moveDiv.style.top = this.objDiv.style.top;
        var x = JBF.getX(ev);
        var y = JBF.getY(ev);
        var left = this.objDiv.style.left.replace("px", "");
        var top = this.objDiv.style.top.replace("px", "");
        this.moveParm = new MoveParm(x - parseInt(left), y - parseInt(top),
            true, null);
        this.maskDiv.style.zIndex = "100000";
    },
    moveDivMth: function (op) {
        return function () {
            if (op.moveParm, op.moveParm.status) {
                var ev = JBF.getEvent();
                if (null != op.moveDiv) {
                    op.moveDiv.style.left = (JBF.getX(ev) - op.moveParm.srcX) + "px";
                    op.moveDiv.style.top = (JBF.getY(ev) - op.moveParm.srcY)
                        + "px";
                }
            }
        };
    },
    mouseUp: function (op) {
        return function () {
            op.objDiv.style.left = op.moveDiv.style.left;
            op.objDiv.style.top = op.moveDiv.style.top;
            op.iframe.style.left = op.moveDiv.style.left;
            op.iframe.style.top = op.moveDiv.style.top;
            op.moveDiv.style.display = "none";
            op.moveParm.status = false;
            op.maskDiv.style.zIndex = "990";
        };
    },
    getWinLeft: function () {
        this.left = (JBF.getScreenWidth() - parseInt(this.width)) / 2;
        if (this.left < 0) {
            this.left = 0;
        }
    },
    getWinTop: function () {
        this.top = (JBF.getScreenHeight() - parseInt(this.height)) / 2 - 30;
        if (this.top < 0) {
            this.top = 0;
        }
    },
    close: function () {
        if (this.objDiv) {
            this.objDiv.innerHTML = "";
            this.objDiv.style.display = "none";
        }
        if (this.iframe) {
            this.iframe.style.display = "none";
        }
        if (this.maskDiv) {
            this.maskDiv.style.display = "none";
        }
        if (this.moveDiv) {
            this.moveDiv.style.display = "none";
        }
        newDialog = null;
        if (this.closeCallFunction) {
            this.closeCallFunction();
        }
    },
    closeOver: function (cty) {
        if (cty.className) {
            cty.className == "title_close" ? cty.className = "title_close_over" : cty.className = "title_close";
        }
    },
    show: function () {
        if (null == this.objDiv) {
            this.objDiv = document.createElement("DIV");
            this.objDiv.style.position = "absolute";
            document.body.appendChild(this.objDiv);
        }
        if (null == this.iframe) {
            this.iframe = document.createElement("iframe");
            this.iframe.className = "alphaIframe";
            this.iframe.style.position = "absolute";
            document.body.appendChild(this.iframe);
        }
        if (null == this.maskDiv) {
            this.maskDiv = document.createElement("DIV");
            this.maskDiv.className = "maskDiv";
            this.maskDiv.style.width = JBF.getScreenWidth() + "px";
            this.maskDiv.style.height = JBF.getScreenHeight() + "px";
            document.body.appendChild(this.maskDiv);
        }
        var srcStr = "!|content!|";
        var endStr = "操作错误";
        this.objDiv.style.width = this.width;
        this.objDiv.style.height = this.height;
        this.objDiv.style.left = this.left + "px";
        this.objDiv.style.top = this.top + "px";
        this.objDiv.style.display = "inline";
        this.objDiv.style.zIndex = 1001;
        this.iframe.style.width = this.width;
        this.iframe.style.height = this.height;
        this.iframe.style.left = this.left + "px";
        this.iframe.style.top = this.top + "px";
        this.iframe.style.display = "inline";
        this.iframe.style.zIndex = 1000;

        this.maskDiv.style.display = "inline";
        var str = "<div class='title' style='width:"
            + this.width
            + "px;cursor: move;'   onmousedown='"
            + this.objName
            + ".mouseDown(event,this);'> <div class='title_left'></div> <div class='title_center' style='width:"
            + this.innerWidth
            + "px;'><div class='title_ico'></div><div class='title_text'>"
            + this.title
            + "</div><div class='title_close' onmousedown='if(window.event){window.event.cancelBubble=true;}' onmouseout='"
            + this.objName
            + ".closeOver(this);' onmouseover='"
            + this.objName
            + ".closeOver(this);' onclick='"
            + this.objName
            + ".close();'></div></div> <div class='title_right'></div> </div> <div style='width:"
            + this.width
            + "px;height:"
            + this.innerHeight
            + "px;'><div class='content_left'></div> <div class='content' style='width:"
            + this.innerWidth
            + "px;'> "
            + srcStr
            + " </div><div class='content_right'></div> </div> <div style='width:"
            + this.width
            + "px; height:6px;'> <div class='footer_left'></div> <div class='footer_center' style='width:"
            + this.innerWidth
            + "px;'></div> <div class='footer_right'></div> </div>";
        if (this.type == "url") {
            endStr = "<iframe id='" + this.iframeName + "' name='" + this.iframeName + "' src='" + this.url
                + "'  width='100%' height='100%' z-index:-1;></iframe>";
        } else if (this.type == "content") {
            endStr = "<div class=' logo  logo_"
                + this.type
                + "'></div><div class='show_text'>"
                + this.url
                + "</div><div style='clear:both; width:100% ;border-top:#ded 1px solid; margin:50px 0px;'><div style='float:right;margin:5px 6px;'>"
                + JBF.newButton({
                    text: "确定",
                    icon: "ok",
                    isButton: "true",
                    method: this.objName + '.close()'
                }).value() + "</div></div>";
        } else {
            endStr = this.url;

        }
        str = str.replace(srcStr, endStr);
        this.objDiv.innerHTML = str;
        if (this.type == "url") {
            JBF.el(this.iframeName).src = JBF.el(this.iframeName).src;
        }
    }
};
Dialog = (function () {
    return {
        open: function (obj) {
            var title = obj.title ? obj.title : "对话框";
            var url = obj.url ? obj.url : "";
            var width = obj.width ? obj.width : "300";
            var height = obj.height ? obj.height : "150";
            if (null == newDialog) {
                newDialog = new OpenUrl(title, url, width, height, 'newDialog',
                    "url");
                newDialog.show();
            }
        },
        success: function (text) {
            newDialog = new OpenUrl("提示", text, "300", "150", 'newDialog',
                "success");
            newDialog.show();
        },
        error: function (text) {
            newDialog = new OpenUrl("错误", text, "300", "150", 'newDialog',
                "error");
            newDialog.show();
        },
        warn: function (text) {
            newDialog = new OpenUrl("警告", text, "300", "150", 'newDialog',
                "warn");
            newDialog.show();
        }
    };
})();

/**
 *
 *
 */
function BizWin(winType, url, bizType, docId, winWidth, winHeight, scanSeqNo, bizTypeName) {
    /**窗口类型：*/
    this.winType = winType;

    /**窗口内容页面URL */
    this.url = url;

    /**业务类型 */
    this.bizType = bizType;

    /**流水号 */
    this.docId = docId;


    /** 窗口宽度*/
    this.winWidth = winWidth;

    /** 窗口高度*/
    this.winHeight = winHeight;
    this.scanSeqNo = scanSeqNo;
    this.bizTypeName = bizTypeName;

//	if(winWidth){this.winWidth = winWidth;	}
//	if(winHeight){this.winHeight = winHeight;}

    //this.winInstance;
}

/**
 *
 */
BizWin.prototype.openWin = function () {
    if (this.winWidth == null || typeof (this.winWidth) == "undefined") {
        this.winWidth = 600;
    }
    if (this.winHeight == null || typeof (this.winHeight) == "undefined") {
        this.winHeight = 400;
    }
    winInstance = new OpenUrl(this.winType, this.url + '?bizType=' + this.bizType + '&docId=' + this.docId + "&scanSeqNo=" + this.scanSeqNo + "&bizTypeName=" + this.bizTypeName,
        this.winWidth, this.winHeight, 'winInstance', 'url');

    winInstance.show();
};


BizWin.prototype.closeWin = function () {
    winInstance.close();
};
﻿var checkField = (function () {
    return {
        //{"date":/^([1-2]\d{3})[\/|\-|](0?[1-9]|10|11|12)[\/|\-|]([1-2]?[0-9]|0[1-9]|30|31)$/ig,"tipText":"日期格式错误"},
        regExps: [{"date": /^([1-2]\d{3})(0?[1-9]|10|11|12)([1-2]?[0-9]|0[1-9]|30|31)$/ig, "tipText": "日期格式错误"},
            {"mobile": /^[1][3|5][0-9]{9}$/, "tipText": "手机号格式不正确"},//移动手机
            {"tel": /^[1][3|5][0-9]{9}$/, "tipText": "电话格式不正确"},
            {"idCard": /^[1][3|5][0-9]{9}$/, "tipText": "身份证格式不正确"},//身份证
            {"email": /^[1][3|5][0-9]{9}$/, "tipText": "电子邮件格式不正确"},//电子邮件
            {"number": /[^0-9|.]/g, "tipText": "数值录入不正确"},//数值
            {"null": /^[1][3|5][0-9]{9}$/, "tipText": "字段数据不能为空"}],

        getRegExp: function (typeName) {
            for (var i = 0; i < checkField.regExps.length; i++) {
                var exp = checkField.regExps[i];
                if (exp[typeName]) {
                    return exp[typeName];
                }
            }
        },
        /**
         * 公共的校验名称
         * @returns
         */
        getTipName: function () {
            return "checkFieldTipName";
        },
        /**
         * 对字段进行校验
         * @param checkPojo 是否校验，包括校验的格式......(dataType:类型校验，regExp:正则表达式, checkFun:回调函数,notNull:不能为空)
         * @returns
         */
        check: function (checkPojo) {
            if (checkPojo) {
                var bit = true;//默认通过
                var cty = JBF.el(checkPojo.name);
                var tipDiv = cty;
                if (checkPojo.type == "radio" || checkPojo.type == "check") {
                    tipDiv = JBF.getParentNodeByNodeName("SPAN", JBF.el(checkPojo.name));
                }
                bit = checkField.getCheckStatus(cty, checkPojo);
                if (null != tipDiv) {
                    if (!bit) {								//校验不能通过
                        checkField.addCheckEvent(tipDiv, checkPojo);		  //动态填加事件
                    } else {
                        checkField.removeCheckEvent(tipDiv);	//动态移除事件
                    }
                    return bit;
                }
            }
            return false;
        },
        /**
         * 得到校验结果的状态
         * @param cty
         * @param checkPojo
         * @returns
         */
        getCheckStatus: function (cty, checkPojo) {
            //alert("22222222");
            var bit = true;//验证通过标志，默认为通过
            if (checkPojo.dataType) {//通过类型校验
                if (cty.nodeName == "INPUT" || cty.nodeName == "TEXTAREA") {
                    bit = checkField.checkRegExp(cty, checkPojo.dataType);
                } else {
                    alert("此字段:" + checkPojo.type + ",不能进行此种类型校验。");
                }
            } else if (checkPojo.regExp) {				//正则表达式校验
                bit = cty.value.test(checkPojo.regExp);
            } else if (checkPojo.checkFun) {				//方法校验
                if (typeof (checkPojo.checkFun) == "function") {
                    bit = checkPojo.checkFun(checkPojo.name);
                } else if (typeof (checkPojo.checkFun) == "string") {
                    bit = eval(checkPojo.checkFun.replace("(", "").replace(")", "") + "(" + checkPojo.name + ")");
                }
            } else if (checkPojo.notNull) {				//是否为空操作
                bit = checkField.checkIsNull(cty, checkPojo);
                if (bit && (checkPojo.type == "date" || checkPojo.type == "number" || checkPojo.type == "decimal")) {
                    bit = this.validateData(cty, checkPojo);
                }
            } else if (cty.value != null && cty.value != ""
                && (checkPojo.type == "date" || checkPojo.type == "number" || checkPojo.type == "decimal")) {
                bit = this.validateData(cty, checkPojo);
            }
            return bit;
        },

        /**
         * 除 非空校验后其他类型校验
         * @param cty
         * @param checkPojo
         * @returns
         */
        validateData: function (cty, checkPojo) {
            if (cty.value && cty.value.length > 0) {
                switch (checkPojo.type) {
                    case "date":
                        return cty.value.search(checkField.getRegExp("date")) > -1 ? true : false;
                    case "number":
                        var reg = /^[-+]?\d*$/;
                        return reg.test(cty.value);
                    case "decimal":
                        var reg = /^[-\+]?\d+(\.\d+)?$/;
                        return reg.test(cty.value);
                    default:
                        return false;
                }
            }
        },

        /**
         * 对示通过校验的控件添加事件
         * @param cty
         * @returns
         */
        addCheckEvent: function (cty, checkPojo) {
            cty.style.borderColor = "#FF0000";
            var dynamicMouseOver = checkField.showTipText(checkField.getCheckTipText(cty, checkPojo));
            var dynamicMouseOut = checkField.hideTipText;
            JBF.addEvent(cty, "mouseover", dynamicMouseOver);
            JBF.addEvent(cty, "mouseout", dynamicMouseOut);

            cty.dynamicMouseOver = dynamicMouseOver;
            cty.dynamicMouseOut = dynamicMouseOut;
        },
        getCheckTipText: function (cty, checkPojo) {
            if (checkPojo.checkTipText) {
                return checkPojo.checkTipText;
            } else if (cty.value != null && cty.value != "") {
                return this.getTipText(checkPojo);
            } else if (checkPojo.notNull) {					//修改的代码
                return checkPojo.showName + "-不允许为空！";
            }
        },
        getTipText: function (checkPojo) {
            switch (checkPojo.type) {
                case "date":
                    return checkPojo.showName + "-日期格式不正确";
                case "radio":
                case "checkbox":
                    return checkPojo.showName + "-请进行选择";
                case "number":
                    return checkPojo.showName + "-只能输入整数";
                case "decimal":
                    return checkPojo.showName + "-只能输入数字";
                default:
                    return checkPojo.showName + "-不允许为空！";
            }
        },
        /**
         * 移除校验通不过控件的事件
         * @param cty
         * @returns
         */
        removeCheckEvent: function (cty) {
            if (cty.dynamicMouseOver) {
                JBF.removeEvent(cty, "mouseover", cty.dynamicMouseOver);
                cty.style.borderColor = "";
            }
            if (cty.dynamicMouseOut) {
                JBF.removeEvent(cty, "mouseout", cty.dynamicMouseOut);
            }
        },
        /**
         * 隐藏提示信息框
         * @returns
         */
        hideTipText: function () {
            var tipDiv = JBF.el(checkField.getTipName());
            if (tipDiv) {
                tipDiv.style.display = "none";
            }
        },
        /**
         * 显示提示信息框
         * @param showText
         * @returns
         */
        showTipText: function (showText) {
            return function () {
                var opt = JBF.getEventTarget(JBF.getEvent());
                var tipDiv = JBF.el(checkField.getTipName());
                if (!tipDiv) {
                    tipDiv = document.createElement("div");
                    tipDiv.setAttribute("name", checkField.getTipName());
                    tipDiv.setAttribute("id", checkField.getTipName());
                }
                tipDiv.innerHTML = showText;
                tipDiv.className = "checkTip";
                tipDiv.style.display = "inline";
                tipDiv.style.left = JBF.getAbsX(opt) + "px";
                if (document.all) {
                    tipDiv.style.width = (JBF.getObjWidth(opt) - 5 * 2) + "px";
                } else {
                    tipDiv.style.width = JBF.getObjWidth(opt) + "px";
                }
                //alert("JBF.getScrollTop(opt):"+JBF.getScrollTop(opt));
                tipDiv.style.top = (JBF.getAbsY(opt) + JBF.getObjHeight(opt) - JBF.getScrollTop(opt)) + "px";
                document.body.appendChild(tipDiv);
            };
        },

        /**
         * 用来检测是否为空
         * @param cty
         * @returns
         */
        checkIsNull: function (cty, obj) {
            if (cty) {
                //alert(cty.nodeName);
                if (cty.nodeName == "INPUT" && (cty.type == "checkbox" || cty.type == "radio")) {
                    var checks = JBF.elByName(obj.name);
                    var checkResult = JBF.getSubValues(checks);
                    if (checkResult.length > 0) {
                        return true;
                    } else {
                        return false;
                    }
                } else if (cty.nodeName == "INPUT" || cty.nodeName == "TEXTAREA") {
                    if (cty.value && cty.value.length > 0) {
                        return true;
                    } else {
                        return false;
                    }
                } else if (cty.nodeName == "SELECT") {    //修改的地方
                    if (cty.value && cty.value.length > 0) {
                        return true;
                    }
                    return false;
                }
                //CHECKBOX RADIOL暂时不去考虑
            }
        },
        /**
         * 通过正则表达式进行测试
         * @param cty
         * @param checkName
         * @returns
         */
        checkRegExp: function (cty, checkName) {
            if (cty) {
                if (cty.value && cty.value.length > 0) {
                    return checkField.getRegExp(checkName).test(cty.value);
                } else {
                    return false;
                }
            }
        }
    };
})();


﻿/*******************************************************************************
 * 颜色面板块
 *
 * @param colorObj
 * @param opObj
 * @returns
 */
function ColorPanel(colorObj, opObj) {
    this.keyStatus = false;
    this.startX = 0;
    this.maxLength = 128;
    this.rColor = 0;
    this.gColor = 0;
    this.bColor = 0;
    this.bit = "1";
    this.moveObj = null;
    this.colorObj = colorObj;
    this.objLeft = 0;
    this.color = "#000000";
    this.opObj = opObj;
}

ColorPanel.prototype = {
    constructor: ColorPanel,
    getX: function (ev) {

        return ev.screenX;

    },
    getEventTarget: function (ev) {
        if (ev.srcElement) {
            return ev.srcElement;
        } else {
            return ev.target;
        }
    },
    mouseDown: function (status) {
        this.keyStatus = true;
        var ev = window.event;
        this.moveObj = this.getEventTarget(ev);
        this.objLeft = Number(this.moveObj.style.left.replace("px", ""));
        this.startX = this.getX(ev);
        this.bit = status + "";
        window.event.cancelBubble = true;
    },
    mouseMove: function () {
        if (this.keyStatus) {
            var ev = window.event;
            var moveX = this.getX(ev) - this.startX;
            var colorValue = (this.objLeft + moveX);
            if (colorValue > this.maxLength) {
                colorValue = this.maxLength;
            } else if (colorValue < 0) {
                colorValue = 0;
            }
            this.moveObj.style.left = colorValue + "px";
            var dbColor = colorValue * 2;
            if (dbColor > 255) {
                dbColor = 255;
            }
            if (this.bit == "1") {
                this.rColor = dbColor;
            } else if (this.bit == "2") {
                this.gColor = dbColor;
            } else if (this.bit == "3") {
                this.bColor = dbColor;
            }
            this.getColor();
        }
        window.event.cancelBubble = true;
    },
    getColor: function () {
        this.color = "#" + JBF.to16(this.rColor) + JBF.to16(this.gColor)
            + JBF.to16(this.bColor);
        JBF.el(this.colorObj + "MinColor").style.backgroundColor = this.color;
        JBF.el(this.colorObj + "InputColor").value = this.color;
        this.opObj.value = this.color;
        this.opObj.style.backgroundColor = this.color;
    },
    mouseUp: function () {
        this.keyStatus = false;
        window.event.cancelBubble = true;
    },
    show: function (colorStr) {
        var colorLeftStyle = "";
        if (colorStr) {
            colorStr = colorStr.replace("#", "");
        } else {
            colorStr = "000000";
        }
        var str = "<div class='colorPanel' onclick='if(window.event){window.event.cancelBubble=true;}' onmousemove='"
            + this.colorObj
            + ".mouseMove();' onmouseup='"
            + this.colorObj
            + ".mouseUp()'>";
        str += "<div id='"
            + this.colorObj
            + "MinColor' style='width:16px;height:16px; float:left;margin-right:10px;background-color:#"
            + colorStr
            + ";border:1px solid #880000;'></div><div style='float:left;'><input style='width:80px;border:none;' id='"
            + this.colorObj + "InputColor'></div>";
        for (var i = 1; i < 4; i++) {
            var otherClass = "blue";
            colorLeftStyle = colorStr.substring((i - 1) * 2, i * 2);
            colorLeftStyle = parseInt("0x" + colorLeftStyle, 16);
            switch (i) {
                case 1:
                    this.rColor = colorLeftStyle;
                    otherClass = "red";
                    break;
                case 2:
                    this.gColor = colorLeftStyle;
                    otherClass = "green";
                    break;
                case 3:
                    this.bColor = colorLeftStyle;
                    otherClass = "blue";
                    break;
            }
            colorLeftStyle = "style='left:" + colorLeftStyle / 2 + "px;'";
            str += "<div class='parentDiv " + otherClass
                + "'><div class='childDiv' " + colorLeftStyle
                + " onmouseout='event.cancelBubble=true;' onmousedown='"
                + this.colorObj + ".mouseDown(" + i + ");'></div></div>";
        }
        str += "<div style='width:100%; text-align:right;'><a href='javascript:void(0)' onclick='JBF.closeColorPanel();'>关闭</a></div>";
        return str + "</div>";
    }
};
/**
 * @author lemonxd
 */
var __keyCode_Array = new Array();
var __keyCode_handler = new Array();

/**
 * 初始化方法
 * @param {Number} keyCodeNum 需要监听的keyCode数值
 * @param {String} methodString 对应的处理方法字符串
 * 方法参数需要成对儿传，如果不符合成对，方法无法初始化；
 */
function __init_change_page(keyCodeNum, methodString) {

    if (arguments.length % 2 == 0) {
        for (var i = 0; i < arguments.length; i += 2) {
            __keyCode_Array[i] = arguments[i];
            __keyCode_handler[i] = arguments[i + 1];

        }
    }

    if (window.document.attachEvent) {
        window.document.attachEvent("onkeydown", __document_onkeydown_handler);
    } else if (window.document.addEventListener) {
        window.document.addEventListener("keydown", __document_onkeydown_handler);
    } else {
        window.document.onkeydown = __document_onkeydown_handler;
    }


}

function __document_onkeydown_handler() {

    var ___keyCodeValue = event.keyCode;

    for (var i = 0; i < __keyCode_Array.length; i++) {
        if (___keyCodeValue == __keyCode_Array[i]) {
            window.eval('(' + __keyCode_handler[i] + ')');
        }
    }
}

﻿function LocatText(obj, objName) {
    this.obj = obj;
    this.objName = objName;
    this.locatTextArea = null;
    this.liHeight = 25;
    this.liCount = 5;
    this.oddColor = "#666666";
    this.evenColor = "#ffffff";
    this.oddTextColor = "#000000";
    this.evenTextColor = "#000000";
    this.overColor = "#aabac7";
    this.selectedLiIndex = 0;
    this.rowNodes = [];
    this.valueGroups = [];
    this.exeMethod = null;
    if (this.obj) {
        if (this.obj.oddColor) {
            this.oddColor = this.obj.oddColor;
        }
        if (this.obj.evenColor) {
            this.evenColor == this.obj.evenColor;
        }
        if (this.obj.oddTextColor) {
            this.oddTextColor = this.obj.oddTextColor;
        }
        if (this.obj.evenTextColor) {
            this.evenTextColor = this.obj.evenTextColor;
        }
        if (this.obj.overColor) {
            this.overColor = this.obj.overColor;
        }
        if (this.obj.exeMethod) {
            this.exeMethod = this.obj.exeMethod;
        }
    }
}

LocatText.prototype = {
    getHTML: function () {
        var value = "请输入";
        if (this.obj.showText) {
            value = this.obj.showText;
        }
        var textStr = "<input onclick='" + this.objName + ".fullLocatText(this);' onkeyup='" + this.objName + ".keyPressOp(this,event)' style='width:100%;' onfocus='" + this.objName + ".txtFocus(this);' value='" + value + "'/>";
        this.createSearchPanel();
        return textStr;
    },
    txtFocus: function (op) {
        op.select();
    },
    createSearchPanel: function () {
        this.locatTextArea = document.createElement("div");
        this.locatTextArea.style.position = "absolute";
        this.locatTextArea.style.left = "0px";
        this.locatTextArea.style.top = "100px";
        this.locatTextArea.style.width = "100%";
        this.locatTextArea.style.overFlow = "auto";
        this.locatTextArea.style.border = "1px";
        this.locatTextArea.style.backgroundColor = "#54573e";
        this.locatTextArea.style.zIndex = 1000;
        this.locatTextArea.style.display = "none";
        document.body.appendChild(this.locatTextArea);
    },
    fullSearchPanel: function (opInput) {
        if (null != this.locatTextArea && this.valueGroups && this.valueGroups.length > 0) {
            var height = this.liCount * this.liHeight;
            if (this.valueGroups.length >= this.liCount) {
                height = this.liCount * this.liHeight;
            } else {
                height = this.valueGroups.length * this.liHeight;
            }
            var ulStr = "<ul onclick='" + this.objName + ".selectedLi();' onmouseover='" + this.objName + ".mouseSelect(this,event);' id='" + this.objName + "startMenuText' style='display:block;margin:1px;height:" + height + "px;overFlow:auto;'>";
            for (var i = 0; i < this.valueGroups.length; i++) {
                var subNode = this.valueGroups[i];
                var clickObj = "selectedIndex='" + i + "'";
                if (i % 2 == 0) {
                    ulStr += "<li " + clickObj + " srcColor='" + this.oddColor + "' style='display:block;margin-left:-41px; height:25px; background-color:" + this.oddColor + "; color:" + this.oddTextColor + ";'>" + subNode["showName"] + "</li>";
                } else {
                    ulStr += "<li " + clickObj + " srcColor='" + this.evenColor + "' style='display:block; height:25px;margin-left:-41px; background-color:" + this.evenColor + "; color:" + this.evenTextColor + ";'>" + subNode["showName"] + "</li>";
                }
            }
            ulStr += "</ul>";
            this.locatTextArea.innerHTML = ulStr;
            this.locatTextArea.style.left = opInput.offsetLeft;

            this.locatTextArea.style.display = "inline";
            var ulHeight = this.liCount * this.liHeight;

            if (this.valueGroups.length >= this.liCount) {
                ulHeight = this.liCount * this.liHeight;
            } else {
                ulHeight = this.valueGroups.length * this.liHeight;
            }
            this.locatTextArea.style.height = ulHeight + "px";
            this.locatTextArea.style.top = (JBF.getAbsY(opInput) - ulHeight) + "px";
            this.locatTextArea.style.left = JBF.getAbsX(opInput);
            this.locatTextArea.style.width = opInput.offsetWidth;
        }
    },
    rowSelected: function () {
        if (this.locatTextArea) {
            this.rowNodes = JBF.getSubNodesByNodeName("LI", this.locatTextArea);
            if (this.rowNodes.length > 0) {
                this.rowNodes[0].style.backgroundColor = this.overColor;
                this.selectedLiIndex = 0;
            }
        }
    },
    selectedLi: function () {
        var obj = this.valueGroups[this.selectedLiIndex];
        this.exeMethod(obj);
    },
    keyRollLi: function (type) {
        if (type) {
            if (type == "up") {
                this.selectedLiIndex -= 1;
                JBF.el(this.objName + "startMenuText").scrollTop -= this.liHeight;
            } else {
                this.selectedLiIndex += 1;
                JBF.el(this.objName + "startMenuText").scrollTop += this.liHeight;
            }
        }
        if (this.selectedLiIndex < 0) {
            this.selectedLiIndex = this.rowNodes.length - 1;
            JBF.el(this.objName + "startMenuText").scrollTop = JBF.el(this.objName + "startMenuText").scrollHeight;
        } else if (this.selectedLiIndex == this.rowNodes.length) {
            this.selectedLiIndex = 0;
            JBF.el(this.objName + "startMenuText").scrollTop = 0;
        }
        this.changeBgColor();
    },
    mouseSelect: function (op, ev) {
        var opLi = JBF.getEventTarget(ev);
        if (this.rowNodes) {
            for (var i = 0; i < this.rowNodes.length; i++) {
                if (this.rowNodes[i] == opLi) {
                    this.selectedLiIndex = i;
                    i = this.rowNodes.length;
                    this.changeBgColor();
                }
            }
        }
    },
    changeBgColor: function () {
        for (var i = 0; i < this.rowNodes.length; i++) {
            var rowNode = this.rowNodes[i];
            var styleColor = rowNode.style.backgroundColor;
            var srcColor = rowNode.attributes["srcColor"].value;
            if (styleColor != srcColor) {
                rowNode.style.backgroundColor = srcColor;
            }
        }
        this.rowNodes[this.selectedLiIndex].style.backgroundColor = this.overColor;
    },
    fullLocatText: function (op) {
        var inputText = op.value;
        var isClear = false;
        if (inputText.length <= 0) {
            isClear = true;
        } else {
            if (this.obj.searchDatas) {
                this.valueGroups.length = 0;
                for (var i = 0; i < this.obj.searchDatas.length; i++) {
                    var searchObj = this.obj.searchDatas[i];
                    if (searchObj["code"].indexOf(inputText) > -1 || searchObj["showName"].indexOf(inputText) > -1) {
                        this.valueGroups.push(searchObj);
                    }
                }
            }
            if (this.valueGroups.length <= 0) {
                isClear = "true";
            }
        }
        if (isClear) {
            this.locatTextArea.innerHTML = "";
            this.locatTextArea.style.display = "none";
            this.rowNodes.length = 0;
            this.valueGroups.length = 0;
        } else {
            this.fullSearchPanel(op);
            this.rowSelected();
        }
    },
    /**
     * 键盘操作
     * @param op
     * @param ev
     */
    keyPressOp: function (op, ev) {
        var event = JBF.getEvent(ev);
        var keyCode = JBF.getKeyValue(event);
        if (keyCode == 38) {
            this.keyRollLi("up");
        } else if (keyCode == 40) {
            this.keyRollLi("down");
        } else if (keyCode == 13) {
            this.selectedLi();
        } else {
            this.fullLocatText(op);
        }
    }
};

function LeftMenu(menuObj, objName) {
    this.menuObj = menuObj;// 初始数据
    this.objName = objName;
    this.objDatas = [];
    this.groupDatas = [];// 整合完成的数据信息，用于存储一些页面上生的id，name......
    this.linkDatas = [];// 用于保存所有的链接的页面元素名称及其父节点的名称
    this.cssStyle = "";
    this.linkFun = null;
    this.preNode = null;
    if (menuObj) {
        this.objDatas = JBF.setObjValue(menuObj.datas, menuObj.datas, "");// 初始化菜单数据
        this.cssStyle = JBF.setObjValue(menuObj.cssStyle, menuObj.cssStyle, "");// 显示的css样式
        if (menuObj.linkFun) {
            this.linkFun = menuObj.linkFun;
        }
    }
}

LeftMenu.prototype = {
    constructor: LeftMenu,
    /**
     * 以标准的父子关系节点的数据格式的形式来展示
     *
     * @returns {String}
     */
    show: function () {
        var menuStr = "<div class='menuPanel'>";
        for (var i = 0; i < this.objDatas.length; i++) {
            var titleName = "panelTitle_" + i;
            var panelContentName = "panelContentName_" + i;
            var icoName = "panelContentName_ico_" + i;
            var objData = this.objDatas[i];
            var subMenuStr = "<div class='subPanel'><div class='panelTitleOut' name='"
                + titleName
                + "' id='"
                + titleName
                + "' onclick='"
                + this.objName + ".extendSubNode(" + i + ",this);'>";
            subMenuStr += "<div class='panelTitleInner' onmouseo1ver='"
                + this.objName + ".titleMoverOver(this);' onmouse1out='"
                + this.objName + ".titleMoverOut(this);'  name='"
                + titleName + "_' id='" + titleName + "_' >";

            subMenuStr += "<div class='ico_0" + (i - parseInt(i / 9) * 9) + "' id='" + icoName + "' name='"
                + icoName + "' ></div>";
            subMenuStr += JBF.setObjValue(objData.text,
                "<div class='text'>机构信息</div>", "<div class='text'>"
                + objData.showName + "</div>");
            subMenuStr += "</div></div><div class='panelContent' id='"
                + panelContentName + "' name='" + panelContentName + "'>";
            this.groupDatas.push({
                "index": i,
                "titleName": titleName,
                "contentName": panelContentName,
                "icoName": icoName
            });
            if (objData.subNodes) {
                // 用于取最父节点的div名称，用于动态伸缩
                subMenuStr += this.createSubNode(objData, 1, titleName);
            }
            subMenuStr += "</div></div>";
            menuStr += subMenuStr;
        }
        menuStr += "</div>";
        return menuStr;
    },
    /**
     * 对列表形式数据进行显示
     */
    showList: function () {
        this.buildMenuTree();
        return this.show();
    },
    buildMenuTree: function () {
        var menuList = this.menuObj.datas;
        var menus = new Array;
        var pSeqno = 0;
        var subSeqno = 0;
        for (var i = 0; menuList != null && i < menuList.length; i++) {
            var md = menuList[i];
            if (md.pmenuId == md.id) {
                menus[pSeqno] = new Object;
                menus[pSeqno].id = md.id;
                menus[pSeqno].code = md.menuCode;
                menus[pSeqno].showName = md.menuName;
                menus[pSeqno].subNodes = new Array;
                pSeqno++;
                md.url = "xxx";
                subSeqno = 0;
            } else {
                menus[pSeqno - 1].subNodes[subSeqno] = new Object;
                menus[pSeqno - 1].subNodes[subSeqno].id = md.id;
                menus[pSeqno - 1].subNodes[subSeqno].code = md.menuCode;
                menus[pSeqno - 1].subNodes[subSeqno].showName = md.menuName;
                menus[pSeqno - 1].subNodes[subSeqno].url = md.url;
                subSeqno++;
            }
        }
        this.menuObj.datas = menus;
    },
    converListToNormal: function () {

    },
    titleMoverOver: function (obj) {
        obj.className = "panelTitleInner_over";
        obj.parentNode.className = "panelTitleOut_over";
    },
    titleMoverOut: function (obj) {
        obj.className = "panelTitleInner";
        obj.parentNode.className = "panelTitleOut";
    },
    /**
     * 根据肖前节点的深度及其数据对像用来生成子节点信息
     *
     * @param objData
     * @param deep
     * @returns {String}
     */
    createSubNode: function (objData, deep, parentName) {
        if (objData && objData.subNodes) {
            var className = "subPanelContent";
            if (deep > 1) {
                className = "subPanelContent_";
            }
            var subNodeStr = "<div class='" + className + "'>";
            for (var i = 0; i < objData.subNodes.length; i++) {
                var subNode = objData.subNodes[i];
                var tabBlack = "";
                var j = 0;
                while (deep > j++) {
                    tabBlack += "<div class='block'></div>";
                }
                if (deep < j) {
                    tabBlack += "<div class='subIco'></div>";
                }
                subNodeStr += tabBlack;
                var aName = "linkName_" + subNode.code;
                subNodeStr += "<a href='javascript:void(0)' name='" + aName
                    + "' id='" + aName + "' code='" + subNode.code
                    + "' class='nodeSelected' onclick='" + this.objName
                    + ".linkFunCall(this,\"" + subNode.url + "\",\""
                    + subNode.id + "\")'><span id='showName" + subNode.id + "'>" + subNode["showName"] + "</span></a>";
                if (subNode.subNodes) {
                    subNodeStr += this.createSubNode(subNode, ++deep);
                }
                this.linkDatas.push({
                    "code": subNode.code,
                    "parentName": parentName,
                    "nodeName": aName
                });
            }
            subNodeStr += "</div>";
            return subNodeStr;
        }
        return "";
    },
    /**
     * 单击后要执行的操作。同时执行回调函数
     *
     * @param obj
     * @param url
     */
    linkFunCall: function (obj, url, id) {
        if (this.preNode) {
            this.preNode.style.color = "#747474";
            this.preNode.style.fontSize = "12px";
            this.preNode.style.fontWeight = "";
            this.preNode.style.background = "";

        }
        this.preNode = obj;
        obj.style.color = "#2173a1";
        obj.style.fontSize = "12px";
        obj.style.fontWeight = "bold";
        this.preNode.style.background = "url('JBFCommon/css/left_02.gif') no-repeat ";
        this.preNode.style.backgroundPosition = "right center";
        this.linkFun(url, id);
    },
    /**
     * 用来伸缩其子菜单
     *
     * @param index
     */
    extendSubNode: function (index, out) {
        for (var i = 0; i < this.groupDatas.length; i++) {
            groupData = this.groupDatas[i];
            var panelContent = JBF.el(groupData["contentName"]);
            var icoObj = JBF.el(groupData["icoName"]);
            var innerObj = JBF.el(groupData["titleName"] + "_");
            if (groupData["index"] == index) {
                this.setSubExtendInline(panelContent, icoObj, innerObj);
            } else {
                this.setSubExtendNone(panelContent, icoObj, innerObj);
            }
        }
    },
    /**
     * 设置子div为显示状态
     *
     * @param panelContent
     * @param icoObj
     */
    setSubExtendInline: function (panelContent, icoObj, innerObj) {
        if (panelContent) {
            var attribute = panelContent.attributes["isExtend"];
            if (attribute && attribute.nodeValue) {
                this.setSubExtendNone(panelContent, icoObj, innerObj);
            } else {
                panelContent.style.display = "inline";
                //icoObj.className = "icoOver";
                panelContent.setAttribute("isExtend", 1);
                this.titleMoverOver(innerObj);
            }
        }
    },
    /**
     * 设置子div为隐藏状态
     *
     * @param panelContent
     * @param icoObj
     */
    setSubExtendNone: function (panelContent, icoObj, innerObj) {
        if (panelContent) {
            var attribute = panelContent.attributes["isExtend"];
            if (attribute && attribute.nodeValue) {
                panelContent.style.display = "none";
                //icoObj.className = "ico";
                panelContent.setAttribute("isExtend", "");
                this.titleMoverOut(innerObj);
            }
        }
    },
    searchMenuByCode: function (code) {

        for (var i = 0; i < this.linkDatas.length; i++) {
            var linkData = this.linkDatas[i];
            if (code == linkData["code"]) {
                var parentNode = JBF.el(linkData["parentName"]);
                JBF.mockEvent(parentNode, "click");
                var node = JBF.el(linkData["nodeName"]);
                JBF.mockEvent(node, "click");
            }
        }
    },
    setShowName: function (subNode, showName) {
        var id = subNode;
        if (subNode.id) {
            id = subNode.id;
            showName = subNode.showName;
        }
        var showNameSpan = document.getElementById("showName" + id);
        showNameSpan.innerHTML = showName;

    }
};
/**
 * 通知通告右下角弹出框组件
 * 用法：
 var message = new NewMessage('mymessage','通知通告','您共有<a href=# onclick=openWindow()>'+messageNum+'条</a>通知未处理！</br>');
 message.show();

 * @param msg_id 页面divid
 * @param msg_title msg 标题
 * @param msg_content msg 内容
 * @return
 */
var topY = 0;// 初始化元素距父元素的距离
function NewMessage(msgId, msgTitle, msgContent) {

    this.msgObj = $("#" + msgId);//消息框对象

    this.slideTime = 800;//通知弹出时间slideTime
    this.msgTitle = msgTitle;//消息标题：通知通告
    this.msgContent = msgContent;//消息内容
    this.msgWidth = "215px";//消息框宽度
    this.msgHeight = "120px";//消息框高度

}


NewMessage.prototype = {
    /**
     *弹出消息窗口事件
     **/
    show: function () {

        // 设置消息框的CSS
        var msgObjShow = this.msgObj;
        this.msgObj.css("width", this.msgWidth).css("height", this.msgHeight);
        this.msgObj.css("display", "none").css("z-index", "9999");
        var pxBottom = (window.screen.height - window.screen.availHeight + 30) + "px";

        this.msgObj.css("position", "absolute").css("bottom", pxBottom).css("right", "10px").css("border", "1px solid blue");// 设置消息框的大小

        // 添加消息窗口内容
        var msgObjDiv = "";
        msgObjDiv += "<div id='msg_win' style='position: absolute;right: 0px;z-index: 0;border: 0px solid #c00;background: #F9EFFC;width: 215px;height: 120px;	font-size: 12px;margin: 0px;'>"
        msgObjDiv += "<div class='icos' style='position: absolute;right: 2px;z-index: 9;'>";
        msgObjDiv += "	<a id='message_close' title='关闭' href='javascript:void(0);' style='	float: left;color: white ;margin: 1px;text-align: center;font-weight: bold;	width: 14px;	height: 22px;	line-height: 22px;	padding: 1px;	text-decoration: none;	font-family: 宋体;' >X</a>";
        msgObjDiv += "</div>";
        msgObjDiv += "<div id='msg_title' style='background: #4682B4;	border-bottom: 1px solid #710B97;	border-top: 1px solid #FFF;	border-left: 1px solid #FFF;	color: #FFFFFF;	height: 25px;	line-height: 25px;	text-indent: 5px;	font-weight: bold;'>";
        msgObjDiv += this.msgTitle;
        msgObjDiv += "</div>";
        msgObjDiv += "<div id='msg_content'  style='width: 215px;height: 120px;		'>";
        msgObjDiv += this.msgContent;
        msgObjDiv += "</div>";
        msgObjDiv += "</div>";
        this.msgObj.html(msgObjDiv);
        this.msgObj.slideDown(this.slideTime);// 弹出
        // 注册 当点击关闭按钮事件
        $("#message_close").click(function () {

            if (topY == 0) {
                msgObjShow.slideUp(800);// 这里之所以用slideUp是为了兼用Firefox浏览器

            } else {
                // alert("msg.height()="+ msg.height());
                msgObjShow.animate({
                    top: topY + msgObjShow.height()
                }, "slow", function () {
                    msgObjShow.hide();
                });// 当topY不等于0时 ie下和Firefox效果一样
            }
        });

        /*
				$(window).scroll(
						function() {

							msgObjShow.css("top", $(window).scrollTop() + $(window).height() - msgObjShow.height());// 当滚动条滚动的时候始终在屏幕的右下角
							topY = msgObjShow.offset().top;// 当滚动条滚动的时候随时设置元素距父原素距离

						});
					*/
    },

    /**
     *弹出框关闭
     **/
    close: function () {
        if (topY == 0) {
            this.msgObj.slideUp(this.slideTime);// 这里之所以用slideUp是为了兼用Firefox浏览器
        } else {
            this.msgObj.animate({
                top: topY + this.msgObj.height()
            }, "slow", function () {
                this.msgObj.hide();
            });// 当topY不等于0时 ie下和Firefox效果一样
        }
    }
};


function Params(structureDatas, objName) {
    this.structureDatas = structureDatas;
    this.objName = objName;
    this.lineWidth = 4;
    this.fillDataDivId = this.objName + "FillDiv";
    this.tableObjs = [];
    this.tableDivNames = [];
    this.organId = "";
    this.bizType = "";
    this.progress = new Progress();
    this.dialog = null;
    this.bigWinToolbarName = this.objName + "bigTableToolbarDiv";
    this.bigWinName = this.objName + "bigTableContentDiv";
    this.bigWinTable = null;
}

Params.prototype = {
    constructor: Params,
    toHTML: function () {
        var htmlStr = "";
        if (this.structureDatas) {
            for (var i = 0; i < this.structureDatas.length; i++) {
                var lineObjs = [];
                var fillIdName = this.fillDataDivId + "_" + i;
                var img1 = this.objName + "AddImg" + "_" + i;
                var img2 = this.objName + "viewImg" + "_" + i;
                var img3 = this.objName + "delImg" + "_" + i;
                param = this.structureDatas[i];
                var className = "minWin";
                if (param.isAlone) {
                    className = "aloneMinWin";
                }
                htmlStr += "<div class='winFrame' style='position:absolute;left: " + param.x + "px; top: " + param.y + "px;'><div class='" + className + "'><div class='minWinTitleDiv' ondblclick='" + this.objName + ".expandPojoWin(" + i + ");'><div class='titleDiv'>"
                    + param.title
                    + "</div><div class='titleToolbar' >"
                    + "<div class='img3' style='display:none;' id='" + img3 + "'><a href='javascript:void(0)' title='删除参数信息' onclick='" + this.objName + ".delRow(" + i + ")'></a></div>"
                    + "<div class='img2' style='display:none;' id='" + img2 + "'><a href='javascript:void(0)' title='查看参数信息' onclick='" + this.objName + ".openView(" + i + ")'></a></div>"
                    + "<div class='img1' style='display:none;' id='" + img1 + "'><a href='javascript:void(0)' title='增加参数信息' onclick='" + this.objName + ".addRow(" + i + ")'></a></div>"
                    + "</div></div><div class='minWinContent' id='" + fillIdName + "'></div></div></div>";
                if (param.linkLines && param.linkLines.length > 0) {
                    for (var j = 0; j < param.linkLines.length; j++) {
                        var line = param.linkLines[j];
                        var width = this.lineWidth;
                        var height = line.length;
                        if (line.mode == "transverse") {
                            width = line.length;
                            height = this.lineWidth;
                        }
                        var lineName = fillIdName + "_" + j;
                        htmlStr += " <div id='" + lineName + "' class='line_' style=' height:" + height + "px; width:" + width + "px; top:" + line.y + "px; left:" + line.x + "px;'></div>"
                        lineObjs.push(lineName);
                    }
                }
                this.tableDivNames.push({
                    "fillIdName": fillIdName,
                    lines: lineObjs,
                    addImg: img1,
                    viewImg: img2,
                    delImg: img3
                });
            }
        }
        return htmlStr;
    },
    bigFormContent: function (index) {
        var toolbarStr = "<div id='" + this.bigWinToolbarName + "'>" + this.createBitWinButtonsStr(index) + "</div>";
        toolbarStr += "<div id='" + this.bigWinName + "'></div>";
        return toolbarStr;
    },
    createBitWinButtonsStr: function (index) {
        var param = this.structureDatas[index];
        var tableNameObj = this.tableDivNames[index];
        var buttonsData = [];
        if (typeof (JBF.el(tableNameObj.addImg).style.display) == "string" && JBF.el(tableNameObj.addImg).style.display != "none") {
            buttonsData.push({
                showName: '增加',
                icon: 'save',
                method: (this.objName + ".addRow(" + index + ")"),
                copy: true
            });
        }
        if (typeof (JBF.el(tableNameObj.viewImg).style.display) == "string" && JBF.el(tableNameObj.viewImg).style.display != "none") {
            buttonsData.push({
                showName: '编辑',
                icon: 'save',
                method: (this.objName + ".openView(" + index + ")"),
                copy: true
            });
        }
        if (typeof (JBF.el(tableNameObj.delImg).style.display) == "string" && JBF.el(tableNameObj.delImg).style.display != "none") {
            buttonsData.push({
                showName: '删除',
                icon: 'save',
                method: (this.objName + ".delRow(" + index + ")"),
                copy: true
            });
        }
        var buttons = {datas: buttonsData};
        var pojo = {buttons: buttons, title: param.title};
        var toolbar = new Form(pojo, "modifyForm");
        return toolbar.createToolbar();
    },
    /**
     * 扩展大表格操作
     * @param index
     */
    expandPojoWin: function (index) {
        var that = this;
        var content = this.bigFormContent(index);
        var width = window.screen.availWidth * 70 / 100;
        var height = 400;
        this.dialog = new OpenUrl(param.title, content, width, height, this.objName + ".dialog", "other", function () {
            that.bigWinTable = null;
        });
        this.dialog.show();
        this.createBigWinTable(index);
    },
    /**
     * 新建大表格的内窗口
     * @param index
     */
    createBigWinTable: function (index) {
        tableObj = this.tableObjs[index];
        if (tableObj) {
            table = tableObj["tableObj"];
            tableDatas = table.datas;
            var columnsData = this.groupBigTableColumns(index);
            if (columnsData) {
                var tableStructure = {
                    columns: columnsData,
                    data: {"rows": tableDatas},
                    selectType: 'radio',
                    trHeight: '20',
                    isFooter: "false",
                    extendAttribute: index
                };
                this.bigWinTable = new Table(tableStructure, this.objName + ".bigWinTable");
                this.bigWinTable.show(JBF.el(this.bigWinName));
            }
        }
    },
    /**
     * 组织大表格的列内容
     * @param index
     * @returns
     */
    groupBigTableColumns: function (index) {
        var tableStructure = this.structureDatas[index];
        if (tableStructure && tableStructure.fullColumns) {
            var columns = [{display: 'id', name: 'id', width: 20, align: 'left', type: 'text', hidden: 'true'}];
            for (var i = 0; i < tableStructure.fullColumns.length; i++) {
                var column = tableStructure.fullColumns[i];
                columns.push({display: column[0], name: column[1], width: 80, align: 'left', type: 'text'});
            }
            return columns;
        }
        return null;
    },
    openView: function (index) {
        var obj = this.structureDatas[index];
        if (this.tableObjs[index] && this.tableObjs[index].tableObj) {
            var tableObj = this.tableObjs[index].tableObj;
            var viewUrl = this.groupUrl(obj.viewUrl, obj, tableObj.getSelectedValues('id'));
            var returnValue = JBF.openWinByUrl(viewUrl);
            if (returnValue) {
                if (typeof (returnValue) == "STRING" || typeof (returnValue) == "string") {
                    returnValue = JBF.strToObj(returnValue);
                }
                tableObj.modifyPojo(returnValue);
            }
        }
    },
    /**
     * 大表格数据刷新
     * @param index
     */
    bigTableFlush: function (index) {
        if (this.bigWinTable) {
            JBF.el(this.bigWinToolbarName).innerHTML = this.createBitWinButtonsStr(index);//用 来重整大窗口的工具栏中的按钮
            var tableObjDatas = this.tableObjs[index];
            var tableObj = tableObjDatas.tableObj;
            this.bigWinTable.datas = tableObj.datas;
            this.bigWinTable.refreshDatas();
        }
    },
    /**
     * 通过索引找到页面对像，然后在页面表格对像中加入一行数据
     * @param index
     */
    addRow: function (index) {
        var obj = this.structureDatas[index];
        var addUrl = obj.addUrl;
        if (this.tableObjs[index] && this.tableObjs[index].tableObj) {
            var tableObjDatas = this.tableObjs[index];
            var tableObj = tableObjDatas.tableObj;
            var historyCount = 0;
            if (tableObj) {
                historyCount = tableObj.getRowsCount();
                addUrl = this.groupUrl(obj.addUrl, obj, tableObjDatas.parentId);
                var returnValue = JBF.openWinByUrl(addUrl);
                if (returnValue) {
                    if (typeof (returnValue) == "STRING" || typeof (returnValue) == "string") {
                        if (returnValue == "refresh") {
                            tableObj.searchByForm();
                            returnValue = false;
                        } else {
                            returnValue = JBF.strToObj(returnValue);
                        }
                    }
                    if (returnValue) {
                        if ((typeof (returnValue) == "array" || typeof (returnValue) == "object") && returnValue.length && returnValue.length > 0) {
                            if (returnValue && returnValue.length > 0) {
                                for (var i = 0; i < returnValue.length; i++) {
                                    tableObj.addPojo(returnValue[i]);
                                }
                            }
                        } else {
                            tableObj.addPojo(returnValue);
                        }
                    }
                    if (tableObj.getRowsCount() > historyCount && historyCount <= 0) {//当历史记录为空并增加成功后进行的操作
                        //alert("开始刷新表格");
                        this.opTableButtonIcon(true, index);
                        this.bigTableFlush(index);
                    }
                }
            }
        } else {
            alert("生成表格");
        }
    },

    /**
     * 通过索引删除行数据
     * @param index
     */
    delRow: function (index) {
        var obj = this.structureDatas[index];
        var that = this;
        var removeUrl = obj.removeUrl;
        var tableObj = this.tableObjs[index].tableObj;
        removeUrl = this.groupUrl(obj.removeUrl, null, tableObj.getSelectedValues('id'));
        //alert(removeUrl);
        JBF.ajax(removeUrl, "", function () {
            if (tableObj) {
                tableObj.removeSelectedTR();
                if (tableObj.getRowsCount() <= 0) {
                    that.opTableButtonIcon(false, index);
                }
                that.bigTableFlush(index);
            }
        });
    },
    /**
     * 刷新表格
     * @param organId
     * @param bizType
     */
    flushTableDatas: function (organId, bizType) {
        this.organId = organId;
        this.progress.start();
        var that = this;
        setTimeout(function () {
            that.initTable(bizType);
            for (var i = 0; i < that.structureDatas.length; i++) {
                var param = that.structureDatas[i];
                if (param.deepIndex <= 0) {
                    that.newTable(i, false, null);//第四个参数表示是第一次刷新数据
                }
            }
        }, 1000);

        //alert(111);
        this.progress.end();
    },
    /**
     * 重组url
     * @param url
     * @param parentObj
     * @param id
     * @returns
     */
    groupUrl: function (url, parentObj, id) {
        if (url.indexOf("?") > 0) {
            url += "&";
        } else {
            url += "?";
        }
        var params = "";
        if (this.organId && (this.organId + "").length > 0) {
            params += "&organId=" + this.organId;
        }
        if (this.bizType && (this.bizType + "").length > 0) {
            params += "&bizTypeId=" + this.bizType;
        }
        if (parentObj) {
            if (parentObj.primaryKey && parentObj.primaryKey.length > 0) {
                params += "&" + parentObj.primaryKey + "=" + id;
            }
            if (parentObj.params) {
                for (var i = 0; i < parentObj.params.length; i++) {
                    var paramObj = parentObj.params[i];
                    var tableIndex = this.getStructureIndexByCode(paramObj["tableObj"]);
                    var tableParamObj = this.tableObjs[tableIndex];
                    var table = tableParamObj["tableObj"];
                    var paramValue = table.getSelectedValues(paramObj["tableColumn"]);
                    params += "&" + paramObj.paramName + "=" + paramValue;
                    //alert("params:"+params);
                }

            }
        }
        if (id && id.length > 0) {
            params += "&id=" + id;
        }
        if (params.length > 0) {
            url += params.substring(1, params.length);
        }
        //alert(url);
        return url;
    },
    /**
     *初始化表格
     *id用来级联操作时的参数使用（其中有两个入口，1、表格初始化时进行刷新 2、表格在父节点进行点击时进行刷新子节点）
     **/
    newTable: function (index, id) {
        var obj = this.structureDatas[index];
        var loadUrl = obj.loadUrl;
        if (id) {
            loadUrl = this.groupUrl(obj.loadUrl, obj, id);
        } else {
            loadUrl = this.groupUrl(obj.loadUrl);
        }
        var tableName = this.objName + ".tableObjs[" + index + "].tableObj";
        var displayName1 = "编码";
        var displayName2 = "名称";
        if (obj.displayName) {
            if (obj.displayName[0]) {
                displayName1 = obj.displayName[0];
            }
            if (obj.displayName[1]) {
                displayName2 = obj.displayName[1];
            }
        }
        var tableStructure = {
            columns: [
                {display: 'id', name: 'id', width: 20, align: 'left', type: 'text', hidden: 'true'},
                {display: displayName1, name: 'code', width: 80, align: 'left', type: 'text'},
                {display: displayName2, name: 'name', width: 80, align: 'left', type: 'text'}
            ],
            url: loadUrl,
            selectType: 'radio',
            checkbox: false,
            trHeight: '20',
            isFooter: "false",
            isShowCheck: "false",
            rowMouseOver: this.aa,
            rowClick: this.tableRowClick(),
            extendAttribute: index,
            columnShadow: obj.groupDataColumns
        };
        var table = new Table(tableStructure, tableName);
        this.tableObjs[index] = {"index": index, "tableObj": table, "objName": tableName, "parentId": id};

        table.showAndQuery(JBF.el(this.tableDivNames[index].fillIdName));

        if (table.getRowsCount() > 0) {//1.只去处理下一级子表格信息  2.对当前信息进行操作，改变颜色等操作
            this.opTableButtonIcon(true, index);
        } else {//1、改变当前信息操作 2、同时要清除所有子节点信息，并改变其上边小图标
            this.opTableButtonIcon(false, index);
        }
    },
    initTable: function (bizTypeId) {
        this.bizType = bizTypeId;
        for (var i = 0; i < this.structureDatas.length; i++) {
            var obj = this.structureDatas[i];
            var tableName = this.objName + ".tableObjs[" + i + "].tableObj";
            var displayName1 = "编码";
            var displayName2 = "名称";
            if (obj.displayName) {
                if (obj.displayName[0]) {
                    displayName1 = obj.displayName[0];
                }
                if (obj.displayName[1]) {
                    displayName2 = obj.displayName[1];
                }
            }
            var tableStructure = {
                columns: [
                    {display: 'id', name: 'id', width: 20, align: 'left', type: 'text', hidden: 'true'},
                    {display: displayName1, name: 'code', width: 80, align: 'left', type: 'text'},
                    {display: displayName2, name: 'name', width: 80, align: 'left', type: 'text'}
                ],
                selectType: 'radio',
                checkbox: false,
                trHeight: '20',
                isFooter: "false",
                isShowCheck: "false",
                rowMouseOver: this.aa,
                rowClick: this.tableRowClick(),
                extendAttribute: i,
                columnShadow: obj.groupDataColumns
            };
            var table = new Table(tableStructure, tableName);
            this.tableObjs[i] = {"index": i, "tableObj": table, "objName": tableName};
            if (obj.isAlone) {
                table.url = this.groupUrl(obj.loadUrl);
                this.newTable(i);
                this.tableRowClick();
                //this.tableObjs[i].tableObj.selectRow(1);
                //table.selectRow(0)
            } else {
                table.show(JBF.el(this.tableDivNames[i].fillIdName));
            }

        }

    },
    /**
     * 通过索引来改变编辑按钮
     * @param index
     */
    opTableButtonIcon: function (isShowButton, index) {
        this.changeTableStyle(isShowButton, index);//改变form表单的按钮及其颜色和状态
        this.changeSubNodeButtons(isShowButton, this.structureDatas[index]);//处理子节点上边按钮状态

    },
    /**
     * 解决其子节点的状态信息，只解决一层数据
     * @param structureData
     * @param parentCountStatus父节点的状态，只有两种情况(1、有数据存在，2、没有数据存在，记录为空)
     */
    changeSubNodeButtons: function (parentCountStatus, parentStructureData) {
        if (parentStructureData.subNodes && parentStructureData.subNodes.length > 0) {
            if (!parentCountStatus) {
                for (var i = 0; i < parentStructureData.subNodes.length; i++) {
                    var subNodeCode = parentStructureData.subNodes[i];
                    var index = this.getStructureIndexByCode(subNodeCode);
                    var structureData = this.structureDatas[index];
                    var tableObj = this.tableObjs[index];
                    tableNameObj = this.tableDivNames[index];
                    //如果父节点有数据，则不去处理子节点，因为在级联管理中自动完成，
                    //当前处理的为父节点当中记录数为0的情况（1、改变当前子节点所有标题"所有"图标隐藏状态，并且处理其窗口颜色及其所属线条）

                    JBF.el(tableNameObj.delImg).style.display = "none";
                    JBF.el(tableNameObj.viewImg).style.display = "none";
                    JBF.el(tableNameObj.addImg).style.display = "none";
                    //alert("structureData:"+structureData.title);
                    this.changeLineColor(parentCountStatus, tableNameObj.lines);//清除线条（重原数据结构中找到）
                    this.changeFormColor(parentCountStatus, tableNameObj.fillIdName);//清除颜色（重生成的tableName集合中找自动生成的名称）
                    this.clearTableDatas(tableObj);
                    //清 除数据
                    this.changeSubNodeButtons(parentCountStatus, structureData);
                }
            }
        }
    },
    /**
     * 用于清除表格数据
     * @param tableObj
     */
    clearTableDatas: function (tableObj) {
        if (tableObj) {
            var table = tableObj["tableObj"];
            if (table) {
                table.clearDatas();//把表格数据进行清除
            }
        }
    },
    /**
     * 默认为红色，如果已操作则为蓝色
     * @param isColor
     * @param index
     */
    changeTableStyle: function (isColor, index) {
        var tableObj = this.tableDivNames[index];
        if (tableObj && tableObj.lines) {
            this.changeLineColor(isColor, tableObj.lines);
            this.changeFormColor(isColor, tableObj.fillIdName);
            this.changeTitleIcon(isColor, tableObj);
        }
    },
    /**
     * 通过当前表格记录个数来修改当前from中title的按钮显示状况（只有两种，只针对于本身，
     * 1.有数据全部显示 2.无数据只显示增加按钮，应考虑父节点状态，暂先不考虑）
     */
    changeTitleIcon: function (isCount, tableObj) {
        if (isCount) {
            JBF.el(tableObj.delImg).style.display = "";
            JBF.el(tableObj.viewImg).style.display = "";
            JBF.el(tableObj.addImg).style.display = "";
        } else {
            JBF.el(tableObj.delImg).style.display = "none";
            JBF.el(tableObj.viewImg).style.display = "none";
            JBF.el(tableObj.addImg).style.display = "";
        }
    },
    /**
     * 改变其线要的颜色
     * @param isColor
     * @param lines
     */
    changeLineColor: function (isColor, lines) {
        var className = "line_";
        if (isColor) {
            className = "lineOver";
        }
        for (var i = 0; i < lines.length; i++) {
            var lineObj = JBF.el(lines[i]);
            if (lineObj) {
                lineObj.className = className;
            }

        }
    },
    /**
     * 改变当前对像的title样式
     * @param isColor
     * @param formObjName
     */
    changeFormColor: function (isColor, formObjName) {
        var className = "minWinTitleDiv";
        if (isColor) {
            className = "minWinTitleDivOver";
        }
        var tableDiv = JBF.el(formObjName);//通过名称找到form中的表格对像
        if (tableDiv) {
            var preDiv = JBF.getPreElement(tableDiv);//通过表格对像找到其父节点（title）
            if (preDiv) {
                preDiv.className = className;
            }
        }
    },
    /**
     * 表格行单击时进行切换操作
     * @returns {Function}
     */
    tableRowClick: function () {
        var that = this;
        return function (rowIndex, id, objIndex) {
            var parentObj = that.structureDatas[objIndex];
            if (parentObj && parentObj.subNodes) {
                for (var i = 0; i < parentObj.subNodes.length; i++) {
                    that.flushTableByCode(parentObj.subNodes[i], id);
                }
            }
        };
    },
    /**
     * 通过表格code来刷新表格
     * @param tableCode
     * @param id选中行的id号在单击是回传回来的
     */
    flushTableByCode: function (tableCode, id) {
        var objIndex = this.getStructureIndexByCode(tableCode);
        this.newTable(objIndex, id);
    },
    getStructureDataByCode: function (code) {
        var index = this.getStructureIndexByCode(code);
        if (typeof (index) == 'number') {
            return this.structureDatas[index];
        }
        return null;
    },
    getTableDivNameByCode: function (code) {
        var index = this.getStructureIndexByCode(code);
        if (typeof (index) == "NUMBER" || typeof (index) == "number") {
            return this.tableDivNames[index];
        }
        return null;
    },
    getStructureIndexByCode: function (code) {
        for (var i = 0; i < this.structureDatas.length; i++) {
            if (this.structureDatas[i].code == code) {
                return i;
            }
        }
    }
};

function Progress() {
    this.id = "progressDiv";
};
Progress.prototype = {
    constructor: Progress,
    start: function () {
        var progDiv = document.createElement("div");
        progDiv.style.position = "absolute";
        progDiv.style.width = "100%";
        progDiv.style.height = window.screen.availHeight + "px";
        progDiv.style.zIndex = 10000;
        progDiv.style.backgroundColor = "#54573e";
        progDiv.style.filter = "alpha(opacity=40)";
        progDiv.id = this.id;
        progDiv.innerHTML = "<div style='margin:auto; FILTER:alpha(opacity=100); margin-top:200px; width:200px;text-align:center;'><img width='64px' height='64px' src='"
            + JBF.getUrl() + "JBFCommon/css/loading.gif' /><div style='FILTER:alpha(opacity=100);color:#00FF00;'>刷新数据......</div></div>";
        document.body.appendChild(progDiv);
    },
    end: function () {
        var that = this;
        setTimeout(function () {
            var prog = JBF.el(that.id);
            if (prog) {
                document.body.removeChild(prog);
            }
        }, 1000);

    }
};

var content;
var contentNew;
var contentOld2;

function initShrink(contentOld, aa, s) {
    contentNew = aa;
    //��ʼ��
    var mintop = contentOld.offsetTop;
    var maxtop = contentOld.offsetTop + contentOld.offsetHeight;
    var maxheight = contentOld.offsetHeight;
    var maxwidth = contentOld.offsetWidth;

    if (JBF.el("contentForSrinkAndMaxDiv")) {
        content = JBF.el("contentForSrinkAndMaxDiv");
    } else {
        content = document.createElement("div");
        content.setAttribute("id", "contentForSrinkAndMaxDiv");
        content.style.background = "blue";
        content.style.filter = "alpha(opacity=10)";
        content.style.border = "1px solid black";
        content.style.position = "absolute";
        content.style.left = "20px";
        content.style.zIndex = "100";
    }
    content.style.top = mintop;
    content.style.width = contentOld.offsetWidth;
    content.style.height = contentOld.offsetHeight;

    document.body.appendChild(content);
    contentOld.style.display = "none";
    shrink(maxtop, s);
}

function shrink(maxtop, s) {
    content.style.pixelHeight -= s;
    content.style.pixelWidth -= s;
    if ((content.style.pixelTop) < maxtop) {
        content.style.pixelTop += 2 * s;
    } else {
        content.style.pixelTop = maxtop;
    }
    if ((content.style.pixelHeight - s) > 0) {
        content.style.pixelHeight -= s;
    } else {
        content.style.pixelHeight = 0;
    }
    if ((content.style.pixelWidth - 2 * s) > 0) {
        content.style.pixelWidth -= 2 * s;
    } else {
        content.style.pixelWidth = 0;
    }

    if (content.style.pixelHeight != 0 || content.style.pixelWidth != 0 || content.style.pixelTop != maxtop) {
        setTimeout("shrink(" + maxtop + "," + s + ")", 1);
    } else {
        contentNew.style.display = "";
        content.removeNode(true);
    }
}

function initMaximum(contentNew, bb, s) {
    contentOld2 = bb;
    //��ʼ��
    var mintop = contentNew.offsetTop;
    var maxtop = contentNew.offsetTop + contentNew.offsetHeight;
    var maxheight = contentNew.offsetHeight;
    var maxwidth = contentNew.offsetWidth;
    if (JBF.el("contentForSrinkAndMaxDiv")) {
        content = JBF.el("contentForSrinkAndMaxDiv");
    } else {
        content = document.createElement("div");
        content.setAttribute("id", "contentForSrinkAndMaxDiv");
        content.style.background = "blue";
        content.style.filter = "alpha(opacity=10)";
        content.style.border = "1px solid black";
        content.style.position = "absolute";
        content.style.left = "20px";
    }
    content.style.top = maxtop;
    content.style.width = 0;
    content.style.height = 0;
    content.style.zIndex = "0";
    document.body.appendChild(content);
    contentNew.style.display = "none";
    s = s * 2;
    maximum(mintop, maxheight, maxwidth, s);
}

function maximum(mintop, maxheight, maxwidth, s) {
    content.style.pixelHeight += s;
    content.style.pixelWidth += s;
    if ((content.style.pixelTop - s) > mintop) {
        content.style.pixelTop -= s;
    } else {
        content.style.pixelTop = mintop;
    }
    if ((content.style.pixelHeight + s) < maxheight) {
        content.style.pixelHeight += s;
    } else {
        content.style.pixelHeight = maxheight;
    }
    if ((content.style.pixelWidth + s) < maxwidth) {
        content.style.pixelWidth += s;
    } else {
        content.style.pixelWidth = maxwidth;
    }

    if (content.style.pixelHeight != maxheight || content.style.pixelWidth != maxwidth || content.style.pixelTop != mintop) {
        setTimeout("maximum(" + mintop + "," + maxheight + "," + maxwidth + "," + s + ")", 1);
    } else {
        content.removeNode(true);
        contentOld2.style.display = "";
    }
}

var keyLength;
//屏蔽帮助菜单F1
window.onhelp = function () {
    return false;
};//修改增加了两个分号
//定义常用快捷键

function objShortCut(obj, keyArray) {
    this.obj = obj;
    this.keyArray = keyArray;
    keyLength = keyArray.length;
    //枚举
    this.keyCodes = [['F1', '112'], ['F2', '113'], ['F3', '114'], ['F4', '115'], ['F6', '117'], ['F7', '118'], ['F8', '119'],
        ['F9', '120'], ['F10', '121'], ['F11', '122'], ['F12', '123'], ['right', '39'], ['up', '38'],
        ['left', '37'], ['down', '40'], ['space', '32'], ['ctrl', '17'], ['shift', '16'], ['alt', '18'],
        ['enter', '13'], ['tab', '9'], ['add', '187'], ['-', '189']];
}

objShortCut.prototype = {
    constructor: objShortCut,
    //快捷键注册
    keyValue: function (shortKey, shortValue) {
        var keyArray = new array();
        var valueArray = new array();
        for (var i = 0; i < keyArray.length; i++) {
            alert(keyArray[i] + "-----" + shortKey);
            if (keyArray[i] == shortKey) {
                alert("该快捷键已使用！");
                return;
            }
        }
        keyArray.push(shortKey);
        valueArray.push(shortValue);
    },

    //获取键值(Ascll码)
    getkeyCodeformName: function (name) {
        for (var i = 0; i < this.keyCodes.length; i++) {
            var keyCode = this.keyCodes[i];
            if (keyCode[0] == name) {
                return keyCode[1];
            }
        }
        return "null";
    },

    //获取a-z的ascll码
    getkeyCodeformChar: function (character) {
        if (character == character.match(/^[a-z]/)) {
            var charCode = character.charCodeAt(0);
            return (charCode - 32);
        }
        return "notChar";
    },

//快捷键实现
    hotkey: function () {
        if (this.obj) {
            this.obj = document;
        }
        this.obj.onkeydown = this.keyDown(this);
    },
    keyDown: function (op) {
        return function () {
            //alert(JBF.getKeyValue(window.event));
            for (var i = 0; i < keyLength; i++) {
                var isPara = 1;
                var j = op.keyArray[i];
                //得到方法名
                var methodName = j.method;
                //得到方法参数数组
                var paras = j.paras;
                //若不存在参数
                if (paras == undefined || paras == null) {
                    isPara = 0;
                }
                //判断是否是组合键
                var indexAdd = (j.key).indexOf('+');
                //alert("indexAdd="+indexAdd);
                if (indexAdd == -1) {
                    //非组合键
                    var defineKey = op.getkeyCodeformName(j.key);
                    if (defineKey != 'null') {
                        var hotkey = JBF.getKeyValue(window.event);
                        if (hotkey == defineKey) {
                            //判断是否存在参数
                            if (isPara == 1) {
                                methodName(paras);
                            } else {
                                methodName();
                            }
                            return false;
                        }
                    } else {
                        alert("此快捷键未定义！");
                    }
                    //判断为组合键
                } else {
                    //组合键ctrl+shift-缩小
                    var combineArray = (j.key).split('+');
                    if (combineArray[1] == 'shift') {
                        if ((event.shiftKey) && (event.ctrlKey)) {
                            if (isPara == 1) {
                                methodName(paras);
                            } else {
                                methodName();
                            }
                        }
                    } else {
                        //其他组合键 ctrl+(a-z)
                        var codeformCharacter = op.getkeyCodeformChar(combineArray[1]);
                        if (event.ctrlKey && (event.keyCode == codeformCharacter)) {
                            if (isPara == 1) {
                                methodName(paras);
                            } else {
                                methodName();
                            }
                        }

                    }
                }
            }
        };            //加了分号
    }
};                    //加了分号


﻿function StartMenu(obj, objName, clickMethod) {
    this.obj = obj;
    this.objName = objName;
    this.clickMethod = clickMethod;
    this.menuHeight = 30;
    this.createDiv = "";
    this.divName = objName + "StartMenu";
    this.menuDiv == null;
    this.defaultImg = "detail.gif";
    this.iframes = [];
    this.width = 207;
    this.startTop = 500;
    this.deeps = 3;
    this.showStatus = false;
    this.menuClickListners = [];
}

StartMenu.prototype = {
    constructor: StartMenu,

    addMenuClickListner: function (listnerObj) {
        this.menuClickListners.push(listnerObj);
    },
    execMenuClickEvent: function (url) {
        for (var i = 0; i < this.menuClickListners.length; i++) {
            var menuClickObj = this.menuClickListners[i];
            try {
                menuClickObj.menuClickListner(url);
            } catch (e) {
                alert(e.message);
            }
            ;
        }
        ;
    },
    show: function () {
        if (this.obj && this.obj.datas) {
            this.createMenu(this.obj.datas);
            if (null == this.menuDiv) {
                this.menuDiv = document.createElement("div");
                //this.menuDiv.style.height="0px";
                document.body.appendChild(this.menuDiv);
            }
            for (var i = 1; i <= this.deeps; i++) {
                var iframe = document.createElement("iframe");
                iframe.className = "menuIframe";
                iframe.setAttribute("frameborder", "0");
                iframe.setAttribute("scrolling", "no");
                document.body.appendChild(iframe);
                this.iframes.push(iframe);
            }
            this.menuDiv.innerHTML = this.createDiv;
        }
    },
    spread: function () {
        this.menuDiv.style.display = "inline";
        for (var i = 0; i < this.menuDiv.childNodes.length; i++) {
            var child = this.menuDiv.childNodes[i];
            if (child.attributes["deep"] && child.attributes["deep"].value && child.attributes["deep"].value == 1) {
                child.style.display = "inline";
                var iframe = this.iframes[0];
                iframe.style.width = this.width + "px";
                iframe.style.height = child.style.height;
                //iframe.style.bottom=child.style.bottom;
                iframe.style.top = this.startTop + "px";
                iframe.style.left = child.style.left;
                iframe.style.display = "inline";
            } else {
                child.style.display = "none";
            }
        }
        this.showStatus = true;
    },
    hide: function () {
        this.menuDiv.style.display = "none";
        for (var i = 0; i < this.iframes.length; i++) {
            this.iframes[i].style.display = "none";
        }
        this.showStatus = false;
    },
    createMenu: function (datas, parentId, root, deep) {
        var showHTML = "";
        if (datas) {
            var height = this.menuHeight * datas.length;
            var parentStr = "";
            var displayStr = "";
            if (parentId) {
                parentStr += " parentId='" + parentId + "'";
                displayStr = " display:none;";
                deep = deep + 1;
            } else {
                parentId = "";
                root = "";
                deep = 1;
                this.startTop = window.screen.height - this.menuHeight * datas.length - 93;
                displayStr = " top:" + this.startTop + "px;left:" + this.obj.left + "px;";
            }
            showHTML += "<div onfocusout='" + this.objName + ".hide()'  deep='" + deep + "' root='" + root + "' subCount='" + datas.length + "' onClick='" + this.objName + ".menuClick();' onMouseOver='" + this.objName + ".showSubMenu()'" + parentStr + " class='mainMenu' style='z-index:1000; height:" + height + "px; " + displayStr + "'><ul>";
            showHTML += this.createMenuLi(datas, parentId, root, deep);
            showHTML += "</ul></div>";
        }
        this.createDiv += showHTML;
    },
    createMenuLi: function (datas, parentId, root, deep) {
        var menuStr = "";
        if (datas) {
            for (var i = 0; i < datas.length; i++) {
                var menu = datas[i];
                var subRoot = root;
                var isRoot = "";
                var isLeaf = "";
                var childCss = "";
                if (!root) {
                    subRoot = menu.code;
                    isRoot = "isRoot='true'";
                }
                var aStr = "";

                if (menu.childNodes && menu.childNodes.length > 0) {
                    this.createMenu(menu.childNodes, menu.code, subRoot, deep);
                    childCss = " class='childMenu'";
                    aStr = "<a " + childCss + "href='javascript:void(0)' " + isRoot + isLeaf + " code='" + menu.code + "' deep='" + deep + "'>" + menu.name + "</a>";
                } else {
                    isLeaf = "isLeaf='true'";
                    if (this.clickMethod) {
                        aStr = "<a onclick='" + this.objName + ".execMenuClickEvent(\"" + menu.url + "\")' " + childCss + "href='javascript:void(0)' " + isRoot + isLeaf + " code='" + menu.code + "' deep='" + deep + "'>" + menu.name + "</a>";
                    } else {
                        aStr = "<a " + childCss + "href='" + menu.url + "' " + isRoot + isLeaf + " code='" + menu.code + "' deep='" + deep + "'>" + menu.name + "</a>";
                    }
                }
                menuStr += "<li class='basic' >" + aStr + "</li>";
            }
        }
        return menuStr;
    },

    /*	createMenuLi:function(datas,parentId,root,deep){
		var menuStr="";
		if(datas){
			for(var i=0;i<datas.length;i++){
				var menu=datas[i];
				alert("code:"+menu.code+":sub:"+menu.childNodes.length);
				var subRoot=root;
				var isRoot="";
				var isLeaf="";
				var childCss="";
				if(!root){
					subRoot=menu.code;
					isRoot="isRoot='true'";
				}
				var aStr="";
				if(menu.subMenu){
					this.createMenu(menu.subMenu,menu.code,subRoot,deep);
					childCss=" class='childMenu'";
					aStr="<a "+childCss+"href='javascript:void(0)' "+isRoot+isLeaf+" code='"+menu.code+"' deep='"+deep+"'>"+menu.showName+"</a>";
				}else{
					isLeaf="isLeaf='true'";
					if(this.clickMethod){
						//alert(this.objName);
						aStr="<a onclick='"+this.objName+".execMenuClickEvent(\""+menu.url+"\")' "+childCss+"href='javascript:void(0)' "+isRoot+isLeaf+" code='"+menu.code+"' deep='"+deep+"'>"+menu.showName+"</a>";
					}else{
						aStr="<a "+childCss+"href='"+menu.url+"' "+isRoot+isLeaf+" code='"+menu.code+"' deep='"+deep+"'>"+menu.showName+"</a>";
					}
				}
				menuStr+="<li class='basic' >"+aStr+"</li>"	;
			}
		}
		return menuStr;
	},*/
    showSubMenu: function () {
        //alert(1);
        var ev = arguments.callee.caller.arguments[0] || window.event;
        var srcDiv = JBF.getEventTarget(ev);
        if (srcDiv.nodeName == "A") {
            var width = srcDiv.clientWidth;
            if (document.all) {
                width = srcDiv.offsetWidth - 2;
            }
            var left = JBF.getAbsX(srcDiv) + width + 2;
            var top = JBF.getAbsY(srcDiv);

            var deep = srcDiv.attributes["deep"].value;
            var ownId = srcDiv.attributes["code"].value;

            /**用来隐藏孙子节点的iframe**/
            for (var i = deep; i < this.deeps; i++) {
                this.iframes[i].style.display = "none";
            }
            /**用来隐藏孙子节点的**/
            var childNodes = this.menuDiv.childNodes;
            deep = parseInt(deep) + 1;
            for (var i = 0; i < childNodes.length; i++) {
                var childDiv = childNodes[i];
                var childDeep = childDiv.attributes["deep"].value;
                if (childDeep == deep) {
                    var childParentId = childDiv.attributes["parentId"].value;//没做空判断。是因为对此属性都进行了设置
                    if (ownId == childParentId) {
                        var menuCount = childDiv.attributes["subCount"].value;
                        childDiv.className = "subMenu";
                        childDiv.style.left = left + "px";
                        var subMenuY = menuCount * this.menuHeight + top;
                        if (subMenuY > (JBF.getScreenHeight() - 30)) {
                            subMenuY = JBF.getAbsY(srcDiv) - ((menuCount - 1) * this.menuHeight);
                        } else {
                            subMenuY = JBF.getAbsY(srcDiv);
                        }
                        childDiv.style.top = subMenuY - 1 + "px";
                        childDiv.style.display = "";

                        var iframe = this.iframes[deep - 1];
                        iframe.style.display = "inline";
                        iframe.style.left = left + "px";
                        iframe.style.top = subMenuY - 1 + "px";
                        iframe.style.width = this.width + "px";
                        iframe.style.height = childDiv.style.height;
                    } else {
                        childDiv.style.display = "none";
                    }
                } else if (childDeep > deep) {
                    childDiv.style.display = "none";
                }
            }
        }

    },
    menuClick: function () {
        var ev = arguments.callee.caller.arguments[0] || window.event;
        var srcDiv = JBF.getEventTarget(ev);
        if (srcDiv.attributes["isLeaf"]) {
            this.hide();
        }
    }
}
﻿
		/**
         *交易列表横向展示组件
         *使用方法：
         *1.创建并指定展示该组件的DIV
         *2.创建TransBar对象：var transBar  = new TransBar(pLiveDatas,pTransShowSize,pObjName,pLinkAgeMethod);
         *   pLiveDatas:交易ID数组，组件的数据源
         *   pTransShowSize：横向展示的交易个数，多余的交易将被隐藏，可通过左右移动查看隐藏交易
         *   pObjName：创建的TransBar对像的名称，如本例中为： transBar
         *   pLinkAgeMethod：选择交易后触发的回调函数，回调函数名称可自定义，只能有一个参数，为交易ID
         *   尚路彦
         */
        function TransBar(pLiveDatas, pTransShowSize, pObjName, pLinkAgeMethod, pTaskRefreshMethod) {
            this.refreshInterval = 60000;
            this.liveDatas = pLiveDatas;
            this.rightList = new Array();
            this.leftList = new Array();
            this.transShowSize = pTransShowSize;
            this.objName = pObjName;
            this.linkAgeMethod = pLinkAgeMethod;
            this.taskRefreshMethod = pTaskRefreshMethod;
            this.imgMoveLeft = "background:url('" + G_WebRoot + "JBFCommon/css/trs_move_left.gif');width:36px;height:20px;background-color:Transparent;border-color:Transparent;border-style:None";
            this.imgMoveRight = "background:url('" + G_WebRoot + "JBFCommon/css/trs_move_right.gif');width:36px;height:20px;background-color:Transparent;border-color:Transparent;border-style:None";
            this.imgTrsMoveLeft = G_WebRoot + "JBFCommon/css/trs_move_left.gif";
            this.imgTrsMoveRight = G_WebRoot + "JBFCommon/css/trs_move_right.gif";
            this.imgTrsMoveLeftIncomming = G_WebRoot + "JBFCommon/css/trs_move_left_incomming.gif";
            this.imgTrsMoveRightIncomming = G_WebRoot + "JBFCommon/css/trs_move_right_incomming.gif";
            //this.imgTrsWaiting = "background:url('css/trs_btn_waiting.jpg');width:50px;height:27px";
            //this.imgTrsIncomming = "background:url('css/trs_btn_selected.jpg');width:50px;height:27px";
            //this.imgTrsSelected = "background:url('css/trs_btn_incomming.gif');width:50px;height:27px";
            this.imgTrsWaiting = G_WebRoot + "JBFCommon/css/trs_btn_waiting.gif";
            this.imgTrsIncomming = G_WebRoot + "JBFCommon/css/trs_btn_incomming.gif";
            this.imgTrsSelected = G_WebRoot + "JBFCommon/css/trs_btn_selected.gif";

            this.imgWidth = "56px";
            this.imgHeight = "20px";
            this.flushing = true;
        }

/**
 *设置是否更新交易的状态
 *pFlushing,布尔类型
 */
TransBar.prototype.setFlushing = function (pFlushing) {
    this.flushing = pFlushing;
}
/**
 *展示左右移动的按钮
 */
TransBar.prototype.showMoveButtons = function () {
    if (this.rightList.length > 0) {
        document.getElementById('trans_btn_left').value = this.rightList.length + "   ";
    } else document.getElementById('trans_btn_left').value = "  ";

    if (this.leftList.length > 0) {
        document.getElementById('trans_btn_right').value = "   " + this.leftList.length;
    } else {
        document.getElementById('trans_btn_right').value = "  ";
    }
}
/**
 *向左移动多个位置
 *times:移动的次数，一次移动一个位置
 */
TransBar.prototype.moveToLeft = function (times) {

    for (var n = 0; n < times; n++) {
        if (this.liveDatas.length < this.transShowSize) return;
        if (this.rightList.length == 0) break;
        this.leftList.push(document.getElementById("trans_seq_td_1").childNodes[0]);//首个进站
        //依次移动
        for (var i = 2; i <= this.transShowSize; i++) {
            this.moveTwoToOneNode(i - 1, i);
        }
        //右侧列表

        this.setShowableNode(this.transShowSize, this.rightList.shift());
        this.showMoveButtons();
    }

    this.changeMoveBtnState();
}
/**
 *向右移动多个位置
 *times:移动的次数，一次移动一个位置
 */
TransBar.prototype.moveToRight = function (times) {

    for (var n = 0; n < times; n++) {

        if (this.leftList.length == 0) break;
        var strInnerHtml = document.getElementById("trans_seq_td_" + this.transShowSize);
        if (strInnerHtml.childNodes != null && strInnerHtml.childNodes.length > 0) {
            this.rightList.unshift(strInnerHtml.childNodes[0]);//可见最大致进站
        }
        //依次移动
        for (var i = this.transShowSize; i > 1; i--) {
            this.moveTwoToOneNode(i, i - 1);
        }

        this.setShowableNode(1, this.leftList.pop());
        this.showMoveButtons();
    }
    this.changeMoveBtnState();
}
/**
 *为指定的节点设置交易按钮
 *nodeIndex:节点索引，整型数字
 *nodeInfo:交易按钮对象
 */
TransBar.prototype.setShowableNode = function (nodeIndex, nodeInfo) {
    var tdComp = document.getElementById("trans_seq_td_" + nodeIndex);
    if (nodeInfo != null) {
        if (tdComp.childNodes.length > 0) {
            tdComp.childNodes[0].replaceNode(nodeInfo);
        } else {
            tdComp.appendChild(nodeInfo);
        }
    } else {
        tdComp.removeChild(tdComp.childNodes[0]);
    }
}
/**
 *    将一个节点的交易按钮移动到另一个节点上
 *   index1:当前节点
 *   index2:被移动的节点
 */
TransBar.prototype.moveTwoToOneNode = function (index1, index2) {
    if (document.getElementById("trans_seq_td_" + index2).childNodes.length > 0) {
        this.setShowableNode(index1, document.getElementById("trans_seq_td_" + index2).childNodes[0]);
    }
}
/**
 *指定的交易是否存在
 *dataInfo:交易ID
 */
TransBar.prototype.transExists = function (dataInfo) {
    for (var i = 0; i < this.liveDatas.length; i++) {
        if (this.liveDatas[i] == dataInfo) {
            return true;
        }
    }
    return false;
}
TransBar.prototype.clearTransData = function () {
    for (var i = 0; i < this.transShowSize; i++) {
        document.getElementById("trans_seq_td_" + (i + 1)).innerHTML = "";
    }

    while (this.liveDatas.length > 0) {
        var data = this.liveDatas.pop();
    }
    this.rightList = new Array();
    this.leftList = new Array();
}
/**
 *增加一个交易按钮
 *dataInfo:交易ID
 */
TransBar.prototype.addTransComp = function (dataInfo, isSelected, stateCode, stateName) {
    if (this.transExists(dataInfo.scanSeqNo)) {
        return;
    }
    this.liveDatas.push(dataInfo.scanSeqNo);
    //this.leftList.push(this.createTransBtnComp(dataInfo));
    //this.moveToRight(1);
    //如果可是按钮还未被占满，往后站；如果占满了，左侧进站，左移this.transShowSize次；datainfo站第this.transShowSize位
    var occupiedIndex = this.getLastOccupiedIndex();

    if (occupiedIndex < this.transShowSize) {
        if (occupiedIndex < 1)
            occupiedIndex = 0;
        document.getElementById("trans_seq_td_" + (occupiedIndex + 1)).appendChild(this.createTransBtnComp(dataInfo, stateCode, stateName));
    } else {
        this.leftList.push(document.getElementById("trans_seq_td_1").childNodes[0]);//首个进站
        //依次
        for (var i = 2; i <= this.transShowSize; i++) {
            this.moveTwoToOneNode(i - 1, i);
        }

        this.setShowableNode(this.transShowSize, this.createTransBtnComp(dataInfo, stateCode, stateName));
    }
    this.showMoveButtons();
    if (typeof (isSelected) == "undefined" || isSelected == true) {
        this.setSelectedState(document.getElementById(dataInfo.scanSeqNo));
    }
}
/**
 *获取被交易按钮占位的最大索引号
 */
TransBar.prototype.getLastOccupiedIndex = function () {
    for (var i = 0; i < this.transShowSize; i++) {

        var btnInTd = document.getElementById("trans_seq_td_" + (i + 1));
        if (btnInTd.childNodes == null || btnInTd.childNodes.length == 0) {
            return i;
        }
        if (i == this.transShowSize - 1) {
            return this.transShowSize;
        }
    }

}
/**
 *创建一个交易按钮
 *dataInfo:交易ID
 */
TransBar.prototype.createTransBtnComp = function (trsData, stateCode, stateName) {
    var dataInfo = trsData.scanSeqNo;
    var dataId = trsData.flowId;
    var bizTypeId = trsData.bizCode;
    var tk_state = null;
    var tk_state_name = null;
    var stateImg = null;
    if (typeof (stateCode) == "undefined" || stateCode == null || stateCode == "" || stateCode == "waiting") {
        tk_state = "";
        tk_state_name = "待处理";
        stateImg = this.imgTrsSelected;
    } else {
        //if(stateCode!="F"){
        //	tk_state = stateCode;
        //	tk_state_name = stateName;
        //	stateImg = this.imgTrsIncomming;
        //}else{
        tk_state = stateCode;
        tk_state_name = stateName;
        stateImg = this.imgTrsWaiting;
        //}
    }
    var strTransSeq = dataInfo.substring(dataInfo.length - 6, dataInfo.length);
    var transBTN = document.createElement("INPUT");
    transBTN.id = dataInfo;
    transBTN.setAttribute("tips", "流水号:" + dataInfo + "<br>任&nbsp;&nbsp;务:" + tk_state_name);
    transBTN.onmouseover = function () {
        tip.start(transBTN);
    };
    transBTN.onclick = this.transBtnOnclick(this, transBTN);
    transBTN.type = "BUTTON";
    transBTN.value = strTransSeq;
    transBTN.style.background = "url(" + stateImg + ")";
    transBTN.style.width = this.imgWidth;
    transBTN.style.height = this.imgHeight;
    transBTN.style.backgroundColor = "Transparent";
    transBTN.style.borderColor = "Transparent";
    transBTN.style.borderStyle = "none";
    transBTN.name = tk_state;
    transBTN.setAttribute("flowId", dataId);
    transBTN.setAttribute("bizTypeId", bizTypeId);
    return transBTN;
}
TransBar.prototype.getReturnValue = function (btnComp) {
    return {'scanSeqNo': btnComp.id, 'flowId': btnComp.attributes['flowId'].nodeValue};
}
/**
 *交易按钮的单击时间触发函数
 */
TransBar.prototype.transBtnOnclick = function (obj, btnComp) {
    return function () {
        obj.setSelectedState(btnComp);//设置该按钮为被选中状态
        //var data = obj.getReturnValue(btnComp);

        obj.executeLinkAge(btnComp.id, btnComp.attributes['flowId'].nodeValue, btnComp.attributes['bizTypeId'].nodeValue);//执行回调函数

    }
}
/**
 *鼠标滑过时提示交易信息
 */
TransBar.prototype.tipData = function (obj, btnComp) {
    return function () {
        obj.start(btnComp);
    }
}
/**
 *设置交易按钮为被选中状态
 *btnComp:交易按钮对象
 */
TransBar.prototype.setSelectedState = function (btnComp) {
    //交易按钮列表状态检查，如遇被选中按钮，清除选中状态
    for (var i = 0; i < this.transShowSize; i++) {

        var btnInTd = document.getElementById("trans_seq_td_" + (i + 1)).childNodes[0];
        if (btnInTd != null) {
            var btnComp1 = document.getElementById(btnInTd.id);
            if (btnComp1.style.background.indexOf(this.imgTrsSelected) > 0) {
                btnComp1.style.background = "url(" + this.imgTrsWaiting + ")";
            }
        }
    }
    //左侧列表按钮状态检查，如遇被选中按钮，清除选中状态
    for (var i = 0; i < this.leftList.length; i++) {
        var btn = this.leftList[i];

        if (btn.style.background.indexOf(this.imgTrsSelected) > 0) {
            btn.style.background = "url(" + this.imgTrsWaiting + ")";
        }
    }
    //右侧列表按钮状态检查，如遇被选中按钮，清除选中状态
    for (var i = 0; i < this.rightList.length; i++) {
        var btn = this.rightList[i];
        if (btn.style.background.indexOf(this.imgTrsSelected) > 0) {
            btn.style.background = "url(" + this.imgTrsWaiting + ")";
        }
    }
    //设置该按钮为选中状态
    btnComp.style.background = "url(" + this.imgTrsSelected + ")";

}
/**
 *检查指定交易是否在显示列表中
 *transID:交易ID
 */
TransBar.prototype.isShowTrans = function (transID) {

    if (this.getShowIndex(transID) > -1) {
        return true;
    }
    return false;
}
/**
 *获取指定交易在显示列表中的位置，如果不在显示列表中，返回-1
 *transID:交易ID
 */
TransBar.prototype.getShowIndex = function (transID) {
    for (var i = 0; i < this.transShowSize; i++) {

        var btnInTd = document.getElementById("trans_seq_td_" + (i + 1));
        if (btnInTd.childNodes != null && btnInTd.childNodes.length > 0) {
            if (btnInTd.childNodes[0].id == transID) {
                return i + 1;
            }
        }
    }
    return -1;
}
/**
 *从数组中删除元素
 */
TransBar.prototype.deleteformArray = function (arrayData, data) {
    for (var i = 0; i < arrayData.length; i++) {
        if (arrayData[i] == data) {
            arrayData.splice(i, 1);
        }
    }
}
/**
 *判断指定元素是否在数组中
 */
TransBar.prototype.isDataInArray = function (arrayData, data) {
    for (var i = 0; i < arrayData.length; i++) {
        if (arrayData[i] == data) {
            return true;
        }
    }
    return false;
}
/**
 *检测指定交易是否在交易按钮列表中
 *transID:交易ID
 */
TransBar.prototype.isDataInList = function (arrayData, transID) {
    for (var i = 0; i < arrayData.length; i++) {
        if (arrayData[i].outerHTML.indexOf(transID) > 0) {
            return true;
        }
    }
    return false;
}
/**
 *获取指定交易的TD索引
 *transID:交易ID
 */
TransBar.prototype.getTdIndex = function (transID) {
    for (var i = 0; i < this.transShowSize; i++) {
        var tdComp = document.getElementById("trans_seq_td_" + (i + 1));
        if (tdComp.childNodes[0].id == transID)
            return i;
    }
    return -1;
}
/**
 *从交易按钮数组中获取交易按钮对象
 *transID:交易ID
 */
TransBar.prototype.getNodeformList = function (arrayData, transID) {
    for (var i = 0; i < arrayData.length; i++) {
        if (arrayData[i].outerHTML.indexOf(transID) > 0) {
            return arrayData[i];
        }
    }
    return null;
}
//删除按钮方法
//业务完成后，调用该方法从业务列表中删除
TransBar.prototype.removeTrans = function (transID) {
    var btnTransID = document.getElementById(transID);
    if (btnTransID == null) return;
    this.deleteformArray(this.liveDatas, transID);

    //依次
    var indexTd = this.getShowIndex(transID);
    if (indexTd == 0) {//左移
        if (this.leftList.length > 0) {
            //左侧有，右移
            this.setShowableNode(1, this.leftList.pop());
        } else if (this.liveDatas.length > 0) {
            //左侧没有，从右往左移
            for (var i = 1; i < this.transShowSize; i++) {
                this.moveTwoToOneNode(i, i + 1);
            }
            if (this.rightList.length > 0) {
                this.setShowableNode(this.transShowSize, this.rightList.shift());
            }
        }
    } else if (indexTd > 0) {//如果左侧有，右移；否则，左移；
        /*				if(this.leftList.length>0){
					//右移
					for(var i = indexTd+1;i>1;i--){
						this.moveTwoToOneNode(i,i-1);
					}
				}else{*/
        if (this.rightList.length > 0) {
            //左移
            for (var i = indexTd; i < this.transShowSize; i++) {
                this.moveTwoToOneNode(i, i + 1);
            }
            this.setShowableNode(this.transShowSize, this.rightList.shift());
        } else {
            this.setShowableNode(indexTd, null);
            for (var i = indexTd; i < this.transShowSize; i++) {
                this.moveTwoToOneNode(i, i + 1);
            }
        }
    }
    /*
				this.setShowableNode(1,this.leftList.pop());
			}else{//在左右列表中

			}*/
    this.showMoveButtons();
    this.changeMoveBtnState();

}
/**
 *执行回调函数
 *transID:交易ID，传给回调函数的参数
 */
TransBar.prototype.executeLinkAge = function (scanSeqNo, flwId, bizTypeName) {
    if (this.linkAgeMethod != null) {
        eval(this.linkAgeMethod + "('" + scanSeqNo + "','" + flwId + "','" + bizTypeName + "')");
    }
}
/**
 *执行回调函数:任务刷新函数
 *transID:交易ID，传给回调函数的参数
 *返回任务状态
 */
TransBar.prototype.executeRefreshMethod = function (transID) {
    if (this.taskRefreshMethod != null) {
        return eval(this.taskRefreshMethod + "('" + transID + "')");
    }
    return null;
};

/**
 *展示指定交易
 *transID：交易ID
 */
TransBar.prototype.showSelectedTrans = function (transID) {
    //如果ID为当前显示项，更改颜色为红色；
    //如果ID为隐藏项，从左右列表删除，调用增加
    if (transID == null || transID == "") return;
    if (this.isShowTrans(transID)) {
        var btnComp = document.getElementById(transID);
        this.setSelectedState(btnComp);
        this.executeLinkAge(transID, btnComp.attributes['flowId'].nodeValue, btnComp.attributes['bizTypeId'].nodeValue);
    } else {
        if (this.isDataInList(this.rightList, transID)) {
            var nList = this.rightList.length;
            for (var i = 0; i < nList; i++) {
                this.moveToLeft(1);
                if (document.getElementById("trans_seq_td_" + this.transShowSize).childNodes[0].id == transID) {

                    this.setSelectedState(document.getElementById(transID));
                    break;
                }
            }
        } else if (this.isDataInList(this.leftList, transID)) {
            var nList = this.leftList.length;
            for (var i = 0; i < nList; i++) {
                this.moveToRight(1);
                if (document.getElementById("trans_seq_td_1").childNodes[0].id == transID) {
                    this.setSelectedState(document.getElementById(transID));
                    break;
                }
            }
        }
    }

}
/**
 *使用颜色变化来提示，目前该方法已经废弃
 */
TransBar.prototype.transIncomingState = function (transID) {
    var transBtn = document.getElementById(transID);

    if (transBtn != null) {

        if (transBtn.style.backgroundColor != "red") {
            if (transBtn.style.backgroundColor == "yellow") {
                transBtn.style.backgroundColor = "green";
            } else {
                transBtn.style.backgroundColor = "yellow"
            }
        }
    } else {

    }

}
TransBar.prototype.changeMoveBtnState = function () {
    var btnRight = document.getElementById('trans_btn_right');
    var btnLeft = document.getElementById('trans_btn_left');
    if (this.isNewTaskInList(this.leftList)) {
        btnRight.style.background = "url(" + this.imgTrsMoveRightIncomming + ")";
    } else {
        btnRight.style.background = "url(" + this.imgTrsMoveRight + ")";
    }
    if (this.isNewTaskInList(this.rightList)) {
        btnLeft.style.background = "url(" + this.imgTrsMoveLeftIncomming + ")";
    } else {
        btnLeft.style.background = "url(" + this.imgTrsMoveLeft + ")";
    }
}
/**
 *判断是否有新任务在列表中
 */
TransBar.prototype.isNewTaskInList = function (dataList) {
    for (var i = 0; i < dataList.length; i++) {
        if (dataList[i].style.background == "url(" + this.imgTrsIncomming + ")") {
            return true;
        }
    }
    return false;
}
/**
 *刷新交易按钮状态
 *transID:交易ID
 */
TransBar.prototype.refreshTransState = function (transID) {
    var transBtn = document.getElementById(transID);
    if (transBtn == null) {

        transBtn = this.getNodeformList(this.leftList, transID);
        if (transBtn == null) {
            transBtn = this.getNodeformList(this.rightList, transID);

        }

    }

    //获取服务器交易状态，如果状态有变化，按钮跳动
    if (transBtn != null) {
        var taskState = this.executeRefreshMethod(transID);
        if (taskState != null) {
            transBtn.tips = "流水号:" + transID + "<br>任&nbsp;&nbsp;务:" + taskState;
            if (transBtn.style.background.indexOf(this.imgTrsSelected) < 0) {
                transBtn.style.background = "url(" + this.imgTrsIncomming + ")";
                this.playAlarmSound();
            }

        }

        //如果交易按钮在左右列表中，更新左右列表按钮的状态
        transBtn = null;
        transBtn = document.getElementById(transID);
        if (transBtn == null) {//不在显示的交易区中
            transBtn = this.getNodeformList(this.rightList, transID);
            if (transBtn != null) {//在右侧菜单中，更新右向按钮状态
                document.getElementById('trans_btn_left').style.background = "url(" + this.imgTrsMoveLeftIncomming + ")";
            } else {//在左侧列表中，更新左向按钮状态
                transBtn = this.getNodeformList(this.leftList, transID);
                if (transBtn != null) {
                    document.getElementById('trans_btn_right').style.background = "url(" + this.imgTrsMoveRightIncomming + ")";
                }
            }
        }

    }

}

/**
 *刷新交易按钮状态
 *transID:交易ID
 */
TransBar.prototype.setTransState = function (transID, stateCode, stateName) {
    var transBtn = document.getElementById(transID);
    if (transBtn == null) {

        transBtn = this.getNodeformList(this.leftList, transID);
        if (transBtn == null) {
            transBtn = this.getNodeformList(this.rightList, transID);

        }

    }

    //获取服务器交易状态，如果状态有变化，按钮跳动
    if (transBtn != null) {
        transBtn.tips = "流水号:" + transID + "<br>任&nbsp;&nbsp;务:" + stateName;
        if (transBtn.style.background.indexOf(this.imgTrsSelected) < 0) {
            transBtn.style.background = "url(" + this.imgTrsIncomming + ")";
            this.playAlarmSound();
        }

        //如果交易按钮在左右列表中，更新左右列表按钮的状态
        transBtn = null;
        transBtn = document.getElementById(transID);
        if (transBtn == null) {//不在显示的交易区中
            transBtn = this.getNodeformList(this.rightList, transID);
            if (transBtn != null) {//在右侧菜单中，更新右向按钮状态
                document.getElementById('trans_btn_left').style.background = "url(" + this.imgTrsMoveLeftIncomming + ")";
            } else {//在左侧列表中，更新左向按钮状态
                transBtn = this.getNodeformList(this.leftList, transID);
                if (transBtn != null) {
                    document.getElementById('trans_btn_right').style.background = "url(" + this.imgTrsMoveRightIncomming + ")";
                }
            }
        }

    }

}

TransBar.prototype.addTransStateTimer = function (transID) {
    window.setInterval(this.objName + ".refreshTransState('" + transID + "')", this.refreshInterval);
}
/**
 *创建交易提醒声音组件
 */
TransBar.prototype.createTaskAlertComp = function (divComp) {
    var soundComp = document.createElement("BGSOUND");
    soundComp.id = "alertSoundComp";
    divComp.appendChild(soundComp);

}
/**
 *播放交易提醒的声音
 */
TransBar.prototype.playAlarmSound = function () {
    document.getElementById("alertSoundComp").src = "sound/trs_bar_alarm.wav";
}

/**
 *初始化交易列表横向展示组件，该组件被创建在DIV中
 *divID:外部包含该组件的DIV ID
 */
TransBar.prototype.initComp = function (divID) {
    var tableCompStr = "<table><tr><td  align = \"center\" id=\"trans_btn_td_right\"><input type=\"button\" name=\"trans_btn_right\" style=\"" + this.imgMoveRight + "\" id = \"trans_btn_right\"  value=\" \" onclick = \"" + this.objName + ".moveToRight(" + this.transShowSize + ")\"/></td>";

    if (this.liveDatas != null) {
        for (var i = 0; i < this.liveDatas.length; i++) {
            var strTransSeq = this.liveDatas[i].substring(12, this.liveDatas[i].length);
            if (i < this.transShowSize) {

                var tdStr = "<td width = \"50\"  align = \"center\" id=\"trans_seq_td_" + (i + 1) + "\">" + this.createTransBtnComp(this.liveDatas[i]) + "</td>";

                tableCompStr = tableCompStr + tdStr;
            } else {
                this.rightList.push(this.createTransBtnComp(this.liveDatas[i]));
            }

        }
        if (this.liveDatas.length < this.transShowSize) {
            for (var i = this.liveDatas.length; i < this.transShowSize; i++) {
                var tdStr = "<td width = \"50\"  align = \"center\" id=\"trans_seq_td_" + (i + 1) + "\"></td>";
                tableCompStr = tableCompStr + tdStr;
            }
        }

    }
    tableCompStr = tableCompStr + "<td  align = \"center\" id=\"trans_btn_td_left\"><input type=\"button\" name=\"trans_btn_left\" style=\"" + this.imgMoveLeft + "\" id = \"trans_btn_left\"  value=\" \" onclick = \"" + this.objName + ".moveToLeft(" + this.transShowSize + ")\"/></td></tr></table>";
    var tranListDiv = document.getElementById(divID);
    tranListDiv.innerHTML = tableCompStr;
    this.showMoveButtons();
    this.createTaskAlertComp(tranListDiv);
}
/**
 *消息提示组件
 */
var tip = {
    $: function (ele) {
        if (typeof (ele) == "object")
            return ele;
        else if (typeof (ele) == "string" || typeof (ele) == "number")
            return document.getElementById(ele.toString());
        return null;
    },
    mousePos: function (e) {
        var x, y;
        var e = e || window.event;
        return {
            x: e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft,
            y: e.clientY + document.body.scrollTop + document.documentElement.scrollTop
        };
    },
    start: function (obj) {
        var self = this;
        var t = self.$("mjs:tip");
        var mouse = self.mousePos(e);
        var e = e || window.event;
        var overPojo = JBF.getEventTarget(e);
        t.style.left = JBF.getAbsX(overPojo) + overPojo.clientWidth + 'px';
        t.style.top = JBF.getAbsY(overPojo) - overPojo.clientHeight - 40 + 'px';
        t.innerHTML = obj.attributes["tips"].nodeValue;
        t.style.display = '';
        obj.onmouseout = function () {
            t.style.display = 'none';
        };
    }
}
﻿

/**
 * isLastNode:是否是最后一个节点
 *rootStatus:根的状态，是否是最后一个节点(1:不是最后节点，0：是最后节点)
 *nodeStatus:节点状态（主要为生成节点的图标，如是否是最后一个,L:最后一个，T:中间的）
 *nodeType:节点类型（radio/checkbox/none）最后可以不去考虑
 *icon:节点的自定义图标
 *depth：节点所处深度
 **/
/**
 *
 */
function TreeNode(blankCount, isLastNode, node, parentId, rootStatus, nodeStatus, nodeType, icon, depth, treeName, checkStatus, isShowCheck) {
    this.rootPath = JBF.getUrl() + "JBFCommon/css/";
    this.rootIcon = this.rootPath + 'root.png';
    this.openRootIcon = this.rootPath + 'openfoldericon.png';
    this.folderIcon = this.rootPath + 'foldericon.png';
    this.openFolderIcon = this.rootPath + 'openfoldericon.png';
    this.fileIcon = this.rootPath + 'file.png';
    this.iIcon = this.rootPath + 'I.png';
    this.lIcon = this.rootPath + 'L.png';
    this.lMinusIcon = this.rootPath + 'Lminus.png';
    this.lPlusIcon = this.rootPath + 'Lplus.png';
    this.tIcon = this.rootPath + 't.png';
    this.tMinusIcon = this.rootPath + 'Tminus.png';
    this.tPlusIcon = this.rootPath + 'Tplus.png';
    this.blankIcon = this.rootPath + 'blank.png';
    this.defaultText = this.rootPath + 'node text';

    this.blankCount = blankCount;
    this.isLastNode = isLastNode;
    this.nodeData = node;
    this.id = node["id"];
    this.code = node["code"];
    this.name = node["name"];
    this.leval = node["leval"];
    this.parentId = parentId;
    this.isLeaf = node["isLeaf"];
    this.children = node["children"];
    this.rootStatus = rootStatus;
    this.nodeStatus = nodeStatus;
    this.nodeType = nodeType;
    this.icon = icon;
    this.depth = depth;
    this.treeName = treeName;

    this.HTML = "";
    this.childHTML = "";
    this.spreadStatus = false;//节点的展开状态
    this.nodes = [];
    this.checkStatus = checkStatus;
    this.isShowCheck = isShowCheck;
    this.subCheckedLength = 0;

    this.nodeDivName = treeName + this.id + "div";//节点的Div名称
    this.spreadImgName = this.treeName + "Spread" + this.id;//展开图标名称
    this.folderImgName = this.treeName + "Folder" + this.id;//展开文件夹名称
    this.checkboxName = this.treeName + "Check" + this.id;
    this.selectedNodeName = this.treeName + "Selected" + this.id;
    this.radioName = this.treeName + "radioNode";
    this.checkName = this.treeName + "checkNode";
}

TreeNode.prototype = {
    constructor: TreeNode,
    //先把自已转换成html
    toHTML: function () {
        if (this.HTML.length <= 0) {
            var nodeStr = "<div class='TreeNode' ondblclick='" + this.treeName + ".nodeDbClick()' onclick=" + this.treeName + ".extendNode(this,'" + this.id + "',event) nodeValue='" + this.id + "' id='" + this.nodeDivName + "' name='" + this.nodeDivName + "'>";//可以增加事件了
            if (this.depth <= 0) {
                nodeStr += this.getRootNode();
            } else {
                for (var i = 0; i < this.blankCount; i++) {
                    nodeStr += "<img src='" + this.blankIcon + "'/>";
                }
                for (var i = (1 + this.blankCount); i < this.depth; i++) {
                    nodeStr += "<img src='" + this.iIcon + "'/>";
                }
                nodeStr += this.getNodeImg();
            }
            var aClick = "onclick='" + this.treeName + ".radioNode(this,event,\"" + this.id + "\"); return false;'";
            if (this.nodeType == "checkbox") {
                aClick = "onclick='" + this.treeName + ".linkCheckNode(this,event,\"" + this.id + "\"); return false;'";
            }
            nodeStr += "<a id='" + this.selectedNodeName + "'  href='javascript:void(0)' " + aClick + ">" + this.code + "-" + this.name + "</a></div>";
            this.HTML = nodeStr;
        }
        return this.HTML;
    },
    getRootNode: function () {
        return this.getNodeCheck() + "<img width='14px' height='14px' src='" + this.rootIcon + "'/>";
    },
    getNodeCheck: function () {//得到checkbox或radio的前导选择框
        if (this.isShowCheck && this.nodeType) {
            if (this.nodeType == "radio") {//选中情况在radio中没有作用
                return "<input type='radio' onclick='" + this.treeName + ".radioNode(this,event,\"" + this.id + "\")' id='" + this.checkboxName + "' name='" + this.radioName + "'  value='" + this.id + "'>";
            } else if (this.nodeType == "checkbox") {
                var checkedStr = " ";
                if (this.checkStatus) {
                    checkedStr = "checked='checked' ";
                }
                return "<input " + checkedStr + " onclick='" + this.treeName + ".checkNode(this,event,\"" + this.id + "\")' type='checkbox' id='" + this.checkboxName + "' name='" + this.checkName + "' value='" + this.id + "'>";//可以增加事件
            }
        }
        return "";
    },
    getNodeImg: function () {
        if (this.children && this.children.length > 0) {//非叶子节点
            if (!this.spreadStatus) {//是否打开(返回不同的图标)
                var icon = this.tPlusIcon;
                if (this.isLastNode) {
                    icon = this.lPlusIcon;
                }
                return "<img status='1' id='" + this.spreadImgName + "' src='" + icon + "'/>" + this.getNodeCheck() + "<img status='1' id='" + this.folderImgName + "' src='" + this.folderIcon + "'/>";
            } else {
                var icon = this.tMinusIcon;
                if (this.isLastNode) {
                    icon = this.lMinusIcon;
                }
                return "<img status='0' id='" + this.spreadImgName + "' src='" + icon + "'/>" + this.getNodeCheck() + "<img status='0' id='" + this.folderImgName + "' src='" + this.openFolderIcon + "'/>";
            }
        } else if (this.isLeaf) {//叶子节点
            if (this.nodeStatus == "T") {
                return "<img id='" + this.spreadImgName + "' src='" + this.tIcon + "'/>" + this.getNodeCheck() + "<img id='" + this.folderImgName + "' src='" + this.fileIcon + "'/>";
            } else if (this.nodeStatus == "L") {
                return "<img id='" + this.spreadImgName + "' src='" + this.lIcon + "'/>" + this.getNodeCheck() + "<img id='" + this.folderImgName + "' src='" + this.fileIcon + "'/>";
            }
            return "";
        } else {
            if (this.nodeStatus == "T") {
                return "<img id='" + this.spreadImgName + "' src='" + this.tIcon + "'/>" + this.getNodeCheck() + "<img src='" + this.fileIcon + "'/>";
            } else if (this.nodeStatus == "L") {
                return "<img id='" + this.spreadImgName + "' src='" + this.lIcon + "'/>" + this.getNodeCheck() + "<img src='" + this.fileIcon + "'/>";
            }
            return "";
        }
    }
};

function JBFTree(treeStructure, treeName) {
    this.treeStructure = treeStructure;
    this.rootCode = "";
    this.rootName = "点击展开";
    this.treeName = treeName;
    this.nodes = [];//用来存放节点(生成的包括父子关系的节点信息)
    this.newNodes = [];//用来成成非递归的节点。
    this.radioValue = "";
    this.selectedNode = "";
    if (this.treeStructure) {
        //lazy:是否懒加载  lazyType: 懒加载类型是通过(ajax,data[数据本身]) lazyUrl：如果是lazy&&lazyType=url时则要时行ajax的请求动态加载
        //this.treeStructure={data:treeObj,selectType:"checkbox",lazy:"true",lazyType:"data",lazyUrl:"",click:treeOnClick}
        this.selectType = this.treeStructure.selectType ? this.treeStructure.selectType : "generic";//树的类型radio/checkbox/generic
        this.lazy = this.treeStructure.lazy ? this.treeStructure.lazy : false;//是否进行懒加载
        this.lazyType = this.treeStructure.lazyType ? this.treeStructure.lazyType : "data";//懒加载的型式，是数据加载还是url加载
        this.lazyUrl = this.treeStructure.lazyUrl ? this.treeStructure.lazyUrl : "";//如果是懒加载，加载的url
        this.treeData = this.treeStructure.data ? this.treeStructure.data : [];//如果是数据加载，加载的数据
        if (typeof (this.treeStructure.treeOnClick) == "function") {//节点上的单击事件
            this.treeOnClick = this.treeStructure.treeOnClick;
        } else if (typeof (this.treeStructure.treeOnClick) == "string") {
            this.treeOnClick = eval(this.treeStructure.treeOnClick.replace("(", "").replace(")", ""));
        }
        if (typeof (this.treeStructure.treeDbClick) == "function") {//节点上的双击事件
            this.treeDbClick = this.treeStructure.treeDbClick;
        } else if (typeof (this.treeStructure.treeDbClick) == "string") {
            this.treeDbClick = eval(this.treeStructure.treeDbClick.replace("(", "").replace(")", ""));
        }
        if (this.treeStructure.rootObj) {
            this.rootCode = this.treeStructure.rootObj.code;
            this.rootName = this.treeStructure.rootObj.name;
        }
        this.isPass = this.treeStructure.isPass ? this.treeStructure.isPass : false;
    }

}

JBFTree.prototype = {
    constructor: JBFTree,
    show: function () {
        if (this.treeData) {
            var isShowNode = true;
            if (this.treeData.constructor == Array) {
                ;
                if (this.treeData.length > 1) {//如果是数组且有多个节点时，则要制造一个虚拟节点（this.rootCode this.rootName）;
                    isShowNode = false;
                    for (var i = 0; i < this.treeData.length; i++) {
                        this.treeData[i].parentId = this.rootCode;
                    }
                    this.treeData = {
                        id: this.rootCode,
                        code: this.rootCode,
                        name: this.rootName,
                        parentId: "",
                        isLeaf: "",
                        children: this.treeData
                    };
                } else if (this.treeData.length > 0) {
                    this.treeData = this.treeData[0];//如果是数组，且数组只有一个子节点时
                }
            }

            var node = null;
            node = this.createNode(0, false, this.treeData, "", 0, 0, false, isShowNode);
            this.pushNode(this.treeData["id"], node, "");
            return node.toHTML();
        }
    },
    /**
     *对子展点进行生成，展开或收缩(同时考虑在radio/check中的不同情况)
     **/
    extendNode: function (nodeObj, parentId, event) {
        var ev = event || window.event;
        ev.cancelBubble = true;
        this.publicExtendNode(nodeObj, parentId);
    },
    /**
     * @param nodeObj被点击对像
     * @param parentId被点击对像的父节点
     */
    publicExtendNode: function (nodeObj, parentId) {
        var parentNode = this.getNodeById(parentId);
        var node = [];
        var checkbox = this.getCheckboxByNodeId(parentId);
        var checkStatus = false;
        if (checkbox) {
            checkStatus = checkbox.checked;
        }
        if (parentNode) {
            node = parentNode["node"];
            var ppNode = parentNode["parentNode"];
            if (ppNode) {
                if (this.isLastNode(ppNode["node"], node)) {
                    node["isLastNode"] = true;
                }
            }
            if (node.childHTML && node.childHTML.length > 0) {//已经生成，进行伸展操作
                if (node.spreadStatus) {
                    this.spreadNodes(parentNode, node, "inline");
                    JBF.el(this.treeName + parentId).style.display = "inline";
                } else {
                    this.spreadNodes(parentNode, node, "none");
                    JBF.el(this.treeName + parentId).style.display = "none";
                }
            } else if (node.children && node.children.length > 0) {
                if (checkStatus) {
                    node["subCheckedLength"] = node.children.length;//记录一下生成的子节点个数用来完成多选框的级联操作;
                }
                node.childHTML = this.createSubNodeHTML(parentId, node, checkStatus, parentNode);
                nodeObj.innerHTML += node.childHTML;
                this.spreadNodes(parentNode, node, "inline");
            }
        }
        if (checkStatus) {
            checkbox = this.getCheckboxByNodeId(parentId);
            checkbox.checked = "checked";
        }
    },
    /**
     * 节点双击事件
     */
    nodeDbClick: function (parentId) {
        if (this.treeDbClick) {
            var parentNode = this.getNodeById(parentId);
            var node = [];
            if (parentNode) {
                node = parentNode["node"];
            }
            this.treeDbClick(node);
        }
    },
    /**
     **展开或收缩子节点操作（）
     **/
    spreadNodes: function (parentNode, node, status) {
        var spreadImg = JBF.el(node["spreadImgName"]);
        var folderImg = JBF.el(node["folderImgName"]);
        var pNode = parentNode["parentNode"];
        if ((spreadImg && folderImg)) {
            var folderSrc = folderImg.attributes["src"].nodeValue;
            //要判断当前节点是否是最后一个节点
            var isLastNode = false;//判断是否是最后一个节点
            if (pNode) {
                isLastNode = this.isLastNode(pNode["node"], node);
            }
            if (status == "inline") {
                node.spreadStatus = false;
                if (isLastNode) {
                    spreadImg.src = node["lMinusIcon"];
                } else {
                    spreadImg.src = node["tMinusIcon"];
                }
                //alert("inline:"+folderSrc);
                folderImg.setAttribute("src", folderSrc.replace("/foldericon", "/openfoldericon"));
                //alert("inlinend:"+folderSrc);
            } else {
                node.spreadStatus = true;
                if (isLastNode) {
                    spreadImg.src = node["lPlusIcon"];
                } else {
                    spreadImg.src = node["tPlusIcon"];
                }
                folderImg.setAttribute("src", folderSrc.replace("/openfoldericon", "/foldericon"));
            }
        } else if (node.depth == 0) {//对根节点做特殊操作
            if (status == "inline") {
                node.spreadStatus = false;
            } else {
                node.spreadStatus = true;
            }
        }
        //alert("当前节点："+node.id+"---状态:"+node.spreadStatus)
    },
    /**
     **针对于checkbox进行选择时的操作
     **/
    checkNode: function (obj, event, parentId) {
        var ev = event || window.event;
        ev.cancelBubble = true;
        var parentNode = this.getNodeById(parentId);
        if (parentNode) {
            var nodeObj = parentNode["node"];
            var checkbox = JBF.el(nodeObj["checkboxName"]);
            if (this.isPass) {//在选中节点时是否做传递
                //去级联所有子节点
                if (nodeObj.children && nodeObj.children.length > 0) {
                    this.checkAllSubNode(nodeObj, parentId, checkbox.checked);
                }
                //去找兄弟节点。查看兄弟的选择情况，去控制父亲节点
                if (nodeObj["parentId"]) {
                    this.checkBrotherNodes(nodeObj["parentId"], checkbox.checked);
                }
            }
            if (checkbox.checked) {
                nodeObj["checkStatus"] = true;
            } else {
                nodeObj["checkStatus"] = false;
            }
            if (this.treeOnClick) {
                this.treeOnClick(nodeObj);
            }
        }
    },
    /**
     * 当点击radio控件时进行选择radio控件，并取消事件传递
     */
    radioNode: function (obj, event, parentId) {
        var ev = event || window.event;
        ev.cancelBubble = true;
        this.selectRadioNode(parentId);
    },
    /**
     * 选择radio控件//作为公共来使用。只要传递id就可以时行选择
     * @param parentId
     */
    selectRadioNode: function (parentId) {
        try {
            var parentNode = this.getNodeById(parentId);
            if (parentNode) {
                var nodeObj = parentNode["node"];
                if (this.selectType == "radio") {
                    JBF.el(nodeObj["checkboxName"]).checked = "checked";
                }
                JBF.el(nodeObj["selectedNodeName"]).className = "selected";
                if (this.selectedNode && nodeObj["id"] != this.selectedNode["id"]) {
                    JBF.el(this.selectedNode["selectedNodeName"]).className = "";
                }
                this.selectedNode = nodeObj;
                if (this.treeOnClick) {
                    this.treeOnClick(nodeObj);
                }
            }
            this.radioValue = parentNode.node.nodeData;
        } catch (e) {

        }

    },
    /**
     * 在点击文字时做级联选择，对checkbox/radio进行选择
     * @param obj
     * @param event
     * @param parentId
     */
    linkCheckNode: function (obj, event, parentId) {
        var ev = event || window.event;
        ev.cancelBubble = true;
        var parentNode = this.getNodeById(parentId);
        if (parentNode) {
            var nodeObj = parentNode["node"];
            if (this.selectType == "checkbox") {
                var checkbox = JBF.el(nodeObj["checkboxName"]);
                if (checkbox) {
                    if (checkbox.checked) {
                        checkbox.checked = "";
                    } else {
                        checkbox.checked = "checked";
                    }
                    this.checkNode(checkbox, event, parentId);
                }
            }
        }
    },
    /**
     **设置所有子的checkbox节点的checked状态。(利用递归寻找所有加载的子节点)用于checkbox这种格式来用
     **/
    checkAllSubNode: function (parentNode, parentId, checked) {
        if (parentNode && checked) {
            if (parentNode.children) {
                parentNode["subCheckedLength"] = parentNode.children.length;
            }
        } else {
            parentNode["subCheckedLength"] = 0;
        }
        //alert(parentNode["name"]+"----"+parentNode["subCheckedLength"])
        var nodes = this.getNodesByParentId(parentId);
        if (nodes && nodes.length > 0) {
            for (var i = 0; i < nodes.length; i++) {
                var nodeObj = nodes[i];
                var checkbox = JBF.el(nodeObj.node["checkboxName"]);
                if (nodeObj["node"] && nodeObj.node["id"]) {
                    this.checkAllSubNode(nodeObj.node, nodeObj.node["id"], checked);
                }
                if (checkbox) {
                    if (checked) {
                        nodeObj["node"].checkStatus = true;
                    } else {
                        nodeObj["node"].checkStatus = false;
                    }
                    checkbox.checked = checked;
                }
            }
        }
    },
    /**
     *查看兄弟节点状态（ 利用递归找到根节点）用于在checkbox这种格式中来用
     */
    checkBrotherNodes: function (parentId, checked) {
        if (parentId) {
            var parentNode = this.getNodeById(parentId);
            if (parentNode) {
                var parentNodeObj = parentNode.node;
                if (checked) {
                    parentNodeObj["subCheckedLength"] += 1;
                } else {
                    if (parentNodeObj["subCheckedLength"] > 0) {
                        parentNodeObj["subCheckedLength"] -= 1;
                    }
                }
                if (parentNodeObj.children) {
                    var checkbox = JBF.el(parentNodeObj["checkboxName"]);
                    if (checkbox) {
                        if (parentNodeObj["subCheckedLength"] <= 0) {
                            checkbox.checked = "";
                            parentNodeObj["checkStatus"] = false;
                            //alert("减少找父亲:"+parentNodeObj["name"]+"   length:"+parentNodeObj["subCheckedLength"]);
                            this.checkBrotherNodes(parentNodeObj["parentId"], checked);//当父亲被取消选择后再看上一级的选择情况
                        } else {
                            checkbox.checked = "checked";
                            parentNodeObj["checkStatus"] = true;
                            if (checked && parentNodeObj["subCheckedLength"] == 1) {
                                //alert("增加找父亲:"+parentNodeObj["name"]+"   length:"+parentNodeObj["subCheckedLength"]);
                                this.checkBrotherNodes(parentNodeObj["parentId"], checked);//当父亲被取消选择后再看上一级的选择情况
                            }
                        }
                        if (parentNodeObj["subCheckedLength"] >= parentNodeObj.children.length) {
                            parentNodeObj["subCheckedLength"] = parentNodeObj.children.length;
                        }
                    }
                }
            }
        }
    },
    /**
     *用于生成子节点的html
     **/
    createSubNodeHTML: function (parentId, node, checkStatus, parentNode) {
        var blankCount = this.getLastShowCounts(parentNode, 0);
        if (!blankCount) {
            blankCount = 0;
        }
        var childStr = "<div id='" + this.treeName + parentId + "' name='" + this.treeName + parentId + "'>";
        var depth = node.depth + 1;
        for (var i = 0; i < node.children.length; i++) {
            var nodeStatus = "T";
            if (i == (node.children.length - 1)) {
                nodeStatus = "L";
            }
            var n = node.children[i];
            var isLast = false;
            if (i == (node.children.length - 1)) {
                isLast = true;
            }
            var newNode = this.createNode(blankCount, isLast, n, parentId, nodeStatus, depth, checkStatus, true);
            this.pushNode(n["id"], newNode, parentId, parentNode);
            childStr += newNode.toHTML();
        }
        return childStr + "</div>";
    },

    /**
     * 查看父亲--父亲的爷爷.....到根，看有几个在当前兄弟当中是最后的节点。
     * @param node
     */
    getLastShowCounts: function (node, count) {
        var bit = true;
        while (bit) {
            var parentNode = node["parentNode"];
            if (parentNode) {
                var objNode = node["node"];
                if (objNode["isLastNode"]) {
                    count += 1;
                }
                node = parentNode;
            } else {
                bit = false;
            }
        }
        return count;
    },
    /**
     * 公共方法，用于新建展开的节点
     * @param blankCount前边所补的空图像数
     * @param isLastNode是否是最后一个节点
     * @param node新建节点是的节点信息
     * @param parentId父节点
     * @param nodeStatus节点当前状态L/T的形状
     * @param depth所体现在树中的深度
     * @param checkStatus选中状态
     * @param isShowCheck是否显示radio/checkbox
     * @returns {TreeNode}
     */
    createNode: function (blankCount, isLastNode, node, parentId, nodeStatus, depth, checkStatus, isShowCheck) {
        return new TreeNode(blankCount, isLastNode, node, parentId, 1, nodeStatus, this.selectType, "", depth, this.treeName, checkStatus, isShowCheck);
    },
    /**
     **通过节点找到相应的checkbox框
     **/
    getCheckboxByNodeId: function (parentId) {
        var parentNode = this.getNodeById(parentId);
        if (parentNode && parentNode.node) {
            var nodeObj = parentNode.node;
            if (nodeObj && nodeObj["checkboxName"]) {
                return JBF.el(nodeObj["checkboxName"]);
            }
        }
        return false;
    },
    /**
     **将当前展开的节点存放到已展开的nodes集合当中
     **/
    pushNode: function (id, node, parentId, parentNode) {
        this.nodes.push({"id": id, "node": node, "parentId": parentId, "parentNode": parentNode});
    },
    popNode: function (id) {
        if (this.nodes && this.nodes.length > 0) {
            for (var i = 0; i < this.nodes.length; i++) {
                var node = this.nodes[i];
                if (node["id"] == id) {
                    this.nodes.splice(i, 1);
                    break;
                }
            }
        }
    },
    /**
     **通过id来获取当前已展开的节点
     **/
    getNodeById: function (id) {
        for (var i = 0; i < this.nodes.length; i++) {
            if (this.nodes[i]["id"] == id) {
                return this.nodes[i];
            }
        }
        return null;
    },
    leafAddNode: function (nodeObj, parentId, node, parentNode) {
        //将数据进行修改
        nodeObj["isLeaf"] = false;
        nodeObj.children = [node];
        //对html进行修改
        var nodeElement = JBF.el(nodeObj["nodeDivName"]);
        var nodeObjPic = JBF.el(nodeObj["spreadImgName"]);
        var nodeObjFilePic = JBF.el(nodeObj["folderImgName"]);
        //新增节点后生成的加减图片
        if (nodeObjPic) {
            if (nodeObj["nodeStatus"] == "T") {
                nodeObjPic.src = nodeObj["tMinusIcon"];
            } else {
                nodeObjPic.src = nodeObj["lMinusIcon"];
            }
        }
        //将文件的图标变成打开文件夹的图标
        if (nodeObjFilePic) {
            nodeObjFilePic.src = nodeObj["openFolderIcon"];
        }
        //新增子节点的div
        var addDiv = "<div id='" + this.treeName + parentId + "' name='" + this.treeName + parentId + "'>";
        var blackCount = nodeObj["blankCount"];

        if (this.isLastNode(parentNode.parentNode["node"], parentNode)) {
            blackCount += 1;
        }
        //alert("是否是最后一个节点："+this.isLastNode(parentNode.parentNode["node"],parentNode));
        var newNode = this.createNode(blackCount, nodeObj["isLastNode"], node, parentId, "L", nodeObj["depth"] + 1, false, true);//新生成的一般为L型的图标
        this.pushNode(node["id"], newNode, parentId, parentNode);
        newNode.spreadStatus = true;//设置新生成节点的状态为展开状态
        nodeObj["childHTML"] = newNode.toHTML();
        addDiv += nodeObj["childHTML"] + "</div>";
        //插入到节点下
        nodeElement.innerHTML += addDiv;
        this.selectRadioNode(node["id"]);
    },
    folderAddNode: function (nodeObj, parentId, node, parentNode) {
        if (nodeObj.children && nodeObj.children.length > 0) {
            if (nodeObj.childHTML) {//已经生成子节点
                if (nodeObj["spreadStatus"]) {
                    var extendObj = JBF.el(nodeObj["nodeDivName"]);
                    this.publicExtendNode(extendObj, parentId);
                }
            } else {//未生成子节点
                var extendObj = JBF.el(nodeObj["nodeDivName"]);
                this.publicExtendNode(extendObj, parentId);
            }
            //对哥哥做操作
            //当节点为父节点
            var prvBrother = nodeObj.children[nodeObj.children.length - 1];//取到兄弟节点
            prvBrother = this.getNodeById(prvBrother["id"]);//找到哥哥原始对像生成的节点对像
            var prvNode = prvBrother["node"];
            prvNode["isLastNode"] = false;
            if (prvNode.children && prvNode.children.length > 0) {
                if (prvNode['spreadStatus']) {
                    JBF.el(prvNode["spreadImgName"]).src = prvNode["tMinusIcon"];//对生成的节点对像的图标进行更换
                } else {
                    JBF.el(prvNode["spreadImgName"]).src = prvNode["tPlusIcon"];//对生成的节点对像的图标进行更换
                }
            } else {
                JBF.el(prvNode["spreadImgName"]).src = prvNode["tIcon"];//对生成的节点对像的图标进行更换
            }
            nodeObj.children.push(node);//将新生的节点装已展的对像当中
            var newNode = this.createNode(prvNode["blankCount"], nodeObj["isLastNode"], node, parentId, "L", nodeObj["depth"] + 1, true, true);//新生成的一般为L型的图标
            this.pushNode(node["id"], newNode, parentId, parentNode);
            JBF.el(this.treeName + parentId + "").innerHTML += newNode.toHTML();
            this.radioValue = node;
            if (this.selectType == "radio" || this.selectType == "checkbox") {
                JBF.el(newNode.checkboxName).checked = "true";
                this.selectRadioNode(node["id"]);
            }
        }
    },

    /**
     * //用于在移除节点后，该去选中的下一个节点
     */
    removedSelectNode: function (parentNode, childrenNodes, selectIndex) {
        var selectId = "";
        if (childrenNodes.length > 0) {
            var node = childrenNodes[selectIndex];
            if (childrenNodes.length == selectIndex) {
                node = childrenNodes[selectIndex - 1];
                this.removePreToLast(node);
            }
            selectId = node["id"];
        } else {
            this.removeAllSubNode(parentNode);//些段为，删除所有子节点后，将对父节点进行设置，设置父节点为叶子节点
        }
        if (selectId.length > 0) {
            this.selectRadioNode(selectId);
        }
    },
    removePreToLast: function (node) {
        var id = node["id"];
        var node = this.getNodeById(id);
        if (node) {
            var objNode = node["node"];
            var icon = "lIcon";
            if (objNode.children && objNode.children.length > 0) {
                icon = "lPlusIcon";
            }
            JBF.el(objNode["spreadImgName"]).src = objNode[icon];
        }
    },
    /**
     * 些段为，删除所有子节点后，将对父节点进行设置，设置父节点为叶子节点
     * 待把数据清空
     */
    removeAllSubNode: function (parentNode) {
        var ppNode = parentNode["parentNode"];
        if (ppNode) {
            var objNode = parentNode["node"];
            var icon = "tIcon";
            if (ppNode) {
                var ppObjNode = ppNode["node"];
                if (this.isLastNode(ppObjNode, objNode)) {
                    icon = "lIcon";
                }
            }
            JBF.el(objNode["spreadImgName"]).src = objNode[icon];
            JBF.el(objNode["folderImgName"]).src = objNode["fileIcon"];
            this.selectRadioNode(objNode["id"]);
        }
    },
    /**
     * 判断此节点在父节点当中是否是最后一个节点
     */
    isLastNode: function (parentNode, node) {
        if (parentNode && parentNode.children && parentNode.children.length > 0) {
            for (var i = 0; i < parentNode.children.length; i++) {
                var subNode = parentNode.children[i];
                if (subNode["id"] == node["id"]) {
                    break;
                }
            }
            if ((i + 1) >= parentNode.children.length) {
                return true;
            }
            return false;
        }
    },
    changeFolderToFile: function () {

    },
    /**
     * 移院页面元素
     * @param id
     */
    removePageElement: function (parentNode, elementId) {
        if (parentNode) {
            if (parentNode.children.length <= 0) {
                elementId = this.treeName + parentNode["id"];
            }
            var parentElement = JBF.el(elementId);//移除页面元素
            if (parentElement && parentElement.parentNode) {
                parentElement.parentNode.removeChild(parentElement);
            }
        }
    },
    /**
     * 通过父节点来获取所有的子节点信息
     * @param parentId
     * @returns {Array}
     */
    getNodesByParentId: function (parentId) {
        var nodes = [];
        for (var i = 0; i < this.nodes.length; i++) {
            if (this.nodes[i]["parentId"] == parentId) {
                nodes.push(this.nodes[i]);
            }
        }
        return nodes;
    },
    /**
     *得到当前选中checkbox的值,如果此父节点选中，则
     */
    getCheckedValues: function (columnName) {
        var nodeValues = [];
        if (this.nodes && this.nodes.length > 0) {
            for (var i = 0; i < this.nodes.length; i++) {
                var objNode = this.nodes[i].node;
                if (objNode["checkStatus"]) {
                    nodeValues.push(objNode[columnName]);
                }
            }
        }
        return nodeValues;
    },

    /**
     **用于递归获取选中节点的所有子节点中的值
     **/
    getSubCheckedValues: function (node, nodeValues) {
        if (!node["spreadStatus"]) {
            if (node["children"] && node["children"].length > 0) {
                var childNodes = node["children"];
                if (childNodes.length > 0) {
                    for (var i = 0; i < childNodes.length; i++) {
                        var node = childNodes[i];
                        nodeValues.push(node["id"]);
                        this.getSubCheckedValues(node, nodeValues);
                    }
                }
            }
        }
    },

    /**
     * *****************************************************************************************
     * 用于对外暴露出来的用来移除一节点
     */
    /**
     * 修改节点信息
     * @param node
     */
    modifyNode: function (node) {
        var id = node["id"];
        var modifyNode = this.getNodeById(id);
        var parentNode = modifyNode.parentNode;
        if (parentNode) {//获取父节点用于修改其保存的子节点的数据
            var nodeObj = parentNode["node"];//用于保存修改后的节点
            if (nodeObj.children && nodeObj.children.length > 0) {
                for (var i = 0; i < nodeObj.children.length; i++) {
                    var subNode = nodeObj.children[i];
                    if (node["id"] == subNode["id"]) {
                        nodeObj.children[i] = node;
                        break;
                    }
                }
            }
            if (modifyNode && modifyNode.node) {
                JBF.el(modifyNode.node["selectedNodeName"]).innerHTML = node["name"];
                modifyNode.node["id"] = node["id"];
                modifyNode.node["name"] = node["name"];
                modifyNode.node["leval"] = node["leval"];
            }
        }
    },
    /**
     * 用于对外暴露出来的用来移除一节点
     * @param id
     */
    removeNode: function (id) {
        var lsNode = this.getNodeById(id);
        if (lsNode) {
            var parentNode = lsNode["parentNode"];//得到父亲节点,为了移除父节点当中保存的子节点信息
            var subNode = lsNode["node"];
            if (subNode["children"] && subNode["children"].length > 0) {
                alert("选中节点不是叶子节点，不能进行删除！");
            } else {
                if (parentNode) {
                    var pcNode = parentNode.node;
                    if (pcNode.children && pcNode.children.length > 0) {//用来找到父节点当中保存的子节点信息，并把其移除
                        var childrenNodes = pcNode.children;
                        for (var i = 0; i < childrenNodes.length; i++) {
                            var node = childrenNodes[i];
                            if (node["id"] == id) {
                                childrenNodes.splice(i, 1);
                                break;
                            }
                        }
                        this.removedSelectNode(parentNode, childrenNodes, i);//移除后，先择的下一个节点
                        this.removePageElement(pcNode, subNode["nodeDivName"]);
                    }
                }
                this.popNode(id);//移除全局变量中的数据
            }
        }
    },
    getValues: function (columnName) {
        if (!columnName) {
            columnName = "id";
        }
        if (this.selectType == "radio" || this.selectType == "generic") {
            return this.radioValue[columnName];
        } else if (this.selectType == "checkbox") {
            return this.getCheckedValues(columnName);
        }
        return "";
    },
    /**
     **增加新节点 还有bug;
     **/
    addNode: function (node) {
        var parentId = node["parentId"];
        if (parentId) {//用来获取父节点
            var parentNode = this.getNodeById(parentId);
            if (parentNode) {
                var nodeObj = parentNode["node"];//找到生成的对像节点
                if (nodeObj.children && nodeObj.children.length > 0) { //如果是叶子节点。则对叶子节点进行操作（变叶子为文件夹）
                    this.folderAddNode(nodeObj, parentId, node, parentNode);//用来给非页子节点增加节点
                } else {
                    this.leafAddNode(nodeObj, parentId, node, parentNode);//用来给叶子节点增加节点
                }
            }
        }
    }
    /**
     * *******************************************************************************************
     */

};
﻿function putDate(splitStr) {
    var ev = arguments.callee.caller.arguments[0] || window.event;
    var obj = ev.srcElement || ev.target;
    sd = new SetDate(obj, splitStr);
    sd.show();
    obj.focus();
    JBF.addEvent(JBF.doc, "click", sd.closeWin);
    ev.cancelBubble = true;

}

function putDateById(id, splitStr) {
    var dateObj = JBF.el(id);
    var ev = arguments.callee.caller.arguments[0] || window.event;
    sd = new SetDate(dateObj, splitStr);
    sd.show();
    dateObj.focus();
    JBF.addEvent(JBF.doc, "click", sd.closeWin);
    ev.cancelBubble = true;
}

function putDateByObj(obj, parent) {
    sd = new SetDate(obj, parent.splitStr);
    sd.parent = parent;
    sd.show();
    obj.focus();
    JBF.addEvent(JBF.doc, "click", sd.closeWin);
    return sd;
}

function validateDate(value, splitStr) {

}

function SetDate(dateObj, splitStr) {
    this.dateObj = dateObj;
    this.maxYear = 2030;
    this.minYear = 1990;
    this.splitStr = '';
    if (splitStr) {
        this.splitStr = splitStr;
    }
    // this.objName=objName;
    if (1 == 2) {

    } else {
        this.date = new Date();
        this.year = this.date.getFullYear();
        this.month = this.date.getMonth() + 1;
        this.day = this.date.getDate();
        this.newDate = new Date(this.year, this.month - 1, 1);
    }
}

SetDate.prototype = {
    constructor: SetDate,
    initDate: function () {
        this.days = ["日", "一", "二", "三", "四", "五", "六"];
    },
    /*
	 * 动态整合区间的select下拉框
	 */
    getYearsOrMonth: function (min, max, selValue) {
        var selectStr = "<select style='float:left;' >";
        for (var i = min; i <= max; i++) {
            var selStr = "";
            if (i == selValue) {
                selStr = " selected=true ";
            }
            selectStr += "<option " + selStr + " value=" + i + ">" + i + "</option>";
        }
        selectStr += "</select>";
        return selectStr;
    },
    /*
	 *
	 */
    show: function () {
        var dateStr = "";
        var x = JBF.getAbsX(this.dateObj);
        var y = JBF.getAbsY(this.dateObj) + this.dateObj.offsetHeight - JBF.getScrollTop(this.dateObj);
        if (this.parent.isYear) {
            dateStr += "<table cellspacing='1' cellpadding='1' bgcolor='#a3c0e8'><tbody>";
            var year = new Date().getFullYear();
            for (var i = 0; i < 4; i++) {
                dateStr += "<tr class='trCss'>";
                for (var j = 0; j < 10; j++) {
                    var pojo = (year - 30 + i * 10 + j);
                    dateStr += "<td isReality='" + pojo + "'>" + pojo + "</td>";
                }
                dateStr += "</tr>";
            }
            dateStr += "</tbody></table>";
        } else if (this.parent.isMonth) {
            dateStr += "<table cellspacing='1' cellpadding='1' bgcolor='#a3c0e8'><tbody>";
            var year = new Date().getFullYear();
            for (var i = 0; i < 4; i++) {
                dateStr += "<tr class='trCss'>";
                for (var j = 0; j < 10; j++) {
                    var pojo = (year - 30 + i * 10 + j);
                    dateStr += "<td isyear='1'>" + pojo + "</td>";
                }
                dateStr += "</tr>";
            }
            dateStr += "</tbody></table>";
            dateStr += "<table cellspacing='1' cellpadding='1' bgcolor='#a3c0e8'><tbody>";
            dateStr += "<tr class='trCss'><td isReality='01'>01</td><td isReality='02'>02</td><td isReality='03'>03</td><td isReality='04'>04</td><td isReality='05'>05</td><td isReality='06'>06</td></tr>";
            dateStr += "<tr class='trCss'><td isReality='07'>07</td><td isReality='08'>08</td><td isReality='09'>09</td><td isReality='10'>10</td><td isReality='11'>11</td><td isReality='12'>12</td></tr>";
            dateStr += "</tbody></table>";
        } else {
            this.initDate();
            this.startWeek = this.newDate.getDay();// 开始是周几
            this.datas = this.putDays();
            var rows = 0;
            if (this.datas.length % 7 == 0) {
                rows = parseInt(this.datas.length / 7);
            } else {
                rows = parseInt(this.datas.length / 7) + 1;
            }
            dateStr += "<table cellspacing='1' cellpadding='1' bgcolor='#a3c0e8'><tbody>";
            dateStr += "<tr class='topPanel'><td colspan='7' height='20px'>";
            dateStr += "<div class='prevYear'><a style='cursor:pointer;'></a></div><div class='prevMonth'><a style='cursor:pointer;'></a></div>"
                + this.getYearsOrMonth(this.minYear, this.maxYear, this.year) + this.getYearsOrMonth(1, 12, this.month)
                + "<div class='nextMonth'><a style='cursor:pointer;'></a></div><div class='nextYear'><a style='cursor:pointer;'></a></div>";
            dateStr += "</td></tr>";
            for (var rIndex = 0; rIndex < rows; rIndex++) {
                var tr = "<tr class='trCss'>";
                for (var i = 0; i < 7; i++) {
                    var dataIndex = rIndex * 7 + i;
                    var pojo = this.datas[dataIndex];
                    var tdStr = "<td  isReality='" + pojo + "'>";
                    if (rIndex == 0) {
                        tr += "<td style='text-align:center'>" + pojo + "</td>";
                    } else {
                        if (dataIndex >= this.datas.length) {
                            tr += (tdStr + "&nbsp;</td>");
                        } else {
                            if (pojo == this.day) {
                                tdStr = "<td class='tdOver' isReality='" + pojo + "'>";
                            } else if ((dataIndex) % 7 == 0 || (dataIndex + 1) % 7 == 0) {
                                tdStr = "<td class='weekend' isReality='" + pojo + "'>";
                            }
                            tr += (tdStr + pojo + "</td>");
                        }
                    }
                }
                dateStr += (tr + "</tr>");
            }
            dateStr += "<tr><td colspan='7' align='center' height='16px'><div style='margin:auto;width:100%; '><div class='today'><a style='cursor:pointer;' op='today'>今天</a></div><div class='today close'><a style='cursor:pointer;'>清空</a></div></div></td></tr>";
            dateStr += "</tbody></table>";
        }
        if (typeof (dateDivPanel) != "undefined") {
            this.closeWin();
        }
        dateDivPanel = document.createElement("div");
        dateDivPanel.style.position = "absolute";
        dateDivPanel.style.left = x + "px";
        dateDivPanel.style.top = y + "px";
        document.body.appendChild(dateDivPanel);
        // =dateDiv;
        JBF.addEvent(dateDivPanel, "click", this.dateOnclick(this));
        JBF.addEvent(dateDivPanel, "mouseover", this.dateOnMouseOver());
        JBF.addEvent(dateDivPanel, "mouseout", this.dateOnMouseOut());
        // }

        dateDivPanel.innerHTML = dateStr;
    },
    todayValue: function () {
        var nowDate = new Date();
        this.year = nowDate.getFullYear();
        this.month = nowDate.getMonth() + 1;
        this.day = nowDate.getDate();
        this.dateObj.value = this.year + this.splitStr + this.makeUpZero(this.month + '', 2) + this.splitStr + this.makeUpZero(this.day + '', 2);
        this.closeWin();
    },
    closeWin: function () {
        if (typeof (dateDivPanel) != "undefined") {
            var parentNode = dateDivPanel.parentNode;
            if (parentNode) {
                parentNode.removeChild(dateDivPanel);
                JBF.removeEvent(JBF.doc, "click", window.sd.closeWin);
            }
        }
        try {
            this.dateObj.focus();
        } catch (e) {
        }
    },
    makeUpZero: function (value, length) {
        value += '';
        if (value.length < length) {
            var makeUpLen = length - value.length;
            for (var i = makeUpLen; i > 0; i--) {
                value = ("0" + value);
            }
        }
        return value;
    },
    /*
	 * 公共的单击事件，用来监听面板当中的所有操作
	 */
    dateOnclick: function (op) {
        var parent = this.parent;
        return function (event) {
            var obj = JBF.getEventTarget(event);
            if (obj.nodeName == "TD") {
                var selValue = obj.innerText || obj.textContent;
                selValue = selValue.replace(" ", "");
                if (obj.attributes["isReality"] && selValue.length > 0) {
                    if (parent.isYear) {
                        op.dateObj.value = selValue;
                    } else if (parent.isMonth) {
                        op.dateObj.value = op.year + selValue;

                    } else {
                        op.day = selValue;
                        op.dateObj.value = op.year + op.splitStr + op.makeUpZero(op.month, 2) + op.splitStr + op.makeUpZero(op.day, 2);
                    }
                    op.closeWin();
                }
                if (obj.isyear || obj.getAttribute("isyear")) {
                    var brothers = obj.parentNode.cells;
                    if (brothers) {
                        for (var i = 0; i < brothers.length; i++) {
                            brothers[i].className = "";
                        }
                    }
                    obj.className = "tdOver";
                    op.year = selValue;
                }
            } else if (obj.nodeName == "A") {
                var parentNode = obj.parentNode;
                if (parentNode.className) {
                    var opBit = false;
                    switch (parentNode.className) {
                        case "prevYear":
                            if (op.year <= op.minYear) {
                                op.year = op.maxYear;
                            } else {
                                op.year = parseInt(op.year) - 1;
                            }
                            opBit = true;
                            break;
                        case "nextYear":
                            if (op.year >= op.maxYear) {
                                op.year = op.minYear;
                            } else {
                                op.year = parseInt(op.year) + 1;
                            }
                            opBit = true;
                            break;
                        case "prevMonth":
                            if (op.month == 1) {
                                if (op.year <= op.minYear) {
                                    op.year = op.minYear;
                                } else {
                                    op.year -= 1;
                                }
                                op.month = 12;
                            } else {
                                op.month -= 1;
                            }
                            opBit = true;
                            break;
                        case "nextMonth":
                            if (op.month >= 12) {
                                if (op.year >= op.maxYear) {
                                    op.year = op.maxYear;
                                } else {
                                    op.year += 1;
                                }
                                op.month = 1;
                            } else {
                                op.month += 1;
                            }
                            opBit = true;
                            break;
                        case "today":
                            op.todayValue();
                            break;
                        case "today close":
                            op.dateObj.value = "";
                            op.closeWin();
                            break;
                    }
                    if (opBit) {
                        op.days.length = 0;
                        op.newDate = new Date(op.year, op.month - 1, 1);// 生成当前月的第一天
                        op.show();
                    }

                }
            } else if (obj.nodeName == "SELECT") {
                JBF.addEvent(obj, "change", op.yearUpdate(op));
            }
            event.cancelBubble = true;
            // op.dateObj.focus();
        };
    },
    /*
	 * 年份与日期下拉框更改时的事件
	 */
    yearUpdate: function (op) {
        // var ev=arguments.callee.caller.arguments[0]||window.event;
        return function (event) {
            var obj = JBF.getEventTarget(event);
            // alert(obj.nodeName);
            if (obj.nodeName == "SELECT") {
                var value = obj.options[obj.selectedIndex].value;
                if (value.length > 2) {
                    op.year = value;
                } else {
                    op.month = value;
                }
                op.days.length = 0;
                op.newDate = new Date(op.year, op.month - 1, 1);// 生成当前月的第一天
                op.show();
            }
        };
    },
    /*
	 * 鼠标经过事件
	 */
    dateOnMouseOver: function () {
        // var ev=arguments.callee.caller.arguments[0]||window.event;
        return function (event) {
            var obj = JBF.getEventTarget(event);
            if (obj.nodeName == "TD" && obj.attributes["isReality"]) {
                obj.className += " tdOver";
            }
        };
    },
    /*
	 * 鼠标移出事件
	 */
    dateOnMouseOut: function () {
        // var ev=arguments.callee.caller.arguments[0]||window.event;
        return function (event) {
            var obj = JBF.getEventTarget(event);
            if (obj.nodeName == "TD" && obj.attributes["isReality"]) {
                if (!obj.attributes["selected"]) {
                    obj.className = obj.className.replace(" tdOver", "");
                }
            }
        };
    },
    /*
	 * 把所有数据全部压缩到表格当中
	 */
    putDays: function () {
        for (var i = 0; i < this.startWeek; i++) {
            this.days.push("&nbsp;");
        }
        monthDays = this.getMonthDays(this.month);
        for (var i = 1; i <= monthDays; i++) {
            this.days.push(i);
        }
        return this.days;
    },
    /*
	 * 通过当前年，及月份，得到当前月有几天
	 */
    getMonthDays: function () {
        var monthDay = 30;
        switch (Number(this.month)) {
            // case 1||3||5||7||8||10||12:
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
            case 12:
                monthDay = 31;
                break;
            case 4:
            case 6:
            case 9:
            case 11:
                monthDay = 30;
                break;
            case 2:
                if ((this.year % 400 == 0) || (this.year % 4 == 0) && (this.year % 100 != 0)) {
                    monthDay = 29;
                } else {
                    monthDay = 28;
                }
                break;
            default:
                monthDay = 30;
        }
        return monthDay;
    }
};
/*!
 * jQuery JavaScript Library v1.4
 * http://jquery.com/
 *
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://docs.jquery.com/License
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2010, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Wed Jan 13 15:23:05 2010 -0500
 */
(function (A, w) {
    function oa() {
        if (!c.isReady) {
            try {
                s.documentElement.doScroll("left")
            } catch (a) {
                setTimeout(oa, 1);
                return
            }
            c.ready()
        }
    }

    function La(a, b) {
        b.src ? c.ajax({
            url: b.src,
            async: false,
            dataType: "script"
        }) : c.globalEval(b.text || b.textContent || b.innerHTML || "");
        b.parentNode && b.parentNode.removeChild(b)
    }

    function $(a, b, d, f, e, i) {
        var j = a.length;
        if (typeof b === "object") {
            for (var o in b) $(a, o, b[o], f, e, d);
            return a
        }
        if (d !== w) {
            f = !i && f && c.isFunction(d);
            for (o = 0; o < j; o++) e(a[o], b, f ? d.call(a[o], o, e(a[o], b)) : d, i);
            return a
        }
        return j ?
            e(a[0], b) : null
    }

    function K() {
        return (new Date).getTime()
    }

    function aa() {
        return false
    }

    function ba() {
        return true
    }

    function pa(a, b, d) {
        d[0].type = a;
        return c.event.handle.apply(b, d)
    }

    function qa(a) {
        var b = true, d = [], f = [], e = arguments, i, j, o, p, n, t = c.extend({}, c.data(this, "events").live);
        for (p in t) {
            j = t[p];
            if (j.live === a.type || j.altLive && c.inArray(a.type, j.altLive) > -1) {
                i = j.data;
                i.beforeFilter && i.beforeFilter[a.type] && !i.beforeFilter[a.type](a) || f.push(j.selector)
            } else delete t[p]
        }
        i = c(a.target).closest(f, a.currentTarget);
        n = 0;
        for (l = i.length; n < l; n++) for (p in t) {
            j = t[p];
            o = i[n].elem;
            f = null;
            if (i[n].selector === j.selector) {
                if (j.live === "mouseenter" || j.live === "mouseleave") f = c(a.relatedTarget).closest(j.selector)[0];
                if (!f || f !== o) d.push({elem: o, fn: j})
            }
        }
        n = 0;
        for (l = d.length; n < l; n++) {
            i = d[n];
            a.currentTarget = i.elem;
            a.data = i.fn.data;
            if (i.fn.apply(i.elem, e) === false) {
                b = false;
                break
            }
        }
        return b
    }

    function ra(a, b) {
        return ["live", a, b.replace(/\./g, "`").replace(/ /g, "&")].join(".")
    }

    function sa(a) {
        return !a || !a.parentNode || a.parentNode.nodeType ===
            11
    }

    function ta(a, b) {
        var d = 0;
        b.each(function () {
            if (this.nodeName === (a[d] && a[d].nodeName)) {
                var f = c.data(a[d++]), e = c.data(this, f);
                if (f = f && f.events) {
                    delete e.handle;
                    e.events = {};
                    for (var i in f) for (var j in f[i]) c.event.add(this, i, f[i][j], f[i][j].data)
                }
            }
        })
    }

    function ua(a, b, d) {
        var f, e, i;
        if (a.length === 1 && typeof a[0] === "string" && a[0].length < 512 && a[0].indexOf("<option") < 0) {
            e = true;
            if (i = c.fragments[a[0]]) if (i !== 1) f = i
        }
        if (!f) {
            b = b && b[0] ? b[0].ownerDocument || b[0] : s;
            f = b.createDocumentFragment();
            c.clean(a, b, f, d)
        }
        if (e) c.fragments[a[0]] =
            i ? f : 1;
        return {fragment: f, cacheable: e}
    }

    function T(a) {
        for (var b = 0, d, f; (d = a[b]) != null; b++) if (!c.noData[d.nodeName.toLowerCase()] && (f = d[H])) delete c.cache[f]
    }

    function L(a, b) {
        var d = {};
        c.each(va.concat.apply([], va.slice(0, b)), function () {
            d[this] = a
        });
        return d
    }

    function wa(a) {
        return "scrollTo" in a && a.document ? a : a.nodeType === 9 ? a.defaultView || a.parentWindow : false
    }

    var c = function (a, b) {
            return new c.fn.init(a, b)
        }, Ma = A.jQuery, Na = A.$, s = A.document, U, Oa = /^[^<]*(<[\w\W]+>)[^>]*$|^#([\w-]+)$/, Pa = /^.[^:#\[\.,]*$/,
        Qa = /\S/,
        Ra = /^(\s|\u00A0)+|(\s|\u00A0)+$/g, Sa = /^<(\w+)\s*\/?>(?:<\/\1>)?$/, P = navigator.userAgent, xa = false,
        Q = [], M, ca = Object.prototype.toString, da = Object.prototype.hasOwnProperty, ea = Array.prototype.push,
        R = Array.prototype.slice, V = Array.prototype.indexOf;
    c.fn = c.prototype = {
        init: function (a, b) {
            var d, f;
            if (!a) return this;
            if (a.nodeType) {
                this.context = this[0] = a;
                this.length = 1;
                return this
            }
            if (typeof a === "string") if ((d = Oa.exec(a)) && (d[1] || !b)) if (d[1]) {
                f = b ? b.ownerDocument || b : s;
                if (a = Sa.exec(a)) if (c.isPlainObject(b)) {
                    a = [s.createElement(a[1])];
                    c.fn.attr.call(a, b, true)
                } else a = [f.createElement(a[1])]; else {
                    a = ua([d[1]], [f]);
                    a = (a.cacheable ? a.fragment.cloneNode(true) : a.fragment).childNodes
                }
            } else {
                if (b = s.getElementById(d[2])) {
                    if (b.id !== d[2]) return U.find(a);
                    this.length = 1;
                    this[0] = b
                }
                this.context = s;
                this.selector = a;
                return this
            } else if (!b && /^\w+$/.test(a)) {
                this.selector = a;
                this.context = s;
                a = s.getElementsByTagName(a)
            } else return !b || b.jquery ? (b || U).find(a) : c(b).find(a); else if (c.isFunction(a)) return U.ready(a);
            if (a.selector !== w) {
                this.selector = a.selector;
                this.context = a.context
            }
            return c.isArray(a) ? this.setArray(a) : c.makeArray(a, this)
        }, selector: "", jquery: "1.4", length: 0, size: function () {
            return this.length
        }, toArray: function () {
            return R.call(this, 0)
        }, get: function (a) {
            return a == null ? this.toArray() : a < 0 ? this.slice(a)[0] : this[a]
        }, pushStack: function (a, b, d) {
            a = c(a || null);
            a.prevObject = this;
            a.context = this.context;
            if (b === "find") a.selector = this.selector + (this.selector ? " " : "") + d; else if (b) a.selector = this.selector + "." + b + "(" + d + ")";
            return a
        }, setArray: function (a) {
            this.length =
                0;
            ea.apply(this, a);
            return this
        }, each: function (a, b) {
            return c.each(this, a, b)
        }, ready: function (a) {
            c.bindReady();
            if (c.isReady) a.call(s, c); else Q && Q.push(a);
            return this
        }, eq: function (a) {
            return a === -1 ? this.slice(a) : this.slice(a, +a + 1)
        }, first: function () {
            return this.eq(0)
        }, last: function () {
            return this.eq(-1)
        }, slice: function () {
            return this.pushStack(R.apply(this, arguments), "slice", R.call(arguments).join(","))
        }, map: function (a) {
            return this.pushStack(c.map(this, function (b, d) {
                return a.call(b, d, b)
            }))
        }, end: function () {
            return this.prevObject ||
                c(null)
        }, push: ea, sort: [].sort, splice: [].splice
    };
    c.fn.init.prototype = c.fn;
    c.extend = c.fn.extend = function () {
        var a = arguments[0] || {}, b = 1, d = arguments.length, f = false, e, i, j, o;
        if (typeof a === "boolean") {
            f = a;
            a = arguments[1] || {};
            b = 2
        }
        if (typeof a !== "object" && !c.isFunction(a)) a = {};
        if (d === b) {
            a = this;
            --b
        }
        for (; b < d; b++) if ((e = arguments[b]) != null) for (i in e) {
            j = a[i];
            o = e[i];
            if (a !== o) if (f && o && (c.isPlainObject(o) || c.isArray(o))) {
                j = j && (c.isPlainObject(j) || c.isArray(j)) ? j : c.isArray(o) ? [] : {};
                a[i] = c.extend(f, j, o)
            } else if (o !== w) a[i] =
                o
        }
        return a
    };
    c.extend({
        noConflict: function (a) {
            A.$ = Na;
            if (a) A.jQuery = Ma;
            return c
        }, isReady: false, ready: function () {
            if (!c.isReady) {
                if (!s.body) return setTimeout(c.ready, 13);
                c.isReady = true;
                if (Q) {
                    for (var a, b = 0; a = Q[b++];) a.call(s, c);
                    Q = null
                }
                c.fn.triggerHandler && c(s).triggerHandler("ready")
            }
        }, bindReady: function () {
            if (!xa) {
                xa = true;
                if (s.readyState === "complete") return c.ready();
                if (s.addEventListener) {
                    s.addEventListener("DOMContentLoaded", M, false);
                    A.addEventListener("load", c.ready, false)
                } else if (s.attachEvent) {
                    s.attachEvent("onreadystatechange",
                        M);
                    A.attachEvent("onload", c.ready);
                    var a = false;
                    try {
                        a = A.frameElement == null
                    } catch (b) {
                    }
                    s.documentElement.doScroll && a && oa()
                }
            }
        }, isFunction: function (a) {
            return ca.call(a) === "[object Function]"
        }, isArray: function (a) {
            return ca.call(a) === "[object Array]"
        }, isPlainObject: function (a) {
            if (!a || ca.call(a) !== "[object Object]" || a.nodeType || a.setInterval) return false;
            if (a.constructor && !da.call(a, "constructor") && !da.call(a.constructor.prototype, "isPrototypeOf")) return false;
            var b;
            for (b in a) ;
            return b === w || da.call(a, b)
        },
        isEmptyObject: function (a) {
            for (var b in a) return false;
            return true
        }, noop: function () {
        }, globalEval: function (a) {
            if (a && Qa.test(a)) {
                var b = s.getElementsByTagName("head")[0] || s.documentElement, d = s.createElement("script");
                d.type = "text/javascript";
                if (c.support.scriptEval) d.appendChild(s.createTextNode(a)); else d.text = a;
                b.insertBefore(d, b.firstChild);
                b.removeChild(d)
            }
        }, nodeName: function (a, b) {
            return a.nodeName && a.nodeName.toUpperCase() === b.toUpperCase()
        }, each: function (a, b, d) {
            var f, e = 0, i = a.length, j = i === w || c.isFunction(a);
            if (d) if (j) for (f in a) {
                if (b.apply(a[f], d) === false) break
            } else for (; e < i;) {
                if (b.apply(a[e++], d) === false) break
            } else if (j) for (f in a) {
                if (b.call(a[f], f, a[f]) === false) break
            } else for (d = a[0]; e < i && b.call(d, e, d) !== false; d = a[++e]) ;
            return a
        }, trim: function (a) {
            return (a || "").replace(Ra, "")
        }, makeArray: function (a, b) {
            b = b || [];
            if (a != null) a.length == null || typeof a === "string" || c.isFunction(a) || typeof a !== "function" && a.setInterval ? ea.call(b, a) : c.merge(b, a);
            return b
        }, inArray: function (a, b) {
            if (b.indexOf) return b.indexOf(a);
            for (var d =
                0, f = b.length; d < f; d++) if (b[d] === a) return d;
            return -1
        }, merge: function (a, b) {
            var d = a.length, f = 0;
            if (typeof b.length === "number") for (var e = b.length; f < e; f++) a[d++] = b[f]; else for (; b[f] !== w;) a[d++] = b[f++];
            a.length = d;
            return a
        }, grep: function (a, b, d) {
            for (var f = [], e = 0, i = a.length; e < i; e++) !d !== !b(a[e], e) && f.push(a[e]);
            return f
        }, map: function (a, b, d) {
            for (var f = [], e, i = 0, j = a.length; i < j; i++) {
                e = b(a[i], i, d);
                if (e != null) f[f.length] = e
            }
            return f.concat.apply([], f)
        }, guid: 1, proxy: function (a, b, d) {
            if (arguments.length === 2) if (typeof b ===
                "string") {
                d = a;
                a = d[b];
                b = w
            } else if (b && !c.isFunction(b)) {
                d = b;
                b = w
            }
            if (!b && a) b = function () {
                return a.apply(d || this, arguments)
            };
            if (a) b.guid = a.guid = a.guid || b.guid || c.guid++;
            return b
        }, uaMatch: function (a) {
            var b = {browser: ""};
            a = a.toLowerCase();
            if (/webkit/.test(a)) b = {
                browser: "webkit",
                version: /webkit[\/ ]([\w.]+)/
            }; else if (/opera/.test(a)) b = {
                browser: "opera",
                version: /version/.test(a) ? /version[\/ ]([\w.]+)/ : /opera[\/ ]([\w.]+)/
            }; else if (/msie/.test(a)) b = {browser: "msie", version: /msie ([\w.]+)/}; else if (/mozilla/.test(a) &&
                !/compatible/.test(a)) b = {browser: "mozilla", version: /rv:([\w.]+)/};
            b.version = (b.version && b.version.exec(a) || [0, "0"])[1];
            return b
        }, browser: {}
    });
    P = c.uaMatch(P);
    if (P.browser) {
        c.browser[P.browser] = true;
        c.browser.version = P.version
    }
    if (c.browser.webkit) c.browser.safari = true;
    if (V) c.inArray = function (a, b) {
        return V.call(b, a)
    };
    U = c(s);
    if (s.addEventListener) M = function () {
        s.removeEventListener("DOMContentLoaded", M, false);
        c.ready()
    }; else if (s.attachEvent) M = function () {
        if (s.readyState === "complete") {
            s.detachEvent("onreadystatechange",
                M);
            c.ready()
        }
    };
    if (V) c.inArray = function (a, b) {
        return V.call(b, a)
    };
    (function () {
        c.support = {};
        var a = s.documentElement, b = s.createElement("script"), d = s.createElement("div"), f = "script" + K();
        d.style.display = "none";
        d.innerHTML = "   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
        var e = d.getElementsByTagName("*"), i = d.getElementsByTagName("a")[0];
        if (!(!e || !e.length || !i)) {
            c.support = {
                leadingWhitespace: d.firstChild.nodeType === 3,
                tbody: !d.getElementsByTagName("tbody").length,
                htmlSerialize: !!d.getElementsByTagName("link").length,
                style: /red/.test(i.getAttribute("style")),
                hrefNormalized: i.getAttribute("href") === "/a",
                opacity: /^0.55$/.test(i.style.opacity),
                cssFloat: !!i.style.cssFloat,
                checkOn: d.getElementsByTagName("input")[0].value === "on",
                optSelected: s.createElement("select").appendChild(s.createElement("option")).selected,
                scriptEval: false,
                noCloneEvent: true,
                boxModel: null
            };
            b.type = "text/javascript";
            try {
                b.appendChild(s.createTextNode("window." + f + "=1;"))
            } catch (j) {
            }
            a.insertBefore(b,
                a.firstChild);
            if (A[f]) {
                c.support.scriptEval = true;
                delete A[f]
            }
            a.removeChild(b);
            if (d.attachEvent && d.fireEvent) {
                d.attachEvent("onclick", function o() {
                    c.support.noCloneEvent = false;
                    d.detachEvent("onclick", o)
                });
                d.cloneNode(true).fireEvent("onclick")
            }
            c(function () {
                var o = s.createElement("div");
                o.style.width = o.style.paddingLeft = "1px";
                s.body.appendChild(o);
                c.boxModel = c.support.boxModel = o.offsetWidth === 2;
                s.body.removeChild(o).style.display = "none"
            });
            a = function (o) {
                var p = s.createElement("div");
                o = "on" + o;
                var n = o in
                    p;
                if (!n) {
                    p.setAttribute(o, "return;");
                    n = typeof p[o] === "function"
                }
                return n
            };
            c.support.submitBubbles = a("submit");
            c.support.changeBubbles = a("change");
            a = b = d = e = i = null
        }
    })();
    c.props = {
        "for": "htmlFor",
        "class": "className",
        readonly: "readOnly",
        maxlength: "maxLength",
        cellspacing: "cellSpacing",
        rowspan: "rowSpan",
        colspan: "colSpan",
        tabindex: "tabIndex",
        usemap: "useMap",
        frameborder: "frameBorder"
    };
    var H = "jQuery" + K(), Ta = 0, ya = {}, Ua = {};
    c.extend({
        cache: {}, expando: H, noData: {embed: true, object: true, applet: true}, data: function (a,
                                                                                                  b, d) {
            if (!(a.nodeName && c.noData[a.nodeName.toLowerCase()])) {
                a = a == A ? ya : a;
                var f = a[H], e = c.cache;
                if (!b && !f) return null;
                f || (f = ++Ta);
                if (typeof b === "object") {
                    a[H] = f;
                    e = e[f] = c.extend(true, {}, b)
                } else e = e[f] ? e[f] : typeof d === "undefined" ? Ua : (e[f] = {});
                if (d !== w) {
                    a[H] = f;
                    e[b] = d
                }
                return typeof b === "string" ? e[b] : e
            }
        }, removeData: function (a, b) {
            if (!(a.nodeName && c.noData[a.nodeName.toLowerCase()])) {
                a = a == A ? ya : a;
                var d = a[H], f = c.cache, e = f[d];
                if (b) {
                    if (e) {
                        delete e[b];
                        c.isEmptyObject(e) && c.removeData(a)
                    }
                } else {
                    try {
                        delete a[H]
                    } catch (i) {
                        a.removeAttribute &&
                        a.removeAttribute(H)
                    }
                    delete f[d]
                }
            }
        }
    });
    c.fn.extend({
        data: function (a, b) {
            if (typeof a === "undefined" && this.length) return c.data(this[0]); else if (typeof a === "object") return this.each(function () {
                c.data(this, a)
            });
            var d = a.split(".");
            d[1] = d[1] ? "." + d[1] : "";
            if (b === w) {
                var f = this.triggerHandler("getData" + d[1] + "!", [d[0]]);
                if (f === w && this.length) f = c.data(this[0], a);
                return f === w && d[1] ? this.data(d[0]) : f
            } else return this.trigger("setData" + d[1] + "!", [d[0], b]).each(function () {
                c.data(this, a, b)
            })
        }, removeData: function (a) {
            return this.each(function () {
                c.removeData(this,
                    a)
            })
        }
    });
    c.extend({
        queue: function (a, b, d) {
            if (a) {
                b = (b || "fx") + "queue";
                var f = c.data(a, b);
                if (!d) return f || [];
                if (!f || c.isArray(d)) f = c.data(a, b, c.makeArray(d)); else f.push(d);
                return f
            }
        }, dequeue: function (a, b) {
            b = b || "fx";
            var d = c.queue(a, b), f = d.shift();
            if (f === "inprogress") f = d.shift();
            if (f) {
                b === "fx" && d.unshift("inprogress");
                f.call(a, function () {
                    c.dequeue(a, b)
                })
            }
        }
    });
    c.fn.extend({
        queue: function (a, b) {
            if (typeof a !== "string") {
                b = a;
                a = "fx"
            }
            if (b === w) return c.queue(this[0], a);
            return this.each(function () {
                var d = c.queue(this,
                    a, b);
                a === "fx" && d[0] !== "inprogress" && c.dequeue(this, a)
            })
        }, dequeue: function (a) {
            return this.each(function () {
                c.dequeue(this, a)
            })
        }, delay: function (a, b) {
            a = c.fx ? c.fx.speeds[a] || a : a;
            b = b || "fx";
            return this.queue(b, function () {
                var d = this;
                setTimeout(function () {
                    c.dequeue(d, b)
                }, a)
            })
        }, clearQueue: function (a) {
            return this.queue(a || "fx", [])
        }
    });
    var za = /[\n\t]/g, fa = /\s+/, Va = /\r/g, Wa = /href|src|style/, Xa = /(button|input)/i,
        Ya = /(button|input|object|select|textarea)/i, Za = /^(a|area)$/i, Aa = /radio|checkbox/;
    c.fn.extend({
        attr: function (a,
                        b) {
            return $(this, a, b, true, c.attr)
        }, removeAttr: function (a) {
            return this.each(function () {
                c.attr(this, a, "");
                this.nodeType === 1 && this.removeAttribute(a)
            })
        }, addClass: function (a) {
            if (c.isFunction(a)) return this.each(function (p) {
                var n = c(this);
                n.addClass(a.call(this, p, n.attr("class")))
            });
            if (a && typeof a === "string") for (var b = (a || "").split(fa), d = 0, f = this.length; d < f; d++) {
                var e = this[d];
                if (e.nodeType === 1) if (e.className) for (var i = " " + e.className + " ", j = 0, o = b.length; j < o; j++) {
                    if (i.indexOf(" " + b[j] + " ") < 0) e.className +=
                        " " + b[j]
                } else e.className = a
            }
            return this
        }, removeClass: function (a) {
            if (c.isFunction(a)) return this.each(function (p) {
                var n = c(this);
                n.removeClass(a.call(this, p, n.attr("class")))
            });
            if (a && typeof a === "string" || a === w) for (var b = (a || "").split(fa), d = 0, f = this.length; d < f; d++) {
                var e = this[d];
                if (e.nodeType === 1 && e.className) if (a) {
                    for (var i = (" " + e.className + " ").replace(za, " "), j = 0, o = b.length; j < o; j++) i = i.replace(" " + b[j] + " ", " ");
                    e.className = i.substring(1, i.length - 1)
                } else e.className = ""
            }
            return this
        }, toggleClass: function (a,
                                  b) {
            var d = typeof a, f = typeof b === "boolean";
            if (c.isFunction(a)) return this.each(function (e) {
                var i = c(this);
                i.toggleClass(a.call(this, e, i.attr("class"), b), b)
            });
            return this.each(function () {
                if (d === "string") for (var e, i = 0, j = c(this), o = b, p = a.split(fa); e = p[i++];) {
                    o = f ? o : !j.hasClass(e);
                    j[o ? "addClass" : "removeClass"](e)
                } else if (d === "undefined" || d === "boolean") {
                    this.className && c.data(this, "__className__", this.className);
                    this.className = this.className || a === false ? "" : c.data(this, "__className__") || ""
                }
            })
        }, hasClass: function (a) {
            a =
                " " + a + " ";
            for (var b = 0, d = this.length; b < d; b++) if ((" " + this[b].className + " ").replace(za, " ").indexOf(a) > -1) return true;
            return false
        }, val: function (a) {
            if (a === w) {
                var b = this[0];
                if (b) {
                    if (c.nodeName(b, "option")) return (b.attributes.value || {}).specified ? b.value : b.text;
                    if (c.nodeName(b, "select")) {
                        var d = b.selectedIndex, f = [], e = b.options;
                        b = b.type === "select-one";
                        if (d < 0) return null;
                        var i = b ? d : 0;
                        for (d = b ? d + 1 : e.length; i < d; i++) {
                            var j = e[i];
                            if (j.selected) {
                                a = c(j).val();
                                if (b) return a;
                                f.push(a)
                            }
                        }
                        return f
                    }
                    if (Aa.test(b.type) &&
                        !c.support.checkOn) return b.getAttribute("value") === null ? "on" : b.value;
                    return (b.value || "").replace(Va, "")
                }
                return w
            }
            var o = c.isFunction(a);
            return this.each(function (p) {
                var n = c(this), t = a;
                if (this.nodeType === 1) {
                    if (o) t = a.call(this, p, n.val());
                    if (typeof t === "number") t += "";
                    if (c.isArray(t) && Aa.test(this.type)) this.checked = c.inArray(n.val(), t) >= 0; else if (c.nodeName(this, "select")) {
                        var z = c.makeArray(t);
                        c("option", this).each(function () {
                            this.selected = c.inArray(c(this).val(), z) >= 0
                        });
                        if (!z.length) this.selectedIndex =
                            -1
                    } else this.value = t
                }
            })
        }
    });
    c.extend({
        attrFn: {val: true, css: true, html: true, text: true, data: true, width: true, height: true, offset: true},
        attr: function (a, b, d, f) {
            if (!a || a.nodeType === 3 || a.nodeType === 8) return w;
            if (f && b in c.attrFn) return c(a)[b](d);
            f = a.nodeType !== 1 || !c.isXMLDoc(a);
            var e = d !== w;
            b = f && c.props[b] || b;
            if (a.nodeType === 1) {
                var i = Wa.test(b);
                if (b in a && f && !i) {
                    if (e) {
                        if (b === "type" && Xa.test(a.nodeName) && a.parentNode) throw"type property can't be changed";
                        a[b] = d
                    }
                    if (c.nodeName(a, "form") && a.getAttributeNode(b)) return a.getAttributeNode(b).nodeValue;
                    if (b === "tabIndex") return (b = a.getAttributeNode("tabIndex")) && b.specified ? b.value : Ya.test(a.nodeName) || Za.test(a.nodeName) && a.href ? 0 : w;
                    return a[b]
                }
                if (!c.support.style && f && b === "style") {
                    if (e) a.style.cssText = "" + d;
                    return a.style.cssText
                }
                e && a.setAttribute(b, "" + d);
                a = !c.support.hrefNormalized && f && i ? a.getAttribute(b, 2) : a.getAttribute(b);
                return a === null ? w : a
            }
            return c.style(a, b, d)
        }
    });
    var $a = function (a) {
        return a.replace(/[^\w\s\.\|`]/g, function (b) {
            return "\\" + b
        })
    };
    c.event = {
        add: function (a, b, d, f) {
            if (!(a.nodeType ===
                3 || a.nodeType === 8)) {
                if (a.setInterval && a !== A && !a.frameElement) a = A;
                if (!d.guid) d.guid = c.guid++;
                if (f !== w) {
                    d = c.proxy(d);
                    d.data = f
                }
                var e = c.data(a, "events") || c.data(a, "events", {}), i = c.data(a, "handle"), j;
                if (!i) {
                    j = function () {
                        return typeof c !== "undefined" && !c.event.triggered ? c.event.handle.apply(j.elem, arguments) : w
                    };
                    i = c.data(a, "handle", j)
                }
                if (i) {
                    i.elem = a;
                    b = b.split(/\s+/);
                    for (var o, p = 0; o = b[p++];) {
                        var n = o.split(".");
                        o = n.shift();
                        d.type = n.slice(0).sort().join(".");
                        var t = e[o], z = this.special[o] || {};
                        if (!t) {
                            t = e[o] = {};
                            if (!z.setup || z.setup.call(a, f, n, d) === false) if (a.addEventListener) a.addEventListener(o, i, false); else a.attachEvent && a.attachEvent("on" + o, i)
                        }
                        if (z.add) if ((n = z.add.call(a, d, f, n, t)) && c.isFunction(n)) {
                            n.guid = n.guid || d.guid;
                            d = n
                        }
                        t[d.guid] = d;
                        this.global[o] = true
                    }
                    a = null
                }
            }
        },
        global: {},
        remove: function (a, b, d) {
            if (!(a.nodeType === 3 || a.nodeType === 8)) {
                var f = c.data(a, "events"), e, i, j;
                if (f) {
                    if (b === w || typeof b === "string" && b.charAt(0) === ".") for (i in f) this.remove(a, i + (b || "")); else {
                        if (b.type) {
                            d = b.handler;
                            b = b.type
                        }
                        b = b.split(/\s+/);
                        for (var o = 0; i = b[o++];) {
                            var p = i.split(".");
                            i = p.shift();
                            var n = !p.length, t = c.map(p.slice(0).sort(), $a);
                            t = new RegExp("(^|\\.)" + t.join("\\.(?:.*\\.)?") + "(\\.|$)");
                            var z = this.special[i] || {};
                            if (f[i]) {
                                if (d) {
                                    j = f[i][d.guid];
                                    delete f[i][d.guid]
                                } else for (var B in f[i]) if (n || t.test(f[i][B].type)) delete f[i][B];
                                z.remove && z.remove.call(a, p, j);
                                for (e in f[i]) break;
                                if (!e) {
                                    if (!z.teardown || z.teardown.call(a, p) === false) if (a.removeEventListener) a.removeEventListener(i, c.data(a, "handle"), false); else a.detachEvent && a.detachEvent("on" +
                                        i, c.data(a, "handle"));
                                    e = null;
                                    delete f[i]
                                }
                            }
                        }
                    }
                    for (e in f) break;
                    if (!e) {
                        if (B = c.data(a, "handle")) B.elem = null;
                        c.removeData(a, "events");
                        c.removeData(a, "handle")
                    }
                }
            }
        },
        trigger: function (a, b, d, f) {
            var e = a.type || a;
            if (!f) {
                a = typeof a === "object" ? a[H] ? a : c.extend(c.Event(e), a) : c.Event(e);
                if (e.indexOf("!") >= 0) {
                    a.type = e = e.slice(0, -1);
                    a.exclusive = true
                }
                if (!d) {
                    a.stopPropagation();
                    this.global[e] && c.each(c.cache, function () {
                        this.events && this.events[e] && c.event.trigger(a, b, this.handle.elem)
                    })
                }
                if (!d || d.nodeType === 3 || d.nodeType ===
                    8) return w;
                a.result = w;
                a.target = d;
                b = c.makeArray(b);
                b.unshift(a)
            }
            a.currentTarget = d;
            var i = c.data(d, "handle");
            i && i.apply(d, b);
            var j, o;
            try {
                if (!(d && d.nodeName && c.noData[d.nodeName.toLowerCase()])) {
                    j = d[e];
                    o = d["on" + e]
                }
            } catch (p) {
            }
            i = c.nodeName(d, "a") && e === "click";
            if (!f && j && !a.isDefaultPrevented() && !i) {
                this.triggered = true;
                try {
                    d[e]()
                } catch (n) {
                }
            } else if (o && d["on" + e].apply(d, b) === false) a.result = false;
            this.triggered = false;
            if (!a.isPropagationStopped()) (d = d.parentNode || d.ownerDocument) && c.event.trigger(a, b, d, true)
        },
        handle: function (a) {
            var b, d;
            a = arguments[0] = c.event.fix(a || A.event);
            a.currentTarget = this;
            d = a.type.split(".");
            a.type = d.shift();
            b = !d.length && !a.exclusive;
            var f = new RegExp("(^|\\.)" + d.slice(0).sort().join("\\.(?:.*\\.)?") + "(\\.|$)");
            d = (c.data(this, "events") || {})[a.type];
            for (var e in d) {
                var i = d[e];
                if (b || f.test(i.type)) {
                    a.handler = i;
                    a.data = i.data;
                    i = i.apply(this, arguments);
                    if (i !== w) {
                        a.result = i;
                        if (i === false) {
                            a.preventDefault();
                            a.stopPropagation()
                        }
                    }
                    if (a.isImmediatePropagationStopped()) break
                }
            }
            return a.result
        },
        props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase formElement handler keyCode layerX layerY metaKey newValue offsetX offsetY originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
        fix: function (a) {
            if (a[H]) return a;
            var b = a;
            a = c.Event(b);
            for (var d = this.props.length, f; d;) {
                f = this.props[--d];
                a[f] = b[f]
            }
            if (!a.target) a.target = a.srcElement ||
                s;
            if (a.target.nodeType === 3) a.target = a.target.parentNode;
            if (!a.relatedTarget && a.formElement) a.relatedTarget = a.formElement === a.target ? a.toElement : a.formElement;
            if (a.pageX == null && a.clientX != null) {
                b = s.documentElement;
                d = s.body;
                a.pageX = a.clientX + (b && b.scrollLeft || d && d.scrollLeft || 0) - (b && b.clientLeft || d && d.clientLeft || 0);
                a.pageY = a.clientY + (b && b.scrollTop || d && d.scrollTop || 0) - (b && b.clientTop || d && d.clientTop || 0)
            }
            if (!a.which && (a.charCode || a.charCode === 0 ? a.charCode : a.keyCode)) a.which = a.charCode || a.keyCode;
            if (!a.metaKey &&
                a.ctrlKey) a.metaKey = a.ctrlKey;
            if (!a.which && a.button !== w) a.which = a.button & 1 ? 1 : a.button & 2 ? 3 : a.button & 4 ? 2 : 0;
            return a
        },
        guid: 1E8,
        proxy: c.proxy,
        special: {
            ready: {setup: c.bindReady, teardown: c.noop}, live: {
                add: function (a, b) {
                    c.extend(a, b || {});
                    a.guid += b.selector + b.live;
                    c.event.add(this, b.live, qa, b)
                }, remove: function (a) {
                    if (a.length) {
                        var b = 0, d = new RegExp("(^|\\.)" + a[0] + "(\\.|$)");
                        c.each(c.data(this, "events").live || {}, function () {
                            d.test(this.type) && b++
                        });
                        b < 1 && c.event.remove(this, a[0], qa)
                    }
                }, special: {}
            }, beforeunload: {
                setup: function (a,
                                 b, d) {
                    if (this.setInterval) this.onbeforeunload = d;
                    return false
                }, teardown: function (a, b) {
                    if (this.onbeforeunload === b) this.onbeforeunload = null
                }
            }
        }
    };
    c.Event = function (a) {
        if (!this.preventDefault) return new c.Event(a);
        if (a && a.type) {
            this.originalEvent = a;
            this.type = a.type
        } else this.type = a;
        this.timeStamp = K();
        this[H] = true
    };
    c.Event.prototype = {
        preventDefault: function () {
            this.isDefaultPrevented = ba;
            var a = this.originalEvent;
            if (a) {
                a.preventDefault && a.preventDefault();
                a.returnValue = false
            }
        }, stopPropagation: function () {
            this.isPropagationStopped =
                ba;
            var a = this.originalEvent;
            if (a) {
                a.stopPropagation && a.stopPropagation();
                a.cancelBubble = true
            }
        }, stopImmediatePropagation: function () {
            this.isImmediatePropagationStopped = ba;
            this.stopPropagation()
        }, isDefaultPrevented: aa, isPropagationStopped: aa, isImmediatePropagationStopped: aa
    };
    var Ba = function (a) {
        for (var b = a.relatedTarget; b && b !== this;) try {
            b = b.parentNode
        } catch (d) {
            break
        }
        if (b !== this) {
            a.type = a.data;
            c.event.handle.apply(this, arguments)
        }
    }, Ca = function (a) {
        a.type = a.data;
        c.event.handle.apply(this, arguments)
    };
    c.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function (a, b) {
        c.event.special[a] = {
            setup: function (d) {
                c.event.add(this, b, d && d.selector ? Ca : Ba, a)
            }, teardown: function (d) {
                c.event.remove(this, b, d && d.selector ? Ca : Ba)
            }
        }
    });
    if (!c.support.submitBubbles) c.event.special.submit = {
        setup: function (a, b, d) {
            if (this.nodeName.toLowerCase() !== "form") {
                c.event.add(this, "click.specialSubmit." + d.guid, function (f) {
                    var e = f.target, i = e.type;
                    if ((i === "submit" || i === "image") && c(e).closest("form").length) return pa("submit", this, arguments)
                });
                c.event.add(this, "keypress.specialSubmit." +
                    d.guid, function (f) {
                    var e = f.target, i = e.type;
                    if ((i === "text" || i === "password") && c(e).closest("form").length && f.keyCode === 13) return pa("submit", this, arguments)
                })
            } else return false
        }, remove: function (a, b) {
            c.event.remove(this, "click.specialSubmit" + (b ? "." + b.guid : ""));
            c.event.remove(this, "keypress.specialSubmit" + (b ? "." + b.guid : ""))
        }
    };
    if (!c.support.changeBubbles) {
        var ga = /textarea|input|select/i;

        function Da(a) {
            var b = a.type, d = a.value;
            if (b === "radio" || b === "checkbox") d = a.checked; else if (b === "select-multiple") d = a.selectedIndex >
            -1 ? c.map(a.options, function (f) {
                return f.selected
            }).join("-") : ""; else if (a.nodeName.toLowerCase() === "select") d = a.selectedIndex;
            return d
        }

        function ha(a, b) {
            var d = a.target, f, e;
            if (!(!ga.test(d.nodeName) || d.readOnly)) {
                f = c.data(d, "_change_data");
                e = Da(d);
                if (e !== f) {
                    if (a.type !== "focusout" || d.type !== "radio") c.data(d, "_change_data", e);
                    if (d.type !== "select" && (f != null || e)) {
                        a.type = "change";
                        return c.event.trigger(a, b, this)
                    }
                }
            }
        }

        c.event.special.change = {
            filters: {
                focusout: ha, click: function (a) {
                    var b = a.target, d = b.type;
                    if (d ===
                        "radio" || d === "checkbox" || b.nodeName.toLowerCase() === "select") return ha.call(this, a)
                }, keydown: function (a) {
                    var b = a.target, d = b.type;
                    if (a.keyCode === 13 && b.nodeName.toLowerCase() !== "textarea" || a.keyCode === 32 && (d === "checkbox" || d === "radio") || d === "select-multiple") return ha.call(this, a)
                }, beforeactivate: function (a) {
                    a = a.target;
                    a.nodeName.toLowerCase() === "input" && a.type === "radio" && c.data(a, "_change_data", Da(a))
                }
            }, setup: function (a, b, d) {
                for (var f in W) c.event.add(this, f + ".specialChange." + d.guid, W[f]);
                return ga.test(this.nodeName)
            },
            remove: function (a, b) {
                for (var d in W) c.event.remove(this, d + ".specialChange" + (b ? "." + b.guid : ""), W[d]);
                return ga.test(this.nodeName)
            }
        };
        var W = c.event.special.change.filters
    }
    s.addEventListener && c.each({focus: "focusin", blur: "focusout"}, function (a, b) {
        function d(f) {
            f = c.event.fix(f);
            f.type = b;
            return c.event.handle.call(this, f)
        }

        c.event.special[b] = {
            setup: function () {
                this.addEventListener(a, d, true)
            }, teardown: function () {
                this.removeEventListener(a, d, true)
            }
        }
    });
    c.each(["bind", "one"], function (a, b) {
        c.fn[b] = function (d,
                            f, e) {
            if (typeof d === "object") {
                for (var i in d) this[b](i, f, d[i], e);
                return this
            }
            if (c.isFunction(f)) {
                thisObject = e;
                e = f;
                f = w
            }
            var j = b === "one" ? c.proxy(e, function (o) {
                c(this).unbind(o, j);
                return e.apply(this, arguments)
            }) : e;
            return d === "unload" && b !== "one" ? this.one(d, f, e, thisObject) : this.each(function () {
                c.event.add(this, d, j, f)
            })
        }
    });
    c.fn.extend({
        unbind: function (a, b) {
            if (typeof a === "object" && !a.preventDefault) {
                for (var d in a) this.unbind(d, a[d]);
                return this
            }
            return this.each(function () {
                c.event.remove(this, a, b)
            })
        }, trigger: function (a,
                              b) {
            return this.each(function () {
                c.event.trigger(a, b, this)
            })
        }, triggerHandler: function (a, b) {
            if (this[0]) {
                a = c.Event(a);
                a.preventDefault();
                a.stopPropagation();
                c.event.trigger(a, b, this[0]);
                return a.result
            }
        }, toggle: function (a) {
            for (var b = arguments, d = 1; d < b.length;) c.proxy(a, b[d++]);
            return this.click(c.proxy(a, function (f) {
                var e = (c.data(this, "lastToggle" + a.guid) || 0) % d;
                c.data(this, "lastToggle" + a.guid, e + 1);
                f.preventDefault();
                return b[e].apply(this, arguments) || false
            }))
        }, hover: function (a, b) {
            return this.mouseenter(a).mouseleave(b ||
                a)
        }, live: function (a, b, d) {
            if (c.isFunction(b)) {
                d = b;
                b = w
            }
            c(this.context).bind(ra(a, this.selector), {data: b, selector: this.selector, live: a}, d);
            return this
        }, die: function (a, b) {
            c(this.context).unbind(ra(a, this.selector), b ? {guid: b.guid + this.selector + a} : null);
            return this
        }
    });
    c.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "), function (a, b) {
        c.fn[b] = function (d) {
            return d ?
                this.bind(b, d) : this.trigger(b)
        };
        if (c.attrFn) c.attrFn[b] = true
    });
    A.attachEvent && !A.addEventListener && A.attachEvent("onunload", function () {
        for (var a in c.cache) if (c.cache[a].handle) try {
            c.event.remove(c.cache[a].handle.elem)
        } catch (b) {
        }
    });
    (function () {
        function a(g) {
            for (var h = "", k, m = 0; g[m]; m++) {
                k = g[m];
                if (k.nodeType === 3 || k.nodeType === 4) h += k.nodeValue; else if (k.nodeType !== 8) h += a(k.childNodes)
            }
            return h
        }

        function b(g, h, k, m, r, q) {
            r = 0;
            for (var v = m.length; r < v; r++) {
                var u = m[r];
                if (u) {
                    u = u[g];
                    for (var y = false; u;) {
                        if (u.sizcache ===
                            k) {
                            y = m[u.sizset];
                            break
                        }
                        if (u.nodeType === 1 && !q) {
                            u.sizcache = k;
                            u.sizset = r
                        }
                        if (u.nodeName.toLowerCase() === h) {
                            y = u;
                            break
                        }
                        u = u[g]
                    }
                    m[r] = y
                }
            }
        }

        function d(g, h, k, m, r, q) {
            r = 0;
            for (var v = m.length; r < v; r++) {
                var u = m[r];
                if (u) {
                    u = u[g];
                    for (var y = false; u;) {
                        if (u.sizcache === k) {
                            y = m[u.sizset];
                            break
                        }
                        if (u.nodeType === 1) {
                            if (!q) {
                                u.sizcache = k;
                                u.sizset = r
                            }
                            if (typeof h !== "string") {
                                if (u === h) {
                                    y = true;
                                    break
                                }
                            } else if (p.filter(h, [u]).length > 0) {
                                y = u;
                                break
                            }
                        }
                        u = u[g]
                    }
                    m[r] = y
                }
            }
        }

        var f = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
            e = 0, i = Object.prototype.toString, j = false, o = true;
        [0, 0].sort(function () {
            o = false;
            return 0
        });
        var p = function (g, h, k, m) {
            k = k || [];
            var r = h = h || s;
            if (h.nodeType !== 1 && h.nodeType !== 9) return [];
            if (!g || typeof g !== "string") return k;
            for (var q = [], v, u, y, S, I = true, N = x(h), J = g; (f.exec(""), v = f.exec(J)) !== null;) {
                J = v[3];
                q.push(v[1]);
                if (v[2]) {
                    S = v[3];
                    break
                }
            }
            if (q.length > 1 && t.exec(g)) if (q.length === 2 && n.relative[q[0]]) u = ia(q[0] + q[1], h); else for (u = n.relative[q[0]] ? [h] : p(q.shift(), h); q.length;) {
                g = q.shift();
                if (n.relative[g]) g += q.shift();
                u = ia(g, u)
            } else {
                if (!m && q.length > 1 && h.nodeType === 9 && !N && n.match.ID.test(q[0]) && !n.match.ID.test(q[q.length - 1])) {
                    v = p.find(q.shift(), h, N);
                    h = v.expr ? p.filter(v.expr, v.set)[0] : v.set[0]
                }
                if (h) {
                    v = m ? {
                        expr: q.pop(),
                        set: B(m)
                    } : p.find(q.pop(), q.length === 1 && (q[0] === "~" || q[0] === "+") && h.parentNode ? h.parentNode : h, N);
                    u = v.expr ? p.filter(v.expr, v.set) : v.set;
                    if (q.length > 0) y = B(u); else I = false;
                    for (; q.length;) {
                        var E = q.pop();
                        v = E;
                        if (n.relative[E]) v = q.pop(); else E = "";
                        if (v == null) v = h;
                        n.relative[E](y, v, N)
                    }
                } else y = []
            }
            y || (y = u);
            if (!y) throw"Syntax error, unrecognized expression: " +
            (E || g);
            if (i.call(y) === "[object Array]") if (I) if (h && h.nodeType === 1) for (g = 0; y[g] != null; g++) {
                if (y[g] && (y[g] === true || y[g].nodeType === 1 && F(h, y[g]))) k.push(u[g])
            } else for (g = 0; y[g] != null; g++) y[g] && y[g].nodeType === 1 && k.push(u[g]); else k.push.apply(k, y); else B(y, k);
            if (S) {
                p(S, r, k, m);
                p.uniqueSort(k)
            }
            return k
        };
        p.uniqueSort = function (g) {
            if (D) {
                j = o;
                g.sort(D);
                if (j) for (var h = 1; h < g.length; h++) g[h] === g[h - 1] && g.splice(h--, 1)
            }
            return g
        };
        p.matches = function (g, h) {
            return p(g, null, null, h)
        };
        p.find = function (g, h, k) {
            var m, r;
            if (!g) return [];
            for (var q = 0, v = n.order.length; q < v; q++) {
                var u = n.order[q];
                if (r = n.leftMatch[u].exec(g)) {
                    var y = r[1];
                    r.splice(1, 1);
                    if (y.substr(y.length - 1) !== "\\") {
                        r[1] = (r[1] || "").replace(/\\/g, "");
                        m = n.find[u](r, h, k);
                        if (m != null) {
                            g = g.replace(n.match[u], "");
                            break
                        }
                    }
                }
            }
            m || (m = h.getElementsByTagName("*"));
            return {set: m, expr: g}
        };
        p.filter = function (g, h, k, m) {
            for (var r = g, q = [], v = h, u, y, S = h && h[0] && x(h[0]); g && h.length;) {
                for (var I in n.filter) if ((u = n.leftMatch[I].exec(g)) != null && u[2]) {
                    var N = n.filter[I], J, E;
                    E = u[1];
                    y = false;
                    u.splice(1, 1);
                    if (E.substr(E.length -
                        1) !== "\\") {
                        if (v === q) q = [];
                        if (n.preFilter[I]) if (u = n.preFilter[I](u, v, k, q, m, S)) {
                            if (u === true) continue
                        } else y = J = true;
                        if (u) for (var X = 0; (E = v[X]) != null; X++) if (E) {
                            J = N(E, u, X, v);
                            var Ea = m ^ !!J;
                            if (k && J != null) if (Ea) y = true; else v[X] = false; else if (Ea) {
                                q.push(E);
                                y = true
                            }
                        }
                        if (J !== w) {
                            k || (v = q);
                            g = g.replace(n.match[I], "");
                            if (!y) return [];
                            break
                        }
                    }
                }
                if (g === r) if (y == null) throw"Syntax error, unrecognized expression: " + g; else break;
                r = g
            }
            return v
        };
        var n = p.selectors = {
            order: ["ID", "NAME", "TAG"], match: {
                ID: /#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
                CLASS: /\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
                NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,
                ATTR: /\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
                TAG: /^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,
                CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,
                POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,
                PSEUDO: /:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
            }, leftMatch: {}, attrMap: {"class": "className", "for": "htmlFor"}, attrHandle: {
                href: function (g) {
                    return g.getAttribute("href")
                }
            },
            relative: {
                "+": function (g, h) {
                    var k = typeof h === "string", m = k && !/\W/.test(h);
                    k = k && !m;
                    if (m) h = h.toLowerCase();
                    m = 0;
                    for (var r = g.length, q; m < r; m++) if (q = g[m]) {
                        for (; (q = q.previousSibling) && q.nodeType !== 1;) ;
                        g[m] = k || q && q.nodeName.toLowerCase() === h ? q || false : q === h
                    }
                    k && p.filter(h, g, true)
                }, ">": function (g, h) {
                    var k = typeof h === "string";
                    if (k && !/\W/.test(h)) {
                        h = h.toLowerCase();
                        for (var m = 0, r = g.length; m < r; m++) {
                            var q = g[m];
                            if (q) {
                                k = q.parentNode;
                                g[m] = k.nodeName.toLowerCase() === h ? k : false
                            }
                        }
                    } else {
                        m = 0;
                        for (r = g.length; m < r; m++) if (q = g[m]) g[m] =
                            k ? q.parentNode : q.parentNode === h;
                        k && p.filter(h, g, true)
                    }
                }, "": function (g, h, k) {
                    var m = e++, r = d;
                    if (typeof h === "string" && !/\W/.test(h)) {
                        var q = h = h.toLowerCase();
                        r = b
                    }
                    r("parentNode", h, m, g, q, k)
                }, "~": function (g, h, k) {
                    var m = e++, r = d;
                    if (typeof h === "string" && !/\W/.test(h)) {
                        var q = h = h.toLowerCase();
                        r = b
                    }
                    r("previousSibling", h, m, g, q, k)
                }
            }, find: {
                ID: function (g, h, k) {
                    if (typeof h.getElementById !== "undefined" && !k) return (g = h.getElementById(g[1])) ? [g] : []
                }, NAME: function (g, h) {
                    if (typeof h.getElementsByName !== "undefined") {
                        var k = [];
                        h = h.getElementsByName(g[1]);
                        for (var m = 0, r = h.length; m < r; m++) h[m].getAttribute("name") === g[1] && k.push(h[m]);
                        return k.length === 0 ? null : k
                    }
                }, TAG: function (g, h) {
                    return h.getElementsByTagName(g[1])
                }
            }, preFilter: {
                CLASS: function (g, h, k, m, r, q) {
                    g = " " + g[1].replace(/\\/g, "") + " ";
                    if (q) return g;
                    q = 0;
                    for (var v; (v = h[q]) != null; q++) if (v) if (r ^ (v.className && (" " + v.className + " ").replace(/[\t\n]/g, " ").indexOf(g) >= 0)) k || m.push(v); else if (k) h[q] = false;
                    return false
                }, ID: function (g) {
                    return g[1].replace(/\\/g, "")
                }, TAG: function (g) {
                    return g[1].toLowerCase()
                },
                CHILD: function (g) {
                    if (g[1] === "nth") {
                        var h = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(g[2] === "even" && "2n" || g[2] === "odd" && "2n+1" || !/\D/.test(g[2]) && "0n+" + g[2] || g[2]);
                        g[2] = h[1] + (h[2] || 1) - 0;
                        g[3] = h[3] - 0
                    }
                    g[0] = e++;
                    return g
                }, ATTR: function (g, h, k, m, r, q) {
                    h = g[1].replace(/\\/g, "");
                    if (!q && n.attrMap[h]) g[1] = n.attrMap[h];
                    if (g[2] === "~=") g[4] = " " + g[4] + " ";
                    return g
                }, PSEUDO: function (g, h, k, m, r) {
                    if (g[1] === "not") if ((f.exec(g[3]) || "").length > 1 || /^\w/.test(g[3])) g[3] = p(g[3], null, null, h); else {
                        g = p.filter(g[3], h, k, true ^ r);
                        k || m.push.apply(m,
                            g);
                        return false
                    } else if (n.match.POS.test(g[0]) || n.match.CHILD.test(g[0])) return true;
                    return g
                }, POS: function (g) {
                    g.unshift(true);
                    return g
                }
            }, filters: {
                enabled: function (g) {
                    return g.disabled === false && g.type !== "hidden"
                }, disabled: function (g) {
                    return g.disabled === true
                }, checked: function (g) {
                    return g.checked === true
                }, selected: function (g) {
                    return g.selected === true
                }, parent: function (g) {
                    return !!g.firstChild
                }, empty: function (g) {
                    return !g.firstChild
                }, has: function (g, h, k) {
                    return !!p(k[3], g).length
                }, header: function (g) {
                    return /h\d/i.test(g.nodeName)
                },
                text: function (g) {
                    return "text" === g.type
                }, radio: function (g) {
                    return "radio" === g.type
                }, checkbox: function (g) {
                    return "checkbox" === g.type
                }, file: function (g) {
                    return "file" === g.type
                }, password: function (g) {
                    return "password" === g.type
                }, submit: function (g) {
                    return "submit" === g.type
                }, image: function (g) {
                    return "image" === g.type
                }, reset: function (g) {
                    return "reset" === g.type
                }, button: function (g) {
                    return "button" === g.type || g.nodeName.toLowerCase() === "button"
                }, input: function (g) {
                    return /input|select|textarea|button/i.test(g.nodeName)
                }
            },
            setFilters: {
                first: function (g, h) {
                    return h === 0
                }, last: function (g, h, k, m) {
                    return h === m.length - 1
                }, even: function (g, h) {
                    return h % 2 === 0
                }, odd: function (g, h) {
                    return h % 2 === 1
                }, lt: function (g, h, k) {
                    return h < k[3] - 0
                }, gt: function (g, h, k) {
                    return h > k[3] - 0
                }, nth: function (g, h, k) {
                    return k[3] - 0 === h
                }, eq: function (g, h, k) {
                    return k[3] - 0 === h
                }
            }, filter: {
                PSEUDO: function (g, h, k, m) {
                    var r = h[1], q = n.filters[r];
                    if (q) return q(g, k, h, m); else if (r === "contains") return (g.textContent || g.innerText || a([g]) || "").indexOf(h[3]) >= 0; else if (r === "not") {
                        h =
                            h[3];
                        k = 0;
                        for (m = h.length; k < m; k++) if (h[k] === g) return false;
                        return true
                    } else throw"Syntax error, unrecognized expression: " + r;
                }, CHILD: function (g, h) {
                    var k = h[1], m = g;
                    switch (k) {
                        case "only":
                        case "first":
                            for (; m = m.previousSibling;) if (m.nodeType === 1) return false;
                            if (k === "first") return true;
                            m = g;
                        case "last":
                            for (; m = m.nextSibling;) if (m.nodeType === 1) return false;
                            return true;
                        case "nth":
                            k = h[2];
                            var r = h[3];
                            if (k === 1 && r === 0) return true;
                            h = h[0];
                            var q = g.parentNode;
                            if (q && (q.sizcache !== h || !g.nodeIndex)) {
                                var v = 0;
                                for (m = q.firstChild; m; m =
                                    m.nextSibling) if (m.nodeType === 1) m.nodeIndex = ++v;
                                q.sizcache = h
                            }
                            g = g.nodeIndex - r;
                            return k === 0 ? g === 0 : g % k === 0 && g / k >= 0
                    }
                }, ID: function (g, h) {
                    return g.nodeType === 1 && g.getAttribute("id") === h
                }, TAG: function (g, h) {
                    return h === "*" && g.nodeType === 1 || g.nodeName.toLowerCase() === h
                }, CLASS: function (g, h) {
                    return (" " + (g.className || g.getAttribute("class")) + " ").indexOf(h) > -1
                }, ATTR: function (g, h) {
                    var k = h[1];
                    g = n.attrHandle[k] ? n.attrHandle[k](g) : g[k] != null ? g[k] : g.getAttribute(k);
                    k = g + "";
                    var m = h[2];
                    h = h[4];
                    return g == null ? m === "!=" : m ===
                    "=" ? k === h : m === "*=" ? k.indexOf(h) >= 0 : m === "~=" ? (" " + k + " ").indexOf(h) >= 0 : !h ? k && g !== false : m === "!=" ? k !== h : m === "^=" ? k.indexOf(h) === 0 : m === "$=" ? k.substr(k.length - h.length) === h : m === "|=" ? k === h || k.substr(0, h.length + 1) === h + "-" : false
                }, POS: function (g, h, k, m) {
                    var r = n.setFilters[h[2]];
                    if (r) return r(g, k, h, m)
                }
            }
        }, t = n.match.POS;
        for (var z in n.match) {
            n.match[z] = new RegExp(n.match[z].source + /(?![^\[]*\])(?![^\(]*\))/.source);
            n.leftMatch[z] = new RegExp(/(^(?:.|\r|\n)*?)/.source + n.match[z].source.replace(/\\(\d+)/g, function (g,
                                                                                                                    h) {
                return "\\" + (h - 0 + 1)
            }))
        }
        var B = function (g, h) {
            g = Array.prototype.slice.call(g, 0);
            if (h) {
                h.push.apply(h, g);
                return h
            }
            return g
        };
        try {
            Array.prototype.slice.call(s.documentElement.childNodes, 0)
        } catch (C) {
            B = function (g, h) {
                h = h || [];
                if (i.call(g) === "[object Array]") Array.prototype.push.apply(h, g); else if (typeof g.length === "number") for (var k = 0, m = g.length; k < m; k++) h.push(g[k]); else for (k = 0; g[k]; k++) h.push(g[k]);
                return h
            }
        }
        var D;
        if (s.documentElement.compareDocumentPosition) D = function (g, h) {
            if (!g.compareDocumentPosition ||
                !h.compareDocumentPosition) {
                if (g == h) j = true;
                return g.compareDocumentPosition ? -1 : 1
            }
            g = g.compareDocumentPosition(h) & 4 ? -1 : g === h ? 0 : 1;
            if (g === 0) j = true;
            return g
        }; else if ("sourceIndex" in s.documentElement) D = function (g, h) {
            if (!g.sourceIndex || !h.sourceIndex) {
                if (g == h) j = true;
                return g.sourceIndex ? -1 : 1
            }
            g = g.sourceIndex - h.sourceIndex;
            if (g === 0) j = true;
            return g
        }; else if (s.createRange) D = function (g, h) {
            if (!g.ownerDocument || !h.ownerDocument) {
                if (g == h) j = true;
                return g.ownerDocument ? -1 : 1
            }
            var k = g.ownerDocument.createRange(), m =
                h.ownerDocument.createRange();
            k.setStart(g, 0);
            k.setEnd(g, 0);
            m.setStart(h, 0);
            m.setEnd(h, 0);
            g = k.compareBoundaryPoints(Range.START_TO_END, m);
            if (g === 0) j = true;
            return g
        };
        (function () {
            var g = s.createElement("div"), h = "script" + (new Date).getTime();
            g.innerHTML = "<a name='" + h + "'/>";
            var k = s.documentElement;
            k.insertBefore(g, k.firstChild);
            if (s.getElementById(h)) {
                n.find.ID = function (m, r, q) {
                    if (typeof r.getElementById !== "undefined" && !q) return (r = r.getElementById(m[1])) ? r.id === m[1] || typeof r.getAttributeNode !== "undefined" &&
                    r.getAttributeNode("id").nodeValue === m[1] ? [r] : w : []
                };
                n.filter.ID = function (m, r) {
                    var q = typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id");
                    return m.nodeType === 1 && q && q.nodeValue === r
                }
            }
            k.removeChild(g);
            k = g = null
        })();
        (function () {
            var g = s.createElement("div");
            g.appendChild(s.createComment(""));
            if (g.getElementsByTagName("*").length > 0) n.find.TAG = function (h, k) {
                k = k.getElementsByTagName(h[1]);
                if (h[1] === "*") {
                    h = [];
                    for (var m = 0; k[m]; m++) k[m].nodeType === 1 && h.push(k[m]);
                    k = h
                }
                return k
            };
            g.innerHTML = "<a href='javascript:void(0)'></a>";
            if (g.firstChild && typeof g.firstChild.getAttribute !== "undefined" && g.firstChild.getAttribute("href") !== "#") n.attrHandle.href = function (h) {
                return h.getAttribute("href", 2)
            };
            g = null
        })();
        s.querySelectorAll && function () {
            var g = p, h = s.createElement("div");
            h.innerHTML = "<p class='TEST'></p>";
            if (!(h.querySelectorAll && h.querySelectorAll(".TEST").length === 0)) {
                p = function (m, r, q, v) {
                    r = r || s;
                    if (!v && r.nodeType === 9 && !x(r)) try {
                        return B(r.querySelectorAll(m), q)
                    } catch (u) {
                    }
                    return g(m, r, q, v)
                };
                for (var k in g) p[k] = g[k];
                h = null
            }
        }();
        (function () {
            var g = s.createElement("div");
            g.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!(!g.getElementsByClassName || g.getElementsByClassName("e").length === 0)) {
                g.lastChild.className = "e";
                if (g.getElementsByClassName("e").length !== 1) {
                    n.order.splice(1, 0, "CLASS");
                    n.find.CLASS = function (h, k, m) {
                        if (typeof k.getElementsByClassName !== "undefined" && !m) return k.getElementsByClassName(h[1])
                    };
                    g = null
                }
            }
        })();
        var F = s.compareDocumentPosition ? function (g, h) {
            return g.compareDocumentPosition(h) & 16
        } : function (g,
                      h) {
            return g !== h && (g.contains ? g.contains(h) : true)
        }, x = function (g) {
            return (g = (g ? g.ownerDocument || g : 0).documentElement) ? g.nodeName !== "HTML" : false
        }, ia = function (g, h) {
            var k = [], m = "", r;
            for (h = h.nodeType ? [h] : h; r = n.match.PSEUDO.exec(g);) {
                m += r[0];
                g = g.replace(n.match.PSEUDO, "")
            }
            g = n.relative[g] ? g + "*" : g;
            r = 0;
            for (var q = h.length; r < q; r++) p(g, h[r], k);
            return p.filter(m, k)
        };
        c.find = p;
        c.expr = p.selectors;
        c.expr[":"] = c.expr.filters;
        c.unique = p.uniqueSort;
        c.getText = a;
        c.isXMLDoc = x;
        c.contains = F
    })();
    var ab = /Until$/, bb = /^(?:parents|prevUntil|prevAll)/,
        cb = /,/;
    R = Array.prototype.slice;
    var Fa = function (a, b, d) {
        if (c.isFunction(b)) return c.grep(a, function (e, i) {
            return !!b.call(e, i, e) === d
        }); else if (b.nodeType) return c.grep(a, function (e) {
            return e === b === d
        }); else if (typeof b === "string") {
            var f = c.grep(a, function (e) {
                return e.nodeType === 1
            });
            if (Pa.test(b)) return c.filter(b, f, !d); else b = c.filter(b, a)
        }
        return c.grep(a, function (e) {
            return c.inArray(e, b) >= 0 === d
        })
    };
    c.fn.extend({
        find: function (a) {
            for (var b = this.pushStack("", "find", a), d = 0, f = 0, e = this.length; f < e; f++) {
                d = b.length;
                c.find(a, this[f], b);
                if (f > 0) for (var i = d; i < b.length; i++) for (var j = 0; j < d; j++) if (b[j] === b[i]) {
                    b.splice(i--, 1);
                    break
                }
            }
            return b
        }, has: function (a) {
            var b = c(a);
            return this.filter(function () {
                for (var d = 0, f = b.length; d < f; d++) if (c.contains(this, b[d])) return true
            })
        }, not: function (a) {
            return this.pushStack(Fa(this, a, false), "not", a)
        }, filter: function (a) {
            return this.pushStack(Fa(this, a, true), "filter", a)
        }, is: function (a) {
            return !!a && c.filter(a, this).length > 0
        }, closest: function (a, b) {
            if (c.isArray(a)) {
                var d = [], f = this[0], e, i =
                    {}, j;
                if (f && a.length) {
                    e = 0;
                    for (var o = a.length; e < o; e++) {
                        j = a[e];
                        i[j] || (i[j] = c.expr.match.POS.test(j) ? c(j, b || this.context) : j)
                    }
                    for (; f && f.ownerDocument && f !== b;) {
                        for (j in i) {
                            e = i[j];
                            if (e.jquery ? e.index(f) > -1 : c(f).is(e)) {
                                d.push({selector: j, elem: f});
                                delete i[j]
                            }
                        }
                        f = f.parentNode
                    }
                }
                return d
            }
            var p = c.expr.match.POS.test(a) ? c(a, b || this.context) : null;
            return this.map(function (n, t) {
                for (; t && t.ownerDocument && t !== b;) {
                    if (p ? p.index(t) > -1 : c(t).is(a)) return t;
                    t = t.parentNode
                }
                return null
            })
        }, index: function (a) {
            if (!a || typeof a ===
                "string") return c.inArray(this[0], a ? c(a) : this.parent().children());
            return c.inArray(a.jquery ? a[0] : a, this)
        }, add: function (a, b) {
            a = typeof a === "string" ? c(a, b || this.context) : c.makeArray(a);
            b = c.merge(this.get(), a);
            return this.pushStack(sa(a[0]) || sa(b[0]) ? b : c.unique(b))
        }, andSelf: function () {
            return this.add(this.prevObject)
        }
    });
    c.each({
        parent: function (a) {
            return (a = a.parentNode) && a.nodeType !== 11 ? a : null
        }, parents: function (a) {
            return c.dir(a, "parentNode")
        }, parentsUntil: function (a, b, d) {
            return c.dir(a, "parentNode",
                d)
        }, next: function (a) {
            return c.nth(a, 2, "nextSibling")
        }, prev: function (a) {
            return c.nth(a, 2, "previousSibling")
        }, nextAll: function (a) {
            return c.dir(a, "nextSibling")
        }, prevAll: function (a) {
            return c.dir(a, "previousSibling")
        }, nextUntil: function (a, b, d) {
            return c.dir(a, "nextSibling", d)
        }, prevUntil: function (a, b, d) {
            return c.dir(a, "previousSibling", d)
        }, siblings: function (a) {
            return c.sibling(a.parentNode.firstChild, a)
        }, children: function (a) {
            return c.sibling(a.firstChild)
        }, contents: function (a) {
            return c.nodeName(a, "iframe") ?
                a.contentDocument || a.contentWindow.document : c.makeArray(a.childNodes)
        }
    }, function (a, b) {
        c.fn[a] = function (d, f) {
            var e = c.map(this, b, d);
            ab.test(a) || (f = d);
            if (f && typeof f === "string") e = c.filter(f, e);
            e = this.length > 1 ? c.unique(e) : e;
            if ((this.length > 1 || cb.test(f)) && bb.test(a)) e = e.reverse();
            return this.pushStack(e, a, R.call(arguments).join(","))
        }
    });
    c.extend({
        filter: function (a, b, d) {
            if (d) a = ":not(" + a + ")";
            return c.find.matches(a, b)
        }, dir: function (a, b, d) {
            var f = [];
            for (a = a[b]; a && a.nodeType !== 9 && (d === w || !c(a).is(d));) {
                a.nodeType ===
                1 && f.push(a);
                a = a[b]
            }
            return f
        }, nth: function (a, b, d) {
            b = b || 1;
            for (var f = 0; a; a = a[d]) if (a.nodeType === 1 && ++f === b) break;
            return a
        }, sibling: function (a, b) {
            for (var d = []; a; a = a.nextSibling) a.nodeType === 1 && a !== b && d.push(a);
            return d
        }
    });
    var Ga = / jQuery\d+="(?:\d+|null)"/g, Y = /^\s+/, db = /(<([\w:]+)[^>]*?)\/>/g,
        eb = /^(?:area|br|col|embed|hr|img|input|link|meta|param)$/i, Ha = /<([\w:]+)/, fb = /<tbody/i, gb = /<|&\w+;/,
        hb = function (a, b, d) {
            return eb.test(d) ? a : b + "></" + d + ">"
        }, G = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            area: [1, "<map>", "</map>"],
            _default: [0, "", ""]
        };
    G.optgroup = G.option;
    G.tbody = G.tfoot = G.colgroup = G.caption = G.thead;
    G.th = G.td;
    if (!c.support.htmlSerialize) G._default = [1, "div<div>", "</div>"];
    c.fn.extend({
        text: function (a) {
            if (c.isFunction(a)) return this.each(function (b) {
                var d = c(this);
                return d.text(a.call(this, b, d.text()))
            });
            if (typeof a !== "object" && a !== w) return this.empty().append((this[0] && this[0].ownerDocument || s).createTextNode(a));
            return c.getText(this)
        }, wrapAll: function (a) {
            if (c.isFunction(a)) return this.each(function (d) {
                c(this).wrapAll(a.call(this, d))
            });
            if (this[0]) {
                var b = c(a, this[0].ownerDocument).eq(0).clone(true);
                this[0].parentNode && b.insertBefore(this[0]);
                b.map(function () {
                    for (var d = this; d.firstChild && d.firstChild.nodeType === 1;) d = d.firstChild;
                    return d
                }).append(this)
            }
            return this
        },
        wrapInner: function (a) {
            return this.each(function () {
                var b = c(this), d = b.contents();
                d.length ? d.wrapAll(a) : b.append(a)
            })
        }, wrap: function (a) {
            return this.each(function () {
                c(this).wrapAll(a)
            })
        }, unwrap: function () {
            return this.parent().each(function () {
                c.nodeName(this, "body") || c(this).replaceWith(this.childNodes)
            }).end()
        }, append: function () {
            return this.domManip(arguments, true, function (a) {
                this.nodeType === 1 && this.appendChild(a)
            })
        }, prepend: function () {
            return this.domManip(arguments, true, function (a) {
                this.nodeType === 1 &&
                this.insertBefore(a, this.firstChild)
            })
        }, before: function () {
            if (this[0] && this[0].parentNode) return this.domManip(arguments, false, function (b) {
                this.parentNode.insertBefore(b, this)
            }); else if (arguments.length) {
                var a = c(arguments[0]);
                a.push.apply(a, this.toArray());
                return this.pushStack(a, "before", arguments)
            }
        }, after: function () {
            if (this[0] && this[0].parentNode) return this.domManip(arguments, false, function (b) {
                this.parentNode.insertBefore(b, this.nextSibling)
            }); else if (arguments.length) {
                var a = this.pushStack(this,
                    "after", arguments);
                a.push.apply(a, c(arguments[0]).toArray());
                return a
            }
        }, clone: function (a) {
            var b = this.map(function () {
                if (!c.support.noCloneEvent && !c.isXMLDoc(this)) {
                    var d = this.outerHTML, f = this.ownerDocument;
                    if (!d) {
                        d = f.createElement("div");
                        d.appendChild(this.cloneNode(true));
                        d = d.innerHTML
                    }
                    return c.clean([d.replace(Ga, "").replace(Y, "")], f)[0]
                } else return this.cloneNode(true)
            });
            if (a === true) {
                ta(this, b);
                ta(this.find("*"), b.find("*"))
            }
            return b
        }, html: function (a) {
            if (a === w) return this[0] && this[0].nodeType ===
            1 ? this[0].innerHTML.replace(Ga, "") : null; else if (typeof a === "string" && !/<script/i.test(a) && (c.support.leadingWhitespace || !Y.test(a)) && !G[(Ha.exec(a) || ["", ""])[1].toLowerCase()]) try {
                for (var b = 0, d = this.length; b < d; b++) if (this[b].nodeType === 1) {
                    T(this[b].getElementsByTagName("*"));
                    this[b].innerHTML = a
                }
            } catch (f) {
                this.empty().append(a)
            } else c.isFunction(a) ? this.each(function (e) {
                var i = c(this), j = i.html();
                i.empty().append(function () {
                    return a.call(this, e, j)
                })
            }) : this.empty().append(a);
            return this
        }, replaceWith: function (a) {
            if (this[0] &&
                this[0].parentNode) {
                c.isFunction(a) || (a = c(a).detach());
                return this.each(function () {
                    var b = this.nextSibling, d = this.parentNode;
                    c(this).remove();
                    b ? c(b).before(a) : c(d).append(a)
                })
            } else return this.pushStack(c(c.isFunction(a) ? a() : a), "replaceWith", a)
        }, detach: function (a) {
            return this.remove(a, true)
        }, domManip: function (a, b, d) {
            function f(t) {
                return c.nodeName(t, "table") ? t.getElementsByTagName("tbody")[0] || t.appendChild(t.ownerDocument.createElement("tbody")) : t
            }

            var e, i, j = a[0], o = [];
            if (c.isFunction(j)) return this.each(function (t) {
                var z =
                    c(this);
                a[0] = j.call(this, t, b ? z.html() : w);
                return z.domManip(a, b, d)
            });
            if (this[0]) {
                e = a[0] && a[0].parentNode && a[0].parentNode.nodeType === 11 ? {fragment: a[0].parentNode} : ua(a, this, o);
                if (i = e.fragment.firstChild) {
                    b = b && c.nodeName(i, "tr");
                    for (var p = 0, n = this.length; p < n; p++) d.call(b ? f(this[p], i) : this[p], e.cacheable || this.length > 1 || p > 0 ? e.fragment.cloneNode(true) : e.fragment)
                }
                o && c.each(o, La)
            }
            return this
        }
    });
    c.fragments = {};
    c.each({
            appendTo: "append",
            prependTo: "prepend",
            insertBefore: "before",
            insertAfter: "after",
            replaceAll: "replaceWith"
        },
        function (a, b) {
            c.fn[a] = function (d) {
                var f = [];
                d = c(d);
                for (var e = 0, i = d.length; e < i; e++) {
                    var j = (e > 0 ? this.clone(true) : this).get();
                    c.fn[b].apply(c(d[e]), j);
                    f = f.concat(j)
                }
                return this.pushStack(f, a, d.selector)
            }
        });
    c.each({
            remove: function (a, b) {
                if (!a || c.filter(a, [this]).length) {
                    if (!b && this.nodeType === 1) {
                        T(this.getElementsByTagName("*"));
                        T([this])
                    }
                    this.parentNode && this.parentNode.removeChild(this)
                }
            }, empty: function () {
                for (this.nodeType === 1 && T(this.getElementsByTagName("*")); this.firstChild;) this.removeChild(this.firstChild)
            }
        },
        function (a, b) {
            c.fn[a] = function () {
                return this.each(b, arguments)
            }
        });
    c.extend({
        clean: function (a, b, d, f) {
            b = b || s;
            if (typeof b.createElement === "undefined") b = b.ownerDocument || b[0] && b[0].ownerDocument || s;
            var e = [];
            c.each(a, function (i, j) {
                if (typeof j === "number") j += "";
                if (j) {
                    if (typeof j === "string" && !gb.test(j)) j = b.createTextNode(j); else if (typeof j === "string") {
                        j = j.replace(db, hb);
                        var o = (Ha.exec(j) || ["", ""])[1].toLowerCase(), p = G[o] || G._default, n = p[0];
                        i = b.createElement("div");
                        for (i.innerHTML = p[1] + j + p[2]; n--;) i = i.lastChild;
                        if (!c.support.tbody) {
                            n = fb.test(j);
                            o = o === "table" && !n ? i.firstChild && i.firstChild.childNodes : p[1] === "<table>" && !n ? i.childNodes : [];
                            for (p = o.length - 1; p >= 0; --p) c.nodeName(o[p], "tbody") && !o[p].childNodes.length && o[p].parentNode.removeChild(o[p])
                        }
                        !c.support.leadingWhitespace && Y.test(j) && i.insertBefore(b.createTextNode(Y.exec(j)[0]), i.firstChild);
                        j = c.makeArray(i.childNodes)
                    }
                    if (j.nodeType) e.push(j); else e = c.merge(e, j)
                }
            });
            if (d) for (a = 0; e[a]; a++) if (f && c.nodeName(e[a], "script") && (!e[a].type || e[a].type.toLowerCase() ===
                "text/javascript")) f.push(e[a].parentNode ? e[a].parentNode.removeChild(e[a]) : e[a]); else {
                e[a].nodeType === 1 && e.splice.apply(e, [a + 1, 0].concat(c.makeArray(e[a].getElementsByTagName("script"))));
                d.appendChild(e[a])
            }
            return e
        }
    });
    var ib = /z-?index|font-?weight|opacity|zoom|line-?height/i, Ia = /alpha\([^)]*\)/, Ja = /opacity=([^)]*)/,
        ja = /float/i, ka = /-([a-z])/ig, jb = /([A-Z])/g, kb = /^-?\d+(?:px)?$/i, lb = /^-?\d/,
        mb = {position: "absolute", visibility: "hidden", display: "block"}, nb = ["Left", "Right"],
        ob = ["Top", "Bottom"], pb = s.defaultView &&
        s.defaultView.getComputedStyle, Ka = c.support.cssFloat ? "cssFloat" : "styleFloat", la = function (a, b) {
            return b.toUpperCase()
        };
    c.fn.css = function (a, b) {
        return $(this, a, b, true, function (d, f, e) {
            if (e === w) return c.curCSS(d, f);
            if (typeof e === "number" && !ib.test(f)) e += "px";
            c.style(d, f, e)
        })
    };
    c.extend({
        style: function (a, b, d) {
            if (!a || a.nodeType === 3 || a.nodeType === 8) return w;
            if ((b === "width" || b === "height") && parseFloat(d) < 0) d = w;
            var f = a.style || a, e = d !== w;
            if (!c.support.opacity && b === "opacity") {
                if (e) {
                    f.zoom = 1;
                    b = parseInt(d, 10) + "" ===
                    "NaN" ? "" : "alpha(opacity=" + d * 100 + ")";
                    a = f.filter || c.curCSS(a, "filter") || "";
                    f.filter = Ia.test(a) ? a.replace(Ia, b) : b
                }
                return f.filter && f.filter.indexOf("opacity=") >= 0 ? parseFloat(Ja.exec(f.filter)[1]) / 100 + "" : ""
            }
            if (ja.test(b)) b = Ka;
            b = b.replace(ka, la);
            if (e) f[b] = d;
            return f[b]
        }, css: function (a, b, d, f) {
            if (b === "width" || b === "height") {
                var e, i = b === "width" ? nb : ob;

                function j() {
                    e = b === "width" ? a.offsetWidth : a.offsetHeight;
                    f !== "border" && c.each(i, function () {
                        f || (e -= parseFloat(c.curCSS(a, "padding" + this, true)) || 0);
                        if (f === "margin") e +=
                            parseFloat(c.curCSS(a, "margin" + this, true)) || 0; else e -= parseFloat(c.curCSS(a, "border" + this + "Width", true)) || 0
                    })
                }

                a.offsetWidth !== 0 ? j() : c.swap(a, mb, j);
                return Math.max(0, Math.round(e))
            }
            return c.curCSS(a, b, d)
        }, curCSS: function (a, b, d) {
            var f, e = a.style;
            if (!c.support.opacity && b === "opacity" && a.currentStyle) {
                f = Ja.test(a.currentStyle.filter || "") ? parseFloat(RegExp.$1) / 100 + "" : "";
                return f === "" ? "1" : f
            }
            if (ja.test(b)) b = Ka;
            if (!d && e && e[b]) f = e[b]; else if (pb) {
                if (ja.test(b)) b = "float";
                b = b.replace(jb, "-$1").toLowerCase();
                e =
                    a.ownerDocument.defaultView;
                if (!e) return null;
                if (a = e.getComputedStyle(a, null)) f = a.getPropertyValue(b);
                if (b === "opacity" && f === "") f = "1"
            } else if (a.currentStyle) {
                d = b.replace(ka, la);
                f = a.currentStyle[b] || a.currentStyle[d];
                if (!kb.test(f) && lb.test(f)) {
                    b = e.left;
                    var i = a.runtimeStyle.left;
                    a.runtimeStyle.left = a.currentStyle.left;
                    e.left = d === "fontSize" ? "1em" : f || 0;
                    f = e.pixelLeft + "px";
                    e.left = b;
                    a.runtimeStyle.left = i
                }
            }
            return f
        }, swap: function (a, b, d) {
            var f = {};
            for (var e in b) {
                f[e] = a.style[e];
                a.style[e] = b[e]
            }
            d.call(a);
            for (e in b) a.style[e] =
                f[e]
        }
    });
    if (c.expr && c.expr.filters) {
        c.expr.filters.hidden = function (a) {
            var b = a.offsetWidth, d = a.offsetHeight, f = a.nodeName.toLowerCase() === "tr";
            return b === 0 && d === 0 && !f ? true : b > 0 && d > 0 && !f ? false : c.curCSS(a, "display") === "none"
        };
        c.expr.filters.visible = function (a) {
            return !c.expr.filters.hidden(a)
        }
    }
    var qb = K(), rb = /<script(.|\s)*?\/script>/gi, sb = /select|textarea/i,
        tb = /color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week/i,
        O = /=\?(&|$)/, ma = /\?/, ub = /(\?|&)_=.*?(&|$)/, vb = /^(\w+:)?\/\/([^\/?#]+)/,
        wb = /%20/g;
    c.fn.extend({
        _load: c.fn.load, load: function (a, b, d) {
            if (typeof a !== "string") return this._load(a); else if (!this.length) return this;
            var f = a.indexOf(" ");
            if (f >= 0) {
                var e = a.slice(f, a.length);
                a = a.slice(0, f)
            }
            f = "GET";
            if (b) if (c.isFunction(b)) {
                d = b;
                b = null
            } else if (typeof b === "object") {
                b = c.param(b, c.ajaxSettings.traditional);
                f = "POST"
            }
            c.ajax({
                url: a, type: f, dataType: "html", data: b, context: this, complete: function (i, j) {
                    if (j === "success" || j === "notmodified") this.html(e ? c("<div />").append(i.responseText.replace(rb,
                        "")).find(e) : i.responseText);
                    d && this.each(d, [i.responseText, j, i])
                }
            });
            return this
        }, serialize: function () {
            return c.param(this.serializeArray())
        }, serializeArray: function () {
            return this.map(function () {
                return this.elements ? c.makeArray(this.elements) : this
            }).filter(function () {
                return this.name && !this.disabled && (this.checked || sb.test(this.nodeName) || tb.test(this.type))
            }).map(function (a, b) {
                a = c(this).val();
                return a == null ? null : c.isArray(a) ? c.map(a, function (d) {
                    return {name: b.name, value: d}
                }) : {name: b.name, value: a}
            }).get()
        }
    });
    c.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (a, b) {
        c.fn[b] = function (d) {
            return this.bind(b, d)
        }
    });
    c.extend({
        get: function (a, b, d, f) {
            if (c.isFunction(b)) {
                f = f || d;
                d = b;
                b = null
            }
            return c.ajax({type: "GET", url: a, data: b, success: d, dataType: f})
        }, getScript: function (a, b) {
            return c.get(a, null, b, "script")
        }, getJSON: function (a, b, d) {
            return c.get(a, b, d, "json")
        }, post: function (a, b, d, f) {
            if (c.isFunction(b)) {
                f = f || d;
                d = b;
                b = {}
            }
            return c.ajax({type: "POST", url: a, data: b, success: d, dataType: f})
        },
        ajaxSetup: function (a) {
            c.extend(c.ajaxSettings, a)
        }, ajaxSettings: {
            url: location.href,
            global: true,
            type: "GET",
            contentType: "application/x-www-form-urlencoded",
            processData: true,
            async: true,
            xhr: A.XMLHttpRequest && (A.location.protocol !== "file:" || !A.ActiveXObject) ? function () {
                return new A.XMLHttpRequest
            } : function () {
                try {
                    return new A.ActiveXObject("Microsoft.XMLHTTP")
                } catch (a) {
                }
            },
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                script: "text/javascript, application/javascript",
                json: "application/json, text/javascript",
                text: "text/plain",
                _default: "*/*"
            }
        }, lastModified: {}, etag: {}, ajax: function (a) {
            function b() {
                e.success && e.success.call(p, o, j, x);
                e.global && f("ajaxSuccess", [x, e])
            }

            function d() {
                e.complete && e.complete.call(p, x, j);
                e.global && f("ajaxComplete", [x, e]);
                e.global && !--c.active && c.event.trigger("ajaxStop")
            }

            function f(r, q) {
                (e.context ? c(e.context) : c.event).trigger(r, q)
            }

            var e = c.extend(true, {}, c.ajaxSettings, a), i, j, o, p = e.context || e, n = e.type.toUpperCase();
            if (e.data && e.processData && typeof e.data !== "string") e.data = c.param(e.data,
                e.traditional);
            if (e.dataType === "jsonp") {
                if (n === "GET") O.test(e.url) || (e.url += (ma.test(e.url) ? "&" : "?") + (e.jsonp || "callback") + "=?"); else if (!e.data || !O.test(e.data)) e.data = (e.data ? e.data + "&" : "") + (e.jsonp || "callback") + "=?";
                e.dataType = "json"
            }
            if (e.dataType === "json" && (e.data && O.test(e.data) || O.test(e.url))) {
                i = e.jsonpCallback || "jsonp" + qb++;
                if (e.data) e.data = (e.data + "").replace(O, "=" + i + "$1");
                e.url = e.url.replace(O, "=" + i + "$1");
                e.dataType = "script";
                A[i] = A[i] || function (r) {
                    o = r;
                    b();
                    d();
                    A[i] = w;
                    try {
                        delete A[i]
                    } catch (q) {
                    }
                    B &&
                    B.removeChild(C)
                }
            }
            if (e.dataType === "script" && e.cache === null) e.cache = false;
            if (e.cache === false && n === "GET") {
                var t = K(), z = e.url.replace(ub, "$1_=" + t + "$2");
                e.url = z + (z === e.url ? (ma.test(e.url) ? "&" : "?") + "_=" + t : "")
            }
            if (e.data && n === "GET") e.url += (ma.test(e.url) ? "&" : "?") + e.data;
            e.global && !c.active++ && c.event.trigger("ajaxStart");
            t = (t = vb.exec(e.url)) && (t[1] && t[1] !== location.protocol || t[2] !== location.host);
            if (e.dataType === "script" && n === "GET" && t) {
                var B = s.getElementsByTagName("head")[0] || s.documentElement, C = s.createElement("script");
                C.src = e.url;
                if (e.scriptCharset) C.charset = e.scriptCharset;
                if (!i) {
                    var D = false;
                    C.onload = C.onreadystatechange = function () {
                        if (!D && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
                            D = true;
                            b();
                            d();
                            C.onload = C.onreadystatechange = null;
                            B && C.parentNode && B.removeChild(C)
                        }
                    }
                }
                B.insertBefore(C, B.firstChild);
                return w
            }
            var F = false, x = e.xhr();
            if (x) {
                e.username ? x.open(n, e.url, e.async, e.username, e.password) : x.open(n, e.url, e.async);
                try {
                    if (e.data || a && a.contentType) x.setRequestHeader("Content-Type",
                        e.contentType);
                    if (e.ifModified) {
                        c.lastModified[e.url] && x.setRequestHeader("If-Modified-Since", c.lastModified[e.url]);
                        c.etag[e.url] && x.setRequestHeader("If-None-Match", c.etag[e.url])
                    }
                    t || x.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                    x.setRequestHeader("Accept", e.dataType && e.accepts[e.dataType] ? e.accepts[e.dataType] + ", */*" : e.accepts._default)
                } catch (ia) {
                }
                if (e.beforeSend && e.beforeSend.call(p, x, e) === false) {
                    e.global && !--c.active && c.event.trigger("ajaxStop");
                    x.abort();
                    return false
                }
                e.global && f("ajaxSend",
                    [x, e]);
                var g = x.onreadystatechange = function (r) {
                    if (!x || x.readyState === 0) {
                        F || d();
                        F = true;
                        if (x) x.onreadystatechange = c.noop
                    } else if (!F && x && (x.readyState === 4 || r === "timeout")) {
                        F = true;
                        x.onreadystatechange = c.noop;
                        j = r === "timeout" ? "timeout" : !c.httpSuccess(x) ? "error" : e.ifModified && c.httpNotModified(x, e.url) ? "notmodified" : "success";
                        if (j === "success") try {
                            o = c.httpData(x, e.dataType, e)
                        } catch (q) {
                            j = "parsererror"
                        }
                        if (j === "success" || j === "notmodified") i || b(); else c.handleError(e, x, j);
                        d();
                        r === "timeout" && x.abort();
                        if (e.async) x =
                            null
                    }
                };
                try {
                    var h = x.abort;
                    x.abort = function () {
                        if (x) {
                            h.call(x);
                            if (x) x.readyState = 0
                        }
                        g()
                    }
                } catch (k) {
                }
                e.async && e.timeout > 0 && setTimeout(function () {
                    x && !F && g("timeout")
                }, e.timeout);
                try {
                    x.send(n === "POST" || n === "PUT" || n === "DELETE" ? e.data : null)
                } catch (m) {
                    c.handleError(e, x, null, m);
                    d()
                }
                e.async || g();
                return x
            }
        }, handleError: function (a, b, d, f) {
            if (a.error) a.error.call(a.context || A, b, d, f);
            if (a.global) (a.context ? c(a.context) : c.event).trigger("ajaxError", [b, a, f])
        }, active: 0, httpSuccess: function (a) {
            try {
                return !a.status && location.protocol ===
                    "file:" || a.status >= 200 && a.status < 300 || a.status === 304 || a.status === 1223 || a.status === 0
            } catch (b) {
            }
            return false
        }, httpNotModified: function (a, b) {
            var d = a.getResponseHeader("Last-Modified"), f = a.getResponseHeader("Etag");
            if (d) c.lastModified[b] = d;
            if (f) c.etag[b] = f;
            return a.status === 304 || a.status === 0
        }, httpData: function (a, b, d) {
            var f = a.getResponseHeader("content-type") || "", e = b === "xml" || !b && f.indexOf("xml") >= 0;
            a = e ? a.responseXML : a.responseText;
            if (e && a.documentElement.nodeName === "parsererror") throw"parsererror";
            if (d &&
                d.dataFilter) a = d.dataFilter(a, b);
            if (typeof a === "string") if (b === "json" || !b && f.indexOf("json") >= 0) if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) a = A.JSON && A.JSON.parse ? A.JSON.parse(a) : (new Function("return " + a))(); else throw"Invalid JSON: " + a; else if (b === "script" || !b && f.indexOf("javascript") >= 0) c.globalEval(a);
            return a
        }, param: function (a, b) {
            function d(e, i) {
                i =
                    c.isFunction(i) ? i() : i;
                f[f.length] = encodeURIComponent(e) + "=" + encodeURIComponent(i)
            }

            var f = [];
            if (b === w) b = c.ajaxSettings.traditional;
            c.isArray(a) || a.jquery ? c.each(a, function () {
                d(this.name, this.value)
            }) : c.each(a, function e(i, j) {
                if (c.isArray(j)) c.each(j, function (o, p) {
                    b ? d(i, p) : e(i + "[" + (typeof p === "object" || c.isArray(p) ? o : "") + "]", p)
                }); else !b && j != null && typeof j === "object" ? c.each(j, function (o, p) {
                    e(i + "[" + o + "]", p)
                }) : d(i, j)
            });
            return f.join("&").replace(wb, "+")
        }
    });
    var na = {}, xb = /toggle|show|hide/, yb = /^([+-]=)?([\d+-.]+)(.*)$/,
        Z,
        va = [["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"], ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"], ["opacity"]];
    c.fn.extend({
        show: function (a, b) {
            if (a != null) return this.animate(L("show", 3), a, b); else {
                a = 0;
                for (b = this.length; a < b; a++) {
                    var d = c.data(this[a], "olddisplay");
                    this[a].style.display = d || "";
                    if (c.css(this[a], "display") === "none") {
                        d = this[a].nodeName;
                        var f;
                        if (na[d]) f = na[d]; else {
                            var e = c("<" + d + " />").appendTo("body");
                            f = e.css("display");
                            if (f === "none") f = "block";
                            e.remove();
                            na[d] = f
                        }
                        c.data(this[a], "olddisplay", f)
                    }
                }
                a = 0;
                for (b = this.length; a < b; a++) this[a].style.display = c.data(this[a], "olddisplay") || "";
                return this
            }
        }, hide: function (a, b) {
            if (a != null) return this.animate(L("hide", 3), a, b); else {
                a = 0;
                for (b = this.length; a < b; a++) {
                    var d = c.data(this[a], "olddisplay");
                    !d && d !== "none" && c.data(this[a], "olddisplay", c.css(this[a], "display"))
                }
                a = 0;
                for (b = this.length; a < b; a++) this[a].style.display = "none";
                return this
            }
        }, _toggle: c.fn.toggle, toggle: function (a, b) {
            var d = typeof a === "boolean";
            if (c.isFunction(a) &&
                c.isFunction(b)) this._toggle.apply(this, arguments); else a == null || d ? this.each(function () {
                var f = d ? a : c(this).is(":hidden");
                c(this)[f ? "show" : "hide"]()
            }) : this.animate(L("toggle", 3), a, b);
            return this
        }, fadeTo: function (a, b, d) {
            return this.filter(":hidden").css("opacity", 0).show().end().animate({opacity: b}, a, d)
        }, animate: function (a, b, d, f) {
            var e = c.speed(b, d, f);
            if (c.isEmptyObject(a)) return this.each(e.complete);
            return this[e.queue === false ? "each" : "queue"](function () {
                var i = c.extend({}, e), j, o = this.nodeType === 1 && c(this).is(":hidden"),
                    p = this;
                for (j in a) {
                    var n = j.replace(ka, la);
                    if (j !== n) {
                        a[n] = a[j];
                        delete a[j];
                        j = n
                    }
                    if (a[j] === "hide" && o || a[j] === "show" && !o) return i.complete.call(this);
                    if ((j === "height" || j === "width") && this.style) {
                        i.display = c.css(this, "display");
                        i.overflow = this.style.overflow
                    }
                    if (c.isArray(a[j])) {
                        (i.specialEasing = i.specialEasing || {})[j] = a[j][1];
                        a[j] = a[j][0]
                    }
                }
                if (i.overflow != null) this.style.overflow = "hidden";
                i.curAnim = c.extend({}, a);
                c.each(a, function (t, z) {
                    var B = new c.fx(p, i, t);
                    if (xb.test(z)) B[z === "toggle" ? o ? "show" : "hide" : z](a);
                    else {
                        var C = yb.exec(z), D = B.cur(true) || 0;
                        if (C) {
                            z = parseFloat(C[2]);
                            var F = C[3] || "px";
                            if (F !== "px") {
                                p.style[t] = (z || 1) + F;
                                D = (z || 1) / B.cur(true) * D;
                                p.style[t] = D + F
                            }
                            if (C[1]) z = (C[1] === "-=" ? -1 : 1) * z + D;
                            B.custom(D, z, F)
                        } else B.custom(D, z, "")
                    }
                });
                return true
            })
        }, stop: function (a, b) {
            var d = c.timers;
            a && this.queue([]);
            this.each(function () {
                for (var f = d.length - 1; f >= 0; f--) if (d[f].elem === this) {
                    b && d[f](true);
                    d.splice(f, 1)
                }
            });
            b || this.dequeue();
            return this
        }
    });
    c.each({
        slideDown: L("show", 1), slideUp: L("hide", 1), slideToggle: L("toggle",
            1), fadeIn: {opacity: "show"}, fadeOut: {opacity: "hide"}
    }, function (a, b) {
        c.fn[a] = function (d, f) {
            return this.animate(b, d, f)
        }
    });
    c.extend({
        speed: function (a, b, d) {
            var f = a && typeof a === "object" ? a : {
                complete: d || !d && b || c.isFunction(a) && a,
                duration: a,
                easing: d && b || b && !c.isFunction(b) && b
            };
            f.duration = c.fx.off ? 0 : typeof f.duration === "number" ? f.duration : c.fx.speeds[f.duration] || c.fx.speeds._default;
            f.old = f.complete;
            f.complete = function () {
                f.queue !== false && c(this).dequeue();
                c.isFunction(f.old) && f.old.call(this)
            };
            return f
        }, easing: {
            linear: function (a,
                              b, d, f) {
                return d + f * a
            }, swing: function (a, b, d, f) {
                return (-Math.cos(a * Math.PI) / 2 + 0.5) * f + d
            }
        }, timers: [], fx: function (a, b, d) {
            this.options = b;
            this.elem = a;
            this.prop = d;
            if (!b.orig) b.orig = {}
        }
    });
    c.fx.prototype = {
        update: function () {
            this.options.step && this.options.step.call(this.elem, this.now, this);
            (c.fx.step[this.prop] || c.fx.step._default)(this);
            if ((this.prop === "height" || this.prop === "width") && this.elem.style) this.elem.style.display = "block"
        }, cur: function (a) {
            if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] ==
                null)) return this.elem[this.prop];
            return (a = parseFloat(c.css(this.elem, this.prop, a))) && a > -10000 ? a : parseFloat(c.curCSS(this.elem, this.prop)) || 0
        }, custom: function (a, b, d) {
            function f(i) {
                return e.step(i)
            }

            this.startTime = K();
            this.start = a;
            this.end = b;
            this.unit = d || this.unit || "px";
            this.now = this.start;
            this.pos = this.state = 0;
            var e = this;
            f.elem = this.elem;
            if (f() && c.timers.push(f) && !Z) Z = setInterval(c.fx.tick, 13)
        }, show: function () {
            this.options.orig[this.prop] = c.style(this.elem, this.prop);
            this.options.show = true;
            this.custom(this.prop ===
            "width" || this.prop === "height" ? 1 : 0, this.cur());
            c(this.elem).show()
        }, hide: function () {
            this.options.orig[this.prop] = c.style(this.elem, this.prop);
            this.options.hide = true;
            this.custom(this.cur(), 0)
        }, step: function (a) {
            var b = K(), d = true;
            if (a || b >= this.options.duration + this.startTime) {
                this.now = this.end;
                this.pos = this.state = 1;
                this.update();
                this.options.curAnim[this.prop] = true;
                for (var f in this.options.curAnim) if (this.options.curAnim[f] !== true) d = false;
                if (d) {
                    if (this.options.display != null) {
                        this.elem.style.overflow =
                            this.options.overflow;
                        a = c.data(this.elem, "olddisplay");
                        this.elem.style.display = a ? a : this.options.display;
                        if (c.css(this.elem, "display") === "none") this.elem.style.display = "block"
                    }
                    this.options.hide && c(this.elem).hide();
                    if (this.options.hide || this.options.show) for (var e in this.options.curAnim) c.style(this.elem, e, this.options.orig[e]);
                    this.options.complete.call(this.elem)
                }
                return false
            } else {
                e = b - this.startTime;
                this.state = e / this.options.duration;
                a = this.options.easing || (c.easing.swing ? "swing" : "linear");
                this.pos =
                    c.easing[this.options.specialEasing && this.options.specialEasing[this.prop] || a](this.state, e, 0, 1, this.options.duration);
                this.now = this.start + (this.end - this.start) * this.pos;
                this.update()
            }
            return true
        }
    };
    c.extend(c.fx, {
        tick: function () {
            for (var a = c.timers, b = 0; b < a.length; b++) a[b]() || a.splice(b--, 1);
            a.length || c.fx.stop()
        }, stop: function () {
            clearInterval(Z);
            Z = null
        }, speeds: {slow: 600, fast: 200, _default: 400}, step: {
            opacity: function (a) {
                c.style(a.elem, "opacity", a.now)
            }, _default: function (a) {
                if (a.elem.style && a.elem.style[a.prop] !=
                    null) a.elem.style[a.prop] = (a.prop === "width" || a.prop === "height" ? Math.max(0, a.now) : a.now) + a.unit; else a.elem[a.prop] = a.now
            }
        }
    });
    if (c.expr && c.expr.filters) c.expr.filters.animated = function (a) {
        return c.grep(c.timers, function (b) {
            return a === b.elem
        }).length
    };
    c.fn.offset = "getBoundingClientRect" in s.documentElement ? function (a) {
        var b = this[0];
        if (!b || !b.ownerDocument) return null;
        if (a) return this.each(function (e) {
            c.offset.setOffset(this, a, e)
        });
        if (b === b.ownerDocument.body) return c.offset.bodyOffset(b);
        var d = b.getBoundingClientRect(),
            f = b.ownerDocument;
        b = f.body;
        f = f.documentElement;
        return {
            top: d.top + (self.pageYOffset || c.support.boxModel && f.scrollTop || b.scrollTop) - (f.clientTop || b.clientTop || 0),
            left: d.left + (self.pageXOffset || c.support.boxModel && f.scrollLeft || b.scrollLeft) - (f.clientLeft || b.clientLeft || 0)
        }
    } : function (a) {
        var b = this[0];
        if (!b || !b.ownerDocument) return null;
        if (a) return this.each(function (t) {
            c.offset.setOffset(this, a, t)
        });
        if (b === b.ownerDocument.body) return c.offset.bodyOffset(b);
        c.offset.initialize();
        var d = b.offsetParent, f =
            b, e = b.ownerDocument, i, j = e.documentElement, o = e.body;
        f = (e = e.defaultView) ? e.getComputedStyle(b, null) : b.currentStyle;
        for (var p = b.offsetTop, n = b.offsetLeft; (b = b.parentNode) && b !== o && b !== j;) {
            if (c.offset.supportsFixedPosition && f.position === "fixed") break;
            i = e ? e.getComputedStyle(b, null) : b.currentStyle;
            p -= b.scrollTop;
            n -= b.scrollLeft;
            if (b === d) {
                p += b.offsetTop;
                n += b.offsetLeft;
                if (c.offset.doesNotAddBorder && !(c.offset.doesAddBorderForTableAndCells && /^t(able|d|h)$/i.test(b.nodeName))) {
                    p += parseFloat(i.borderTopWidth) ||
                        0;
                    n += parseFloat(i.borderLeftWidth) || 0
                }
                f = d;
                d = b.offsetParent
            }
            if (c.offset.subtractsBorderForOverflowNotVisible && i.overflow !== "visible") {
                p += parseFloat(i.borderTopWidth) || 0;
                n += parseFloat(i.borderLeftWidth) || 0
            }
            f = i
        }
        if (f.position === "relative" || f.position === "static") {
            p += o.offsetTop;
            n += o.offsetLeft
        }
        if (c.offset.supportsFixedPosition && f.position === "fixed") {
            p += Math.max(j.scrollTop, o.scrollTop);
            n += Math.max(j.scrollLeft, o.scrollLeft)
        }
        return {top: p, left: n}
    };
    c.offset = {
        initialize: function () {
            var a = s.body, b = s.createElement("div"),
                d, f, e, i = parseFloat(c.curCSS(a, "marginTop", true)) || 0;
            c.extend(b.style, {
                position: "absolute",
                top: 0,
                left: 0,
                margin: 0,
                border: 0,
                width: "1px",
                height: "1px",
                visibility: "hidden"
            });
            b.innerHTML = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
            a.insertBefore(b, a.firstChild);
            d = b.firstChild;
            f = d.firstChild;
            e = d.nextSibling.firstChild.firstChild;
            this.doesNotAddBorder = f.offsetTop !== 5;
            this.doesAddBorderForTableAndCells = e.offsetTop === 5;
            f.style.position = "fixed";
            f.style.top = "20px";
            this.supportsFixedPosition = f.offsetTop === 20 || f.offsetTop === 15;
            f.style.position = f.style.top = "";
            d.style.overflow = "hidden";
            d.style.position = "relative";
            this.subtractsBorderForOverflowNotVisible = f.offsetTop === -5;
            this.doesNotIncludeMarginInBodyOffset = a.offsetTop !== i;
            a.removeChild(b);
            c.offset.initialize = c.noop
        },
        bodyOffset: function (a) {
            var b = a.offsetTop, d = a.offsetLeft;
            c.offset.initialize();
            if (c.offset.doesNotIncludeMarginInBodyOffset) {
                b += parseFloat(c.curCSS(a, "marginTop", true)) || 0;
                d += parseFloat(c.curCSS(a, "marginLeft", true)) || 0
            }
            return {top: b, left: d}
        }, setOffset: function (a, b, d) {
            if (/static/.test(c.curCSS(a, "position"))) a.style.position = "relative";
            var f = c(a), e = f.offset(), i = parseInt(c.curCSS(a, "top", true), 10) || 0,
                j = parseInt(c.curCSS(a, "left", true), 10) || 0;
            if (c.isFunction(b)) b = b.call(a, d, e);
            d = {
                top: b.top - e.top + i, left: b.left -
                    e.left + j
            };
            "using" in b ? b.using.call(a, d) : f.css(d)
        }
    };
    c.fn.extend({
        position: function () {
            if (!this[0]) return null;
            var a = this[0], b = this.offsetParent(), d = this.offset(),
                f = /^body|html$/i.test(b[0].nodeName) ? {top: 0, left: 0} : b.offset();
            d.top -= parseFloat(c.curCSS(a, "marginTop", true)) || 0;
            d.left -= parseFloat(c.curCSS(a, "marginLeft", true)) || 0;
            f.top += parseFloat(c.curCSS(b[0], "borderTopWidth", true)) || 0;
            f.left += parseFloat(c.curCSS(b[0], "borderLeftWidth", true)) || 0;
            return {top: d.top - f.top, left: d.left - f.left}
        }, offsetParent: function () {
            return this.map(function () {
                for (var a =
                    this.offsetParent || s.body; a && !/^body|html$/i.test(a.nodeName) && c.css(a, "position") === "static";) a = a.offsetParent;
                return a
            })
        }
    });
    c.each(["Left", "Top"], function (a, b) {
        var d = "scroll" + b;
        c.fn[d] = function (f) {
            var e = this[0], i;
            if (!e) return null;
            if (f !== w) return this.each(function () {
                if (i = wa(this)) i.scrollTo(!a ? f : c(i).scrollLeft(), a ? f : c(i).scrollTop()); else this[d] = f
            }); else return (i = wa(e)) ? "pageXOffset" in i ? i[a ? "pageYOffset" : "pageXOffset"] : c.support.boxModel && i.document.documentElement[d] || i.document.body[d] : e[d]
        }
    });
    c.each(["Height", "Width"], function (a, b) {
        var d = b.toLowerCase();
        c.fn["inner" + b] = function () {
            return this[0] ? c.css(this[0], d, false, "padding") : null
        };
        c.fn["outer" + b] = function (f) {
            return this[0] ? c.css(this[0], d, false, f ? "margin" : "border") : null
        };
        c.fn[d] = function (f) {
            var e = this[0];
            if (!e) return f == null ? null : this;
            return "scrollTo" in e && e.document ? e.document.compatMode === "CSS1Compat" && e.document.documentElement["client" + b] || e.document.body["client" + b] : e.nodeType === 9 ? Math.max(e.documentElement["client" + b], e.body["scroll" +
            b], e.documentElement["scroll" + b], e.body["offset" + b], e.documentElement["offset" + b]) : f === w ? c.css(e, d) : this.css(d, typeof f === "string" ? f : f + "px")
        }
    });
    A.jQuery = A.$ = c
})(window);
(function ($) {
    var abs = Math.abs, max = Math.max, min = Math.min, round = Math.round;

    function div() {
        return $('<div/>')
    }

    $.imgAreaSelect = function (img, options) {
        var $img = $(img), imgLoaded, $box = div(), $area = div(), $border = div().add(div()).add(div()).add(div()),
            $outer = div().add(div()).add(div()).add(div()), $handles = $([]), $areaOpera, left, top, imgOfs, imgWidth,
            imgHeight, $parent, parOfs, zIndex = 0, position = 'absolute', startX, startY, scaleX, scaleY,
            resizeMargin = 10, resize, aspectRatio, shown, x1, y1, x2, y2,
            selection = {x1: 0, y1: 0, x2: 0, y2: 0, width: 0, height: 0}, $p, d, i, o, w, h, adjusted;

        function viewX(x) {
            return x + imgOfs.left - parOfs.left
        }

        function viewY(y) {
            return y + imgOfs.top - parOfs.top
        }

        function selX(x) {
            return x - imgOfs.left + parOfs.left
        }

        function selY(y) {
            return y - imgOfs.top + parOfs.top
        }

        function evX(event) {
            return event.pageX - parOfs.left
        }

        function evY(event) {
            return event.pageY - parOfs.top
        }

        function getSelection(noScale) {
            var sx = noScale || scaleX, sy = noScale || scaleY;
            return {
                x1: round(selection.x1 * sx),
                y1: round(selection.y1 * sy),
                x2: round(selection.x2 * sx),
                y2: round(selection.y2 * sy),
                width: round(selection.x2 * sx) - round(selection.x1 * sx),
                height: round(selection.y2 * sy) - round(selection.y1 * sy)
            }
        }

        function setSelection(x1, y1, x2, y2, noScale) {
            var sx = noScale || scaleX, sy = noScale || scaleY;
            selection = {x1: round(x1 / sx), y1: round(y1 / sy), x2: round(x2 / sx), y2: round(y2 / sy)};
            selection.width = (x2 = viewX(selection.x2)) - (x1 = viewX(selection.x1));
            selection.height = (y2 = viewX(selection.y2)) - (y1 = viewX(selection.y1))
        }

        function adjust() {
            if (!$img.width()) return;
            imgOfs = {left: round($img.offset().left), top: round($img.offset().top)};
            imgWidth = $img.width();
            imgHeight = $img.height();
            if ($().jquery == '1.3.2' && $.browser.safari && position == 'fixed') {
                imgOfs.top += max(document.documentElement.scrollTop, $('body').scrollTop());
                imgOfs.left += max(document.documentElement.scrollLeft, $('body').scrollLeft())
            }
            parOfs = $.inArray($parent.css('position'), ['absolute', 'relative']) + 1 ? {
                left: round($parent.offset().left) - $parent.scrollLeft(),
                top: round($parent.offset().top) - $parent.scrollTop()
            } : position == 'fixed' ? {left: $(document).scrollLeft(), top: $(document).scrollTop()} : {
                left: 0,
                top: 0
            };
            left = viewX(0);
            top = viewY(0)
        }

        function update(resetKeyPress) {
            if (!shown) return;
            $box.css({
                left: viewX(selection.x1),
                top: viewY(selection.y1)
            }).add($area).width(w = selection.width).height(h = selection.height);
            $area.add($border).add($handles).css({left: 0, top: 0});
            $border.width(max(w - $border.outerWidth() + $border.innerWidth(), 0)).height(max(h - $border.outerHeight() + $border.innerHeight(), 0));
            $($outer[0]).css({left: left, top: top, width: selection.x1, height: imgHeight});
            $($outer[1]).css({left: left + selection.x1, top: top, width: w, height: selection.y1});
            $($outer[2]).css({left: left + selection.x2, top: top, width: imgWidth - selection.x2, height: imgHeight});
            $($outer[3]).css({
                left: left + selection.x1,
                top: top + selection.y2,
                width: w,
                height: imgHeight - selection.y2
            });
            w -= $handles.outerWidth();
            h -= $handles.outerHeight();
            switch ($handles.length) {
                case 8:
                    $($handles[4]).css({left: w / 2});
                    $($handles[5]).css({left: w, top: h / 2});
                    $($handles[6]).css({left: w / 2, top: h});
                    $($handles[7]).css({top: h / 2});
                case 4:
                    $handles.slice(1, 3).css({left: w});
                    $handles.slice(2, 4).css({top: h})
            }
            if (resetKeyPress !== false) {
                if ($.imgAreaSelect.keyPress != docKeyPress) $(document).unbind($.imgAreaSelect.keyPress, $.imgAreaSelect.onKeyPress);
                if (options.keys) $(document)[$.imgAreaSelect.keyPress]($.imgAreaSelect.onKeyPress = docKeyPress)
            }
            if ($.browser.msie && $border.outerWidth() - $border.innerWidth() == 2) {
                $border.css('margin', 0);
                setTimeout(function () {
                    $border.css('margin', 'auto')
                }, 0)
            }
        }

        function doUpdate(resetKeyPress) {
            adjust();
            update(resetKeyPress);
            x1 = viewX(selection.x1);
            y1 = viewY(selection.y1);
            x2 = viewX(selection.x2);
            y2 = viewY(selection.y2)
        }

        function hide($elem, fn) {
            options.fadeSpeed ? $elem.fadeOut(options.fadeSpeed, fn) : $elem.hide()
        }

        function areaMouseMove(event) {
            var x = selX(evX(event)) - selection.x1, y = selY(evY(event)) - selection.y1;
            if (!adjusted) {
                adjust();
                adjusted = true;
                $box.one('mouseout', function () {
                    adjusted = false
                })
            }
            resize = '';
            if (options.resizable) {
                if (y <= resizeMargin) resize = 'n'; else if (y >= selection.height - resizeMargin) resize = 's';
                if (x <= resizeMargin) resize += 'w'; else if (x >= selection.width - resizeMargin) resize += 'e'
            }
            $box.css('cursor', resize ? resize + '-resize' : options.movable ? 'move' : '');
            if ($areaOpera) $areaOpera.toggle()
        }

        function docMouseUp(event) {
            $('body').css('cursor', '');
            if (options.autoHide || selection.width * selection.height == 0) hide($box.add($outer), function () {
                $(this).hide()
            });
            options.onSelectEnd(img, getSelection());
            $(document).unbind('mousemove', selectingMouseMove);
            $box.mousemove(areaMouseMove)
        }

        function areaMouseDown(event) {
            if (event.which != 1) return false;
            adjust();
            if (resize) {
                $('body').css('cursor', resize + '-resize');
                x1 = viewX(selection[/w/.test(resize) ? 'x2' : 'x1']);
                y1 = viewY(selection[/n/.test(resize) ? 'y2' : 'y1']);
                $(document).mousemove(selectingMouseMove).one('mouseup', docMouseUp);
                $box.unbind('mousemove', areaMouseMove)
            } else if (options.movable) {
                startX = left + selection.x1 - evX(event);
                startY = top + selection.y1 - evY(event);
                $box.unbind('mousemove', areaMouseMove);
                $(document).mousemove(movingMouseMove).one('mouseup', function () {
                    options.onSelectEnd(img, getSelection());
                    $(document).unbind('mousemove', movingMouseMove);
                    $box.mousemove(areaMouseMove)
                })
            } else $img.mousedown(event);
            return false
        }

        function aspectRatioXY() {
            x2 = max(left, min(left + imgWidth, x1 + abs(y2 - y1) * aspectRatio * (x2 > x1 || -1)));
            y2 = round(max(top, min(top + imgHeight, y1 + abs(x2 - x1) / aspectRatio * (y2 > y1 || -1))));
            x2 = round(x2)
        }

        function aspectRatioYX() {
            y2 = max(top, min(top + imgHeight, y1 + abs(x2 - x1) / aspectRatio * (y2 > y1 || -1)));
            x2 = round(max(left, min(left + imgWidth, x1 + abs(y2 - y1) * aspectRatio * (x2 > x1 || -1))));
            y2 = round(y2)
        }

        function doResize() {
            if (abs(x2 - x1) < options.minWidth) {
                x2 = x1 - options.minWidth * (x2 < x1 || -1);
                if (x2 < left) x1 = left + options.minWidth; else if (x2 > left + imgWidth) x1 = left + imgWidth - options.minWidth
            }
            if (abs(y2 - y1) < options.minHeight) {
                y2 = y1 - options.minHeight * (y2 < y1 || -1);
                if (y2 < top) y1 = top + options.minHeight; else if (y2 > top + imgHeight) y1 = top + imgHeight - options.minHeight
            }
            x2 = max(left, min(x2, left + imgWidth));
            y2 = max(top, min(y2, top + imgHeight));
            if (aspectRatio) if (abs(x2 - x1) / aspectRatio > abs(y2 - y1)) aspectRatioYX(); else aspectRatioXY();
            if (abs(x2 - x1) > options.maxWidth) {
                x2 = x1 - options.maxWidth * (x2 < x1 || -1);
                if (aspectRatio) aspectRatioYX()
            }
            if (abs(y2 - y1) > options.maxHeight) {
                y2 = y1 - options.maxHeight * (y2 < y1 || -1);
                if (aspectRatio) aspectRatioXY()
            }
            selection = {
                x1: selX(min(x1, x2)),
                x2: selX(max(x1, x2)),
                y1: selY(min(y1, y2)),
                y2: selY(max(y1, y2)),
                width: abs(x2 - x1),
                height: abs(y2 - y1)
            };
            update();
            options.onSelectChange(img, getSelection())
        }

        function selectingMouseMove(event) {
            x2 = resize == '' || /w|e/.test(resize) || aspectRatio ? evX(event) : viewX(selection.x2);
            y2 = resize == '' || /n|s/.test(resize) || aspectRatio ? evY(event) : viewY(selection.y2);
            doResize();
            return false
        }

        function doMove(newX1, newY1) {
            x2 = (x1 = newX1) + selection.width;
            y2 = (y1 = newY1) + selection.height;
            selection = $.extend(selection, {x1: selX(x1), y1: selY(y1), x2: selX(x2), y2: selY(y2)});
            update();
            options.onSelectChange(img, getSelection())
        }

        function movingMouseMove(event) {
            x1 = max(left, min(startX + evX(event), left + imgWidth - selection.width));
            y1 = max(top, min(startY + evY(event), top + imgHeight - selection.height));
            doMove(x1, y1);
            event.preventDefault();
            return false
        }

        function startSelection() {
            adjust();
            x2 = x1;
            y2 = y1;
            doResize();
            resize = '';
            if ($outer.is(':not(:visible)')) $box.add($outer).hide().fadeIn(options.fadeSpeed || 0);
            shown = true;
            $(document).unbind('mouseup', cancelSelection).mousemove(selectingMouseMove).one('mouseup', docMouseUp);
            $box.unbind('mousemove', areaMouseMove);
            options.onSelectStart(img, getSelection())
        }

        function cancelSelection() {
            $(document).unbind('mousemove', startSelection);
            hide($box.add($outer));
            selection = {x1: selX(x1), y1: selY(y1), x2: selX(x1), y2: selY(y1), width: 0, height: 0};
            options.onSelectChange(img, getSelection());
            options.onSelectEnd(img, getSelection())
        }

        function imgMouseDown(event) {
            if (event.which != 1 || $outer.is(':animated')) return false;
            adjust();
            startX = x1 = evX(event);
            startY = y1 = evY(event);
            $(document).one('mousemove', startSelection).one('mouseup', cancelSelection);
            return false
        }

        function parentScroll() {
            doUpdate(false)
        }

        function imgLoad() {
            imgLoaded = true;
            setOptions(options = $.extend({
                classPrefix: 'imgareaselect',
                movable: true,
                resizable: true,
                parent: 'body',
                onInit: function () {
                },
                onSelectStart: function () {
                },
                onSelectChange: function () {
                },
                onSelectEnd: function () {
                }
            }, options));
            $box.add($outer).css({visibility: ''});
            if (options.show) {
                shown = true;
                adjust();
                update();
                $box.add($outer).hide().fadeIn(options.fadeSpeed || 0)
            }
            setTimeout(function () {
                options.onInit(img, getSelection())
            }, 0)
        }

        var docKeyPress = function (event) {
            var k = options.keys, d, t, key = event.keyCode || event.which;
            d = !isNaN(k.alt) && (event.altKey || event.originalEvent.altKey) ? k.alt : !isNaN(k.ctrl) && event.ctrlKey ? k.ctrl : !isNaN(k.shift) && event.shiftKey ? k.shift : !isNaN(k.arrows) ? k.arrows : 10;
            if (k.arrows == 'resize' || (k.shift == 'resize' && event.shiftKey) || (k.ctrl == 'resize' && event.ctrlKey) || (k.alt == 'resize' && (event.altKey || event.originalEvent.altKey))) {
                switch (key) {
                    case 37:
                        d = -d;
                    case 39:
                        t = max(x1, x2);
                        x1 = min(x1, x2);
                        x2 = max(t + d, x1);
                        if (aspectRatio) aspectRatioYX();
                        break;
                    case 38:
                        d = -d;
                    case 40:
                        t = max(y1, y2);
                        y1 = min(y1, y2);
                        y2 = max(t + d, y1);
                        if (aspectRatio) aspectRatioXY();
                        break;
                    default:
                        return
                }
                doResize()
            } else {
                x1 = min(x1, x2);
                y1 = min(y1, y2);
                switch (key) {
                    case 37:
                        doMove(max(x1 - d, left), y1);
                        break;
                    case 38:
                        doMove(x1, max(y1 - d, top));
                        break;
                    case 39:
                        doMove(x1 + min(d, imgWidth - selX(x2)), y1);
                        break;
                    case 40:
                        doMove(x1, y1 + min(d, imgHeight - selY(y2)));
                        break;
                    default:
                        return
                }
            }
            return false
        };

        function styleOptions($elem, props) {
            for (option in props) if (options[option] !== undefined) $elem.css(props[option], options[option])
        }

        function setOptions(newOptions) {
            if (newOptions.parent) ($parent = $(newOptions.parent)).append($box.add($outer));
            options = $.extend(options, newOptions);
            adjust();
            if (newOptions.handles != null) {
                $handles.remove();
                $handles = $([]);
                i = newOptions.handles ? newOptions.handles == 'corners' ? 4 : 8 : 0;
                while (i--) $handles = $handles.add(div());
                $handles.addClass(options.classPrefix + '-handle').css({
                    position: 'absolute',
                    fontSize: 0,
                    zIndex: zIndex + 1 || 1
                });
                if (!parseInt($handles.css('width'))) $handles.width(5).height(5);
                if (o = options.borderWidth) $handles.css({borderWidth: o, borderStyle: 'solid'});
                styleOptions($handles, {
                    borderColor1: 'border-color',
                    borderColor2: 'background-color',
                    borderOpacity: 'opacity'
                })
            }
            scaleX = options.imageWidth / imgWidth || 1;
            scaleY = options.imageHeight / imgHeight || 1;
            if (newOptions.x1 != null) {
                setSelection(newOptions.x1, newOptions.y1, newOptions.x2, newOptions.y2);
                newOptions.show = !newOptions.hide
            }
            if (newOptions.keys) options.keys = $.extend({shift: 1, ctrl: 'resize'}, newOptions.keys);
            $outer.addClass(options.classPrefix + '-outer');
            $area.addClass(options.classPrefix + '-selection');
            for (i = 0; i++ < 4;) $($border[i - 1]).addClass(options.classPrefix + '-border' + i);
            styleOptions($area, {selectionColor: 'background-color', selectionOpacity: 'opacity'});
            styleOptions($border, {borderOpacity: 'opacity', borderWidth: 'border-width'});
            styleOptions($outer, {outerColor: 'background-color', outerOpacity: 'opacity'});
            if (o = options.borderColor1) $($border[0]).css({borderStyle: 'solid', borderColor: o});
            if (o = options.borderColor2) $($border[1]).css({borderStyle: 'dashed', borderColor: o});
            $box.append($area.add($border).add($handles).add($areaOpera));
            if ($.browser.msie) {
                if (o = $outer.css('filter').match(/opacity=([0-9]+)/)) $outer.css('opacity', o[1] / 100);
                if (o = $border.css('filter').match(/opacity=([0-9]+)/)) $border.css('opacity', o[1] / 100)
            }
            if (newOptions.hide) hide($box.add($outer)); else if (newOptions.show && imgLoaded) {
                shown = true;
                $box.add($outer).fadeIn(options.fadeSpeed || 0);
                doUpdate()
            }
            aspectRatio = (d = (options.aspectRatio || '').split(/:/))[0] / d[1];
            if (options.disable || options.enable === false) {
                $box.unbind('mousemove', areaMouseMove).unbind('mousedown', areaMouseDown);
                $img.add($outer).unbind('mousedown', imgMouseDown);
                $(window).unbind('resize', parentScroll);
                $img.add($img.parents()).unbind('scroll', parentScroll)
            } else if (options.enable || options.disable === false) {
                if (options.resizable || options.movable) $box.mousemove(areaMouseMove).mousedown(areaMouseDown);
                if (!options.persistent) $img.add($outer).mousedown(imgMouseDown);
                $(window).resize(parentScroll);
                $img.add($img.parents()).scroll(parentScroll)
            }
            options.enable = options.disable = undefined
        }

        this.getOptions = function () {
            return options
        };
        this.setOptions = setOptions;
        this.getSelection = getSelection;
        this.setSelection = setSelection;
        this.update = doUpdate;
        $p = $img;
        while ($p.length && !$p.is('body')) {
            if (!isNaN($p.css('z-index')) && $p.css('z-index') > zIndex) zIndex = $p.css('z-index');
            if ($p.css('position') == 'fixed') position = 'fixed';
            $p = $p.parent()
        }
        if (!isNaN(options.zIndex)) zIndex = options.zIndex;
        if ($.browser.msie) $img.attr('unselectable', 'on');
        $.imgAreaSelect.keyPress = $.browser.msie || $.browser.safari ? 'keydown' : 'keypress';
        if ($.browser.opera) $areaOpera = div().css({
            width: '100%',
            height: '100%',
            position: 'absolute',
            zIndex: zIndex + 2 || 2
        });
        $box.add($outer).css({visibility: 'hidden', position: position, overflow: 'hidden', zIndex: zIndex || '0'});
        $box.css({zIndex: zIndex + 2 || 2});
        $area.add($border).css({position: 'absolute'});
        img.complete || img.readyState == 'complete' || !$img.is('img') ? imgLoad() : $img.one('load', imgLoad)
    };
    $.fn.imgAreaSelect = function (options) {
        options = options || {};
        this.each(function () {
            if ($(this).data('imgAreaSelect')) $(this).data('imgAreaSelect').setOptions(options); else {
                if (options.enable === undefined && options.disable === undefined) options.enable = true;
                $(this).data('imgAreaSelect', new $.imgAreaSelect(this, options))
            }
        });
        if (options.instance) return $(this).data('imgAreaSelect');
        return this
    }
})(jQuery);
jQuery.fn.rotate = function (angle, whence) {
    var p = this.get(0);

    // we store the angle inside the image tag for persistence
    if (!whence) {
        p.angle = ((p.angle == undefined ? 0 : p.angle) + angle) % 360;
    } else {
        p.angle = angle;
    }

    if (p.angle >= 0) {
        var rotation = Math.PI * p.angle / 180;
    } else {
        var rotation = Math.PI * (360 + p.angle) / 180;
    }
    var costheta = Math.cos(rotation);
    var sintheta = Math.sin(rotation);

    if (document.all && !window.opera) {
        var canvas = document.createElement('img');

        canvas.src = p.src;
        canvas.height = p.height;
        canvas.width = p.width;

        canvas.style.filter = "progid:DXImageTransform.Microsoft.Matrix(M11=" + costheta + ",M12=" + (-sintheta) + ",M21=" + sintheta + ",M22=" + costheta + ",SizingMethod='auto expand')";
    } else {
        var canvas = document.createElement('canvas');
        if (!p.oImage) {
            canvas.oImage = new Image();
            canvas.oImage.src = p.src;
        } else {
            canvas.oImage = p.oImage;
        }

        canvas.style.width = canvas.width = Math.abs(costheta * canvas.oImage.width) + Math.abs(sintheta * canvas.oImage.height);
        canvas.style.height = canvas.height = Math.abs(costheta * canvas.oImage.height) + Math.abs(sintheta * canvas.oImage.width);

        var context = canvas.getContext('2d');
        context.save();
        if (rotation <= Math.PI / 2) {
            context.translate(sintheta * canvas.oImage.height, 0);
        } else if (rotation <= Math.PI) {
            context.translate(canvas.width, -costheta * canvas.oImage.height);
        } else if (rotation <= 1.5 * Math.PI) {
            context.translate(-costheta * canvas.oImage.width, canvas.height);
        } else {
            context.translate(0, -sintheta * canvas.oImage.width);
        }
        context.rotate(rotation);
        context.drawImage(canvas.oImage, 0, 0, canvas.oImage.width, canvas.oImage.height);
        context.restore();
    }
    canvas.id = p.id;
    canvas.angle = p.angle;
    p.parentNode.replaceChild(canvas, p);
}

jQuery.fn.rotateRight = function (angle) {
    this.rotate(angle == undefined ? 90 : angle);
}

jQuery.fn.rotateLeft = function (angle) {
    this.rotate(angle == undefined ? -90 : -angle);
}
/*
 * jQuery UI 1.7
 *
 * Copyright (c) 2009 AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * http://docs.jquery.com/UI
 */
jQuery.ui || (function (c) {
    var i = c.fn.remove, d = c.browser.mozilla && (parseFloat(c.browser.version) < 1.9);
    c.ui = {
        version: "1.7",
        plugin: {
            add: function (k, l, n) {
                var m = c.ui[k].prototype;
                for (var j in n) {
                    m.plugins[j] = m.plugins[j] || [];
                    m.plugins[j].push([l, n[j]])
                }
            }, call: function (j, l, k) {
                var n = j.plugins[l];
                if (!n || !j.element[0].parentNode) {
                    return
                }
                for (var m = 0; m < n.length; m++) {
                    if (j.options[n[m][0]]) {
                        n[m][1].apply(j.element, k)
                    }
                }
            }
        },
        contains: function (k, j) {
            return document.compareDocumentPosition ? k.compareDocumentPosition(j) & 16 : k !== j && k.contains(j)
        },
        hasScroll: function (m, k) {
            if (c(m).css("overflow") == "hidden") {
                return false
            }
            var j = (k && k == "left") ? "scrollLeft" : "scrollTop", l = false;
            if (m[j] > 0) {
                return true
            }
            m[j] = 1;
            l = (m[j] > 0);
            m[j] = 0;
            return l
        },
        isOverAxis: function (k, j, l) {
            return (k > j) && (k < (j + l))
        },
        isOver: function (o, k, n, m, j, l) {
            return c.ui.isOverAxis(o, n, j) && c.ui.isOverAxis(k, m, l)
        },
        keyCode: {
            BACKSPACE: 8,
            CAPS_LOCK: 20,
            COMMA: 188,
            CONTROL: 17,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            INSERT: 45,
            LEFT: 37,
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SHIFT: 16,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    };
    if (d) {
        var f = c.attr, e = c.fn.removeAttr, h = "http://www.w3.org/2005/07/aaa", a = /^aria-/, b = /^wairole:/;
        c.attr = function (k, j, l) {
            var m = l !== undefined;
            return (j == "role" ? (m ? f.call(this, k, j, "wairole:" + l) : (f.apply(this, arguments) || "").replace(b, "")) : (a.test(j) ? (m ? k.setAttributeNS(h, j.replace(a, "aaa:"), l) : f.call(this, k, j.replace(a, "aaa:"))) : f.apply(this, arguments)))
        };
        c.fn.removeAttr = function (j) {
            return (a.test(j) ? this.each(function () {
                this.removeAttributeNS(h, j.replace(a, ""))
            }) : e.call(this, j))
        }
    }
    c.fn.extend({
        remove: function () {
            c("*", this).add(this).each(function () {
                c(this).triggerHandler("remove")
            });
            return i.apply(this, arguments)
        }, enableSelection: function () {
            return this.attr("unselectable", "off").css("MozUserSelect", "").unbind("selectstart.ui")
        }, disableSelection: function () {
            return this.attr("unselectable", "on").css("MozUserSelect", "none").bind("selectstart.ui", function () {
                return false
            })
        }, scrollParent: function () {
            var j;
            if ((c.browser.msie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
                j = this.parents().filter(function () {
                    return (/(relative|absolute|fixed)/).test(c.curCSS(this, "position", 1)) && (/(auto|scroll)/).test(c.curCSS(this, "overflow", 1) + c.curCSS(this, "overflow-y", 1) + c.curCSS(this, "overflow-x", 1))
                }).eq(0)
            } else {
                j = this.parents().filter(function () {
                    return (/(auto|scroll)/).test(c.curCSS(this, "overflow", 1) + c.curCSS(this, "overflow-y", 1) + c.curCSS(this, "overflow-x", 1))
                }).eq(0)
            }
            return (/fixed/).test(this.css("position")) || !j.length ? c(document) : j
        }
    });
    c.extend(c.expr[":"], {
        data: function (l, k, j) {
            return !!c.data(l, j[3])
        }, focusable: function (k) {
            var l = k.nodeName.toLowerCase(), j = c.attr(k, "tabindex");
            return (/input|select|textarea|button|object/.test(l) ? !k.disabled : "a" == l || "area" == l ? k.href || !isNaN(j) : !isNaN(j)) && !c(k)["area" == l ? "parents" : "closest"](":hidden").length
        }, tabbable: function (k) {
            var j = c.attr(k, "tabindex");
            return (isNaN(j) || j >= 0) && c(k).is(":focusable")
        }
    });

    function g(m, n, o, l) {
        function k(q) {
            var p = c[m][n][q] || [];
            return (typeof p == "string" ? p.split(/,?\s+/) : p)
        }

        var j = k("getter");
        if (l.length == 1 && typeof l[0] == "string") {
            j = j.concat(k("getterSetter"))
        }
        return (c.inArray(o, j) != -1)
    }

    c.widget = function (k, j) {
        var l = k.split(".")[0];
        k = k.split(".")[1];
        c.fn[k] = function (p) {
            var n = (typeof p == "string"), o = Array.prototype.slice.call(arguments, 1);
            if (n && p.substring(0, 1) == "_") {
                return this
            }
            if (n && g(l, k, p, o)) {
                var m = c.data(this[0], k);
                return (m ? m[p].apply(m, o) : undefined)
            }
            return this.each(function () {
                var q = c.data(this, k);
                (!q && !n && c.data(this, k, new c[l][k](this, p))._init());
                (q && n && c.isFunction(q[p]) && q[p].apply(q, o))
            })
        };
        c[l] = c[l] || {};
        c[l][k] = function (o, n) {
            var m = this;
            this.namespace = l;
            this.widgetName = k;
            this.widgetEventPrefix = c[l][k].eventPrefix || k;
            this.widgetBaseClass = l + "-" + k;
            this.options = c.extend({}, c.widget.defaults, c[l][k].defaults, c.metadata && c.metadata.get(o)[k], n);
            this.element = c(o).bind("setData." + k, function (q, p, r) {
                if (q.target == o) {
                    return m._setData(p, r)
                }
            }).bind("getData." + k, function (q, p) {
                if (q.target == o) {
                    return m._getData(p)
                }
            }).bind("remove", function () {
                return m.destroy()
            })
        };
        c[l][k].prototype = c.extend({}, c.widget.prototype, j);
        c[l][k].getterSetter = "option"
    };
    c.widget.prototype = {
        _init: function () {
        }, destroy: function () {
            this.element.removeData(this.widgetName).removeClass(this.widgetBaseClass + "-disabled " + this.namespace + "-state-disabled").removeAttr("aria-disabled")
        }, option: function (l, m) {
            var k = l, j = this;
            if (typeof l == "string") {
                if (m === undefined) {
                    return this._getData(l)
                }
                k = {};
                k[l] = m
            }
            c.each(k, function (n, o) {
                j._setData(n, o)
            })
        }, _getData: function (j) {
            return this.options[j]
        }, _setData: function (j, k) {
            this.options[j] = k;
            if (j == "disabled") {
                this.element[k ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled " + this.namespace + "-state-disabled").attr("aria-disabled", k)
            }
        }, enable: function () {
            this._setData("disabled", false)
        }, disable: function () {
            this._setData("disabled", true)
        }, _trigger: function (l, m, n) {
            var p = this.options[l], j = (l == this.widgetEventPrefix ? l : this.widgetEventPrefix + l);
            m = c.Event(m);
            m.type = j;
            if (m.originalEvent) {
                for (var k = c.event.props.length, o; k;) {
                    o = c.event.props[--k];
                    m[o] = m.originalEvent[o]
                }
            }
            this.element.trigger(m, n);
            return !(c.isFunction(p) && p.call(this.element[0], m, n) === false || m.isDefaultPrevented())
        }
    };
    c.widget.defaults = {disabled: false};
    c.ui.mouse = {
        _mouseInit: function () {
            var j = this;
            this.element.bind("mousedown." + this.widgetName, function (k) {
                return j._mouseDown(k)
            }).bind("click." + this.widgetName, function (k) {
                if (j._preventClickEvent) {
                    j._preventClickEvent = false;
                    k.stopImmediatePropagation();
                    return false
                }
            });
            if (c.browser.msie) {
                this._mouseUnselectable = this.element.attr("unselectable");
                this.element.attr("unselectable", "on")
            }
            this.started = false
        }, _mouseDestroy: function () {
            this.element.unbind("." + this.widgetName);
            (c.browser.msie && this.element.attr("unselectable", this._mouseUnselectable))
        }, _mouseDown: function (l) {
            l.originalEvent = l.originalEvent || {};
            if (l.originalEvent.mouseHandled) {
                return
            }
            (this._mouseStarted && this._mouseUp(l));
            this._mouseDownEvent = l;
            var k = this, m = (l.which == 1),
                j = (typeof this.options.cancel == "string" ? c(l.target).parents().add(l.target).filter(this.options.cancel).length : false);
            if (!m || j || !this._mouseCapture(l)) {
                return true
            }
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function () {
                    k.mouseDelayMet = true
                }, this.options.delay)
            }
            if (this._mouseDistanceMet(l) && this._mouseDelayMet(l)) {
                this._mouseStarted = (this._mouseStart(l) !== false);
                if (!this._mouseStarted) {
                    l.preventDefault();
                    return true
                }
            }
            this._mouseMoveDelegate = function (n) {
                return k._mouseMove(n)
            };
            this._mouseUpDelegate = function (n) {
                return k._mouseUp(n)
            };
            c(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
            (c.browser.safari || l.preventDefault());
            l.originalEvent.mouseHandled = true;
            return true
        }, _mouseMove: function (j) {
            if (c.browser.msie && !j.button) {
                return this._mouseUp(j)
            }
            if (this._mouseStarted) {
                this._mouseDrag(j);
                return j.preventDefault()
            }
            if (this._mouseDistanceMet(j) && this._mouseDelayMet(j)) {
                this._mouseStarted = (this._mouseStart(this._mouseDownEvent, j) !== false);
                (this._mouseStarted ? this._mouseDrag(j) : this._mouseUp(j))
            }
            return !this._mouseStarted
        }, _mouseUp: function (j) {
            c(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                this._preventClickEvent = (j.target == this._mouseDownEvent.target);
                this._mouseStop(j)
            }
            return false
        }, _mouseDistanceMet: function (j) {
            return (Math.max(Math.abs(this._mouseDownEvent.pageX - j.pageX), Math.abs(this._mouseDownEvent.pageY - j.pageY)) >= this.options.distance)
        }, _mouseDelayMet: function (j) {
            return this.mouseDelayMet
        }, _mouseStart: function (j) {
        }, _mouseDrag: function (j) {
        }, _mouseStop: function (j) {
        }, _mouseCapture: function (j) {
            return true
        }
    };
    c.ui.mouse.defaults = {cancel: null, distance: 1, delay: 0}
})(jQuery);
(function (a) {
    a.widget("ui.draggable", a.extend({}, a.ui.mouse, {
        _init: function () {
            if (this.options.helper == "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
                this.element[0].style.position = "relative"
            }
            (this.options.addClasses && this.element.addClass("ui-draggable"));
            (this.options.disabled && this.element.addClass("ui-draggable-disabled"));
            this._mouseInit()
        }, destroy: function () {
            if (!this.element.data("draggable")) {
                return
            }
            this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
            this._mouseDestroy()
        }, _mouseCapture: function (b) {
            var c = this.options;
            if (this.helper || c.disabled || a(b.target).is(".ui-resizable-handle")) {
                return false
            }
            this.handle = this._getHandle(b);
            if (!this.handle) {
                return false
            }
            return true
        }, _mouseStart: function (b) {
            var c = this.options;
            this.helper = this._createHelper(b);
            this._cacheHelperProportions();
            if (a.ui.ddmanager) {
                a.ui.ddmanager.current = this
            }
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.element.offset();
            this.offset = {top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left};
            a.extend(this.offset, {
                click: {left: b.pageX - this.offset.left, top: b.pageY - this.offset.top},
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this._generatePosition(b);
            this.originalPageX = b.pageX;
            this.originalPageY = b.pageY;
            if (c.cursorAt) {
                this._adjustOffsetFromHelper(c.cursorAt)
            }
            if (c.containment) {
                this._setContainment()
            }
            this._trigger("start", b);
            this._cacheHelperProportions();
            if (a.ui.ddmanager && !c.dropBehaviour) {
                a.ui.ddmanager.prepareOffsets(this, b)
            }
            this.helper.addClass("ui-draggable-dragging");
            this._mouseDrag(b, true);
            return true
        }, _mouseDrag: function (b, d) {
            this.position = this._generatePosition(b);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!d) {
                var c = this._uiHash();
                this._trigger("drag", b, c);
                this.position = c.position
            }
            if (!this.options.axis || this.options.axis != "y") {
                this.helper[0].style.left = this.position.left + "px"
            }
            if (!this.options.axis || this.options.axis != "x") {
                this.helper[0].style.top = this.position.top + "px"
            }
            if (a.ui.ddmanager) {
                a.ui.ddmanager.drag(this, b)
            }
            return false
        }, _mouseStop: function (c) {
            var d = false;
            if (a.ui.ddmanager && !this.options.dropBehaviour) {
                d = a.ui.ddmanager.drop(this, c)
            }
            if (this.dropped) {
                d = this.dropped;
                this.dropped = false
            }
            if ((this.options.revert == "invalid" && !d) || (this.options.revert == "valid" && d) || this.options.revert === true || (a.isFunction(this.options.revert) && this.options.revert.call(this.element, d))) {
                var b = this;
                a(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                    b._trigger("stop", c);
                    b._clear()
                })
            } else {
                this._trigger("stop", c);
                this._clear()
            }
            return false
        }, _getHandle: function (b) {
            var c = !this.options.handle || !a(this.options.handle, this.element).length ? true : false;
            a(this.options.handle, this.element).find("*").andSelf().each(function () {
                if (this == b.target) {
                    c = true
                }
            });
            return c
        }, _createHelper: function (c) {
            var d = this.options;
            var b = a.isFunction(d.helper) ? a(d.helper.apply(this.element[0], [c])) : (d.helper == "clone" ? this.element.clone() : this.element);
            if (!b.parents("body").length) {
                b.appendTo((d.appendTo == "parent" ? this.element[0].parentNode : d.appendTo))
            }
            if (b[0] != this.element[0] && !(/(fixed|absolute)/).test(b.css("position"))) {
                b.css("position", "absolute")
            }
            return b
        }, _adjustOffsetFromHelper: function (b) {
            if (b.left != undefined) {
                this.offset.click.left = b.left + this.margins.left
            }
            if (b.right != undefined) {
                this.offset.click.left = this.helperProportions.width - b.right + this.margins.left
            }
            if (b.top != undefined) {
                this.offset.click.top = b.top + this.margins.top
            }
            if (b.bottom != undefined) {
                this.offset.click.top = this.helperProportions.height - b.bottom + this.margins.top
            }
        }, _getParentOffset: function () {
            this.offsetParent = this.helper.offsetParent();
            var b = this.offsetParent.offset();
            if (this.cssPosition == "absolute" && this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                b.left += this.scrollParent.scrollLeft();
                b.top += this.scrollParent.scrollTop()
            }
            if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && a.browser.msie)) {
                b = {top: 0, left: 0}
            }
            return {
                top: b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        }, _getRelativeOffset: function () {
            if (this.cssPosition == "relative") {
                var b = this.element.position();
                return {
                    top: b.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: b.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            } else {
                return {top: 0, left: 0}
            }
        }, _cacheMargins: function () {
            this.margins = {
                left: (parseInt(this.element.css("marginLeft"), 10) || 0),
                top: (parseInt(this.element.css("marginTop"), 10) || 0)
            }
        }, _cacheHelperProportions: function () {
            this.helperProportions = {width: this.helper.outerWidth(), height: this.helper.outerHeight()}
        }, _setContainment: function () {
            var e = this.options;
            if (e.containment == "parent") {
                e.containment = this.helper[0].parentNode
            }
            if (e.containment == "document" || e.containment == "window") {
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, a(e.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (a(e.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
            }
            if (!(/^(document|window|parent)$/).test(e.containment) && e.containment.constructor != Array) {
                var c = a(e.containment)[0];
                if (!c) {
                    return
                }
                var d = a(e.containment).offset();
                var b = (a(c).css("overflow") != "hidden");
                this.containment = [d.left + (parseInt(a(c).css("borderLeftWidth"), 10) || 0) + (parseInt(a(c).css("paddingLeft"), 10) || 0) - this.margins.left, d.top + (parseInt(a(c).css("borderTopWidth"), 10) || 0) + (parseInt(a(c).css("paddingTop"), 10) || 0) - this.margins.top, d.left + (b ? Math.max(c.scrollWidth, c.offsetWidth) : c.offsetWidth) - (parseInt(a(c).css("borderLeftWidth"), 10) || 0) - (parseInt(a(c).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, d.top + (b ? Math.max(c.scrollHeight, c.offsetHeight) : c.offsetHeight) - (parseInt(a(c).css("borderTopWidth"), 10) || 0) - (parseInt(a(c).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
            } else {
                if (e.containment.constructor == Array) {
                    this.containment = e.containment
                }
            }
        }, _convertPositionTo: function (f, h) {
            if (!h) {
                h = this.position
            }
            var c = f == "absolute" ? 1 : -1;
            var e = this.options,
                b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                g = (/(html|body)/i).test(b[0].tagName);
            return {
                top: (h.top + this.offset.relative.top * c + this.offset.parent.top * c - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (g ? 0 : b.scrollTop())) * c)),
                left: (h.left + this.offset.relative.left * c + this.offset.parent.left * c - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : g ? 0 : b.scrollLeft()) * c))
            }
        }, _generatePosition: function (e) {
            var h = this.options,
                b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                i = (/(html|body)/i).test(b[0].tagName);
            if (this.cssPosition == "relative" && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
                this.offset.relative = this._getRelativeOffset()
            }
            var d = e.pageX;
            var c = e.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (e.pageX - this.offset.click.left < this.containment[0]) {
                        d = this.containment[0] + this.offset.click.left
                    }
                    if (e.pageY - this.offset.click.top < this.containment[1]) {
                        c = this.containment[1] + this.offset.click.top
                    }
                    if (e.pageX - this.offset.click.left > this.containment[2]) {
                        d = this.containment[2] + this.offset.click.left
                    }
                    if (e.pageY - this.offset.click.top > this.containment[3]) {
                        c = this.containment[3] + this.offset.click.top
                    }
                }
                if (h.grid) {
                    var g = this.originalPageY + Math.round((c - this.originalPageY) / h.grid[1]) * h.grid[1];
                    c = this.containment ? (!(g - this.offset.click.top < this.containment[1] || g - this.offset.click.top > this.containment[3]) ? g : (!(g - this.offset.click.top < this.containment[1]) ? g - h.grid[1] : g + h.grid[1])) : g;
                    var f = this.originalPageX + Math.round((d - this.originalPageX) / h.grid[0]) * h.grid[0];
                    d = this.containment ? (!(f - this.offset.click.left < this.containment[0] || f - this.offset.click.left > this.containment[2]) ? f : (!(f - this.offset.click.left < this.containment[0]) ? f - h.grid[0] : f + h.grid[0])) : f
                }
            }
            return {
                top: (c - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (i ? 0 : b.scrollTop())))),
                left: (d - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : i ? 0 : b.scrollLeft())))
            }
        }, _clear: function () {
            this.helper.removeClass("ui-draggable-dragging");
            if (this.helper[0] != this.element[0] && !this.cancelHelperRemoval) {
                this.helper.remove()
            }
            this.helper = null;
            this.cancelHelperRemoval = false
        }, _trigger: function (b, c, d) {
            d = d || this._uiHash();
            a.ui.plugin.call(this, b, [c, d]);
            if (b == "drag") {
                this.positionAbs = this._convertPositionTo("absolute")
            }
            return a.widget.prototype._trigger.call(this, b, c, d)
        }, plugins: {}, _uiHash: function (b) {
            return {
                helper: this.helper,
                position: this.position,
                absolutePosition: this.positionAbs,
                offset: this.positionAbs
            }
        }
    }));
    a.extend(a.ui.draggable, {
        version: "1.7",
        eventPrefix: "drag",
        defaults: {
            addClasses: true,
            appendTo: "parent",
            axis: false,
            cancel: ":input,option",
            connectToSortable: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            delay: 0,
            distance: 1,
            grid: false,
            handle: false,
            helper: "original",
            iframeFix: false,
            opacity: false,
            refreshPositions: false,
            revert: false,
            revertDuration: 500,
            scope: "default",
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: false,
            snapMode: "both",
            snapTolerance: 20,
            stack: false,
            zIndex: false
        }
    });
    a.ui.plugin.add("draggable", "connectToSortable", {
        start: function (c, e) {
            var d = a(this).data("draggable"), f = d.options, b = a.extend({}, e, {item: d.element});
            d.sortables = [];
            a(f.connectToSortable).each(function () {
                var g = a.data(this, "sortable");
                if (g && !g.options.disabled) {
                    d.sortables.push({instance: g, shouldRevert: g.options.revert});
                    g._refreshItems();
                    g._trigger("activate", c, b)
                }
            })
        }, stop: function (c, e) {
            var d = a(this).data("draggable"), b = a.extend({}, e, {item: d.element});
            a.each(d.sortables, function () {
                if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    d.cancelHelperRemoval = true;
                    this.instance.cancelHelperRemoval = false;
                    if (this.shouldRevert) {
                        this.instance.options.revert = true
                    }
                    this.instance._mouseStop(c);
                    this.instance.options.helper = this.instance.options._helper;
                    if (d.options.helper == "original") {
                        this.instance.currentItem.css({top: "auto", left: "auto"})
                    }
                } else {
                    this.instance.cancelHelperRemoval = false;
                    this.instance._trigger("deactivate", c, b)
                }
            })
        }, drag: function (c, f) {
            var e = a(this).data("draggable"), b = this;
            var d = function (i) {
                var n = this.offset.click.top, m = this.offset.click.left;
                var g = this.positionAbs.top, k = this.positionAbs.left;
                var j = i.height, l = i.width;
                var p = i.top, h = i.left;
                return a.ui.isOver(g + n, k + m, p, h, j, l)
            };
            a.each(e.sortables, function (g) {
                this.instance.positionAbs = e.positionAbs;
                this.instance.helperProportions = e.helperProportions;
                this.instance.offset.click = e.offset.click;
                if (this.instance._intersectsWith(this.instance.containerCache)) {
                    if (!this.instance.isOver) {
                        this.instance.isOver = 1;
                        this.instance.currentItem = a(b).clone().appendTo(this.instance.element).data("sortable-item", true);
                        this.instance.options._helper = this.instance.options.helper;
                        this.instance.options.helper = function () {
                            return f.helper[0]
                        };
                        c.target = this.instance.currentItem[0];
                        this.instance._mouseCapture(c, true);
                        this.instance._mouseStart(c, true, true);
                        this.instance.offset.click.top = e.offset.click.top;
                        this.instance.offset.click.left = e.offset.click.left;
                        this.instance.offset.parent.left -= e.offset.parent.left - this.instance.offset.parent.left;
                        this.instance.offset.parent.top -= e.offset.parent.top - this.instance.offset.parent.top;
                        e._trigger("toSortable", c);
                        e.dropped = this.instance.element;
                        e.currentItem = e.element;
                        this.instance.fromOutside = e
                    }
                    if (this.instance.currentItem) {
                        this.instance._mouseDrag(c)
                    }
                } else {
                    if (this.instance.isOver) {
                        this.instance.isOver = 0;
                        this.instance.cancelHelperRemoval = true;
                        this.instance.options.revert = false;
                        this.instance._trigger("out", c, this.instance._uiHash(this.instance));
                        this.instance._mouseStop(c, true);
                        this.instance.options.helper = this.instance.options._helper;
                        this.instance.currentItem.remove();
                        if (this.instance.placeholder) {
                            this.instance.placeholder.remove()
                        }
                        e._trigger("fromSortable", c);
                        e.dropped = false
                    }
                }
            })
        }
    });
    a.ui.plugin.add("draggable", "cursor", {
        start: function (c, d) {
            var b = a("body"), e = a(this).data("draggable").options;
            if (b.css("cursor")) {
                e._cursor = b.css("cursor")
            }
            b.css("cursor", e.cursor)
        }, stop: function (b, c) {
            var d = a(this).data("draggable").options;
            if (d._cursor) {
                a("body").css("cursor", d._cursor)
            }
        }
    });
    a.ui.plugin.add("draggable", "iframeFix", {
        start: function (b, c) {
            var d = a(this).data("draggable").options;
            a(d.iframeFix === true ? "iframe" : d.iframeFix).each(function () {
                a('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({
                    width: this.offsetWidth + "px",
                    height: this.offsetHeight + "px",
                    position: "absolute",
                    opacity: "0.001",
                    zIndex: 1000
                }).css(a(this).offset()).appendTo("body")
            })
        }, stop: function (b, c) {
            a("div.ui-draggable-iframeFix").each(function () {
                this.parentNode.removeChild(this)
            })
        }
    });
    a.ui.plugin.add("draggable", "opacity", {
        start: function (c, d) {
            var b = a(d.helper), e = a(this).data("draggable").options;
            if (b.css("opacity")) {
                e._opacity = b.css("opacity")
            }
            b.css("opacity", e.opacity)
        }, stop: function (b, c) {
            var d = a(this).data("draggable").options;
            if (d._opacity) {
                a(c.helper).css("opacity", d._opacity)
            }
        }
    });
    a.ui.plugin.add("draggable", "scroll", {
        start: function (c, d) {
            var b = a(this).data("draggable");
            if (b.scrollParent[0] != document && b.scrollParent[0].tagName != "HTML") {
                b.overflowOffset = b.scrollParent.offset()
            }
        }, drag: function (d, e) {
            var c = a(this).data("draggable"), f = c.options, b = false;
            if (c.scrollParent[0] != document && c.scrollParent[0].tagName != "HTML") {
                if (!f.axis || f.axis != "x") {
                    if ((c.overflowOffset.top + c.scrollParent[0].offsetHeight) - d.pageY < f.scrollSensitivity) {
                        c.scrollParent[0].scrollTop = b = c.scrollParent[0].scrollTop + f.scrollSpeed
                    } else {
                        if (d.pageY - c.overflowOffset.top < f.scrollSensitivity) {
                            c.scrollParent[0].scrollTop = b = c.scrollParent[0].scrollTop - f.scrollSpeed
                        }
                    }
                }
                if (!f.axis || f.axis != "y") {
                    if ((c.overflowOffset.left + c.scrollParent[0].offsetWidth) - d.pageX < f.scrollSensitivity) {
                        c.scrollParent[0].scrollLeft = b = c.scrollParent[0].scrollLeft + f.scrollSpeed
                    } else {
                        if (d.pageX - c.overflowOffset.left < f.scrollSensitivity) {
                            c.scrollParent[0].scrollLeft = b = c.scrollParent[0].scrollLeft - f.scrollSpeed
                        }
                    }
                }
            } else {
                if (!f.axis || f.axis != "x") {
                    if (d.pageY - a(document).scrollTop() < f.scrollSensitivity) {
                        b = a(document).scrollTop(a(document).scrollTop() - f.scrollSpeed)
                    } else {
                        if (a(window).height() - (d.pageY - a(document).scrollTop()) < f.scrollSensitivity) {
                            b = a(document).scrollTop(a(document).scrollTop() + f.scrollSpeed)
                        }
                    }
                }
                if (!f.axis || f.axis != "y") {
                    if (d.pageX - a(document).scrollLeft() < f.scrollSensitivity) {
                        b = a(document).scrollLeft(a(document).scrollLeft() - f.scrollSpeed)
                    } else {
                        if (a(window).width() - (d.pageX - a(document).scrollLeft()) < f.scrollSensitivity) {
                            b = a(document).scrollLeft(a(document).scrollLeft() + f.scrollSpeed)
                        }
                    }
                }
            }
            if (b !== false && a.ui.ddmanager && !f.dropBehaviour) {
                a.ui.ddmanager.prepareOffsets(c, d)
            }
        }
    });
    a.ui.plugin.add("draggable", "snap", {
        start: function (c, d) {
            var b = a(this).data("draggable"), e = b.options;
            b.snapElements = [];
            a(e.snap.constructor != String ? (e.snap.items || ":data(draggable)") : e.snap).each(function () {
                var g = a(this);
                var f = g.offset();
                if (this != b.element[0]) {
                    b.snapElements.push({
                        item: this,
                        width: g.outerWidth(),
                        height: g.outerHeight(),
                        top: f.top,
                        left: f.left
                    })
                }
            })
        }, drag: function (u, p) {
            var g = a(this).data("draggable"), q = g.options;
            var y = q.snapTolerance;
            var x = p.offset.left, w = x + g.helperProportions.width, f = p.offset.top,
                e = f + g.helperProportions.height;
            for (var v = g.snapElements.length - 1; v >= 0; v--) {
                var s = g.snapElements[v].left, n = s + g.snapElements[v].width, m = g.snapElements[v].top,
                    A = m + g.snapElements[v].height;
                if (!((s - y < x && x < n + y && m - y < f && f < A + y) || (s - y < x && x < n + y && m - y < e && e < A + y) || (s - y < w && w < n + y && m - y < f && f < A + y) || (s - y < w && w < n + y && m - y < e && e < A + y))) {
                    if (g.snapElements[v].snapping) {
                        (g.options.snap.release && g.options.snap.release.call(g.element, u, a.extend(g._uiHash(), {snapItem: g.snapElements[v].item})))
                    }
                    g.snapElements[v].snapping = false;
                    continue
                }
                if (q.snapMode != "inner") {
                    var c = Math.abs(m - e) <= y;
                    var z = Math.abs(A - f) <= y;
                    var j = Math.abs(s - w) <= y;
                    var k = Math.abs(n - x) <= y;
                    if (c) {
                        p.position.top = g._convertPositionTo("relative", {
                            top: m - g.helperProportions.height,
                            left: 0
                        }).top - g.margins.top
                    }
                    if (z) {
                        p.position.top = g._convertPositionTo("relative", {top: A, left: 0}).top - g.margins.top
                    }
                    if (j) {
                        p.position.left = g._convertPositionTo("relative", {
                            top: 0,
                            left: s - g.helperProportions.width
                        }).left - g.margins.left
                    }
                    if (k) {
                        p.position.left = g._convertPositionTo("relative", {top: 0, left: n}).left - g.margins.left
                    }
                }
                var h = (c || z || j || k);
                if (q.snapMode != "outer") {
                    var c = Math.abs(m - f) <= y;
                    var z = Math.abs(A - e) <= y;
                    var j = Math.abs(s - x) <= y;
                    var k = Math.abs(n - w) <= y;
                    if (c) {
                        p.position.top = g._convertPositionTo("relative", {top: m, left: 0}).top - g.margins.top
                    }
                    if (z) {
                        p.position.top = g._convertPositionTo("relative", {
                            top: A - g.helperProportions.height,
                            left: 0
                        }).top - g.margins.top
                    }
                    if (j) {
                        p.position.left = g._convertPositionTo("relative", {top: 0, left: s}).left - g.margins.left
                    }
                    if (k) {
                        p.position.left = g._convertPositionTo("relative", {
                            top: 0,
                            left: n - g.helperProportions.width
                        }).left - g.margins.left
                    }
                }
                if (!g.snapElements[v].snapping && (c || z || j || k || h)) {
                    (g.options.snap.snap && g.options.snap.snap.call(g.element, u, a.extend(g._uiHash(), {snapItem: g.snapElements[v].item})))
                }
                g.snapElements[v].snapping = (c || z || j || k || h)
            }
        }
    });
    a.ui.plugin.add("draggable", "stack", {
        start: function (b, c) {
            var e = a(this).data("draggable").options;
            var d = a.makeArray(a(e.stack.group)).sort(function (g, f) {
                return (parseInt(a(g).css("zIndex"), 10) || e.stack.min) - (parseInt(a(f).css("zIndex"), 10) || e.stack.min)
            });
            a(d).each(function (f) {
                this.style.zIndex = e.stack.min + f
            });
            this[0].style.zIndex = e.stack.min + d.length
        }
    });
    a.ui.plugin.add("draggable", "zIndex", {
        start: function (c, d) {
            var b = a(d.helper), e = a(this).data("draggable").options;
            if (b.css("zIndex")) {
                e._zIndex = b.css("zIndex")
            }
            b.css("zIndex", e.zIndex)
        }, stop: function (b, c) {
            var d = a(this).data("draggable").options;
            if (d._zIndex) {
                a(c.helper).css("zIndex", d._zIndex)
            }
        }
    })
})(jQuery);
(function (a) {
    a.widget("ui.droppable", {
        _init: function () {
            var c = this.options, b = c.accept;
            this.isover = 0;
            this.isout = 1;
            this.options.accept = this.options.accept && a.isFunction(this.options.accept) ? this.options.accept : function (e) {
                return e.is(b)
            };
            this.proportions = {width: this.element[0].offsetWidth, height: this.element[0].offsetHeight};
            a.ui.ddmanager.droppables[this.options.scope] = a.ui.ddmanager.droppables[this.options.scope] || [];
            a.ui.ddmanager.droppables[this.options.scope].push(this);
            (this.options.addClasses && this.element.addClass("ui-droppable"))
        }, destroy: function () {
            var b = a.ui.ddmanager.droppables[this.options.scope];
            for (var c = 0; c < b.length; c++) {
                if (b[c] == this) {
                    b.splice(c, 1)
                }
            }
            this.element.removeClass("ui-droppable ui-droppable-disabled").removeData("droppable").unbind(".droppable")
        }, _setData: function (b, c) {
            if (b == "accept") {
                this.options.accept = c && a.isFunction(c) ? c : function (e) {
                    return e.is(accept)
                }
            } else {
                a.widget.prototype._setData.apply(this, arguments)
            }
        }, _activate: function (c) {
            var b = a.ui.ddmanager.current;
            if (this.options.activeClass) {
                this.element.addClass(this.options.activeClass)
            }
            (b && this._trigger("activate", c, this.ui(b)))
        }, _deactivate: function (c) {
            var b = a.ui.ddmanager.current;
            if (this.options.activeClass) {
                this.element.removeClass(this.options.activeClass)
            }
            (b && this._trigger("deactivate", c, this.ui(b)))
        }, _over: function (c) {
            var b = a.ui.ddmanager.current;
            if (!b || (b.currentItem || b.element)[0] == this.element[0]) {
                return
            }
            if (this.options.accept.call(this.element[0], (b.currentItem || b.element))) {
                if (this.options.hoverClass) {
                    this.element.addClass(this.options.hoverClass)
                }
                this._trigger("over", c, this.ui(b))
            }
        }, _out: function (c) {
            var b = a.ui.ddmanager.current;
            if (!b || (b.currentItem || b.element)[0] == this.element[0]) {
                return
            }
            if (this.options.accept.call(this.element[0], (b.currentItem || b.element))) {
                if (this.options.hoverClass) {
                    this.element.removeClass(this.options.hoverClass)
                }
                this._trigger("out", c, this.ui(b))
            }
        }, _drop: function (c, d) {
            var b = d || a.ui.ddmanager.current;
            if (!b || (b.currentItem || b.element)[0] == this.element[0]) {
                return false
            }
            var e = false;
            this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function () {
                var f = a.data(this, "droppable");
                if (f.options.greedy && a.ui.intersect(b, a.extend(f, {offset: f.element.offset()}), f.options.tolerance)) {
                    e = true;
                    return false
                }
            });
            if (e) {
                return false
            }
            if (this.options.accept.call(this.element[0], (b.currentItem || b.element))) {
                if (this.options.activeClass) {
                    this.element.removeClass(this.options.activeClass)
                }
                if (this.options.hoverClass) {
                    this.element.removeClass(this.options.hoverClass)
                }
                this._trigger("drop", c, this.ui(b));
                return this.element
            }
            return false
        }, ui: function (b) {
            return {
                draggable: (b.currentItem || b.element),
                helper: b.helper,
                position: b.position,
                absolutePosition: b.positionAbs,
                offset: b.positionAbs
            }
        }
    });
    a.extend(a.ui.droppable, {
        version: "1.7",
        eventPrefix: "drop",
        defaults: {
            accept: "*",
            activeClass: false,
            addClasses: true,
            greedy: false,
            hoverClass: false,
            scope: "default",
            tolerance: "intersect"
        }
    });
    a.ui.intersect = function (q, j, o) {
        if (!j.offset) {
            return false
        }
        var e = (q.positionAbs || q.position.absolute).left, d = e + q.helperProportions.width,
            n = (q.positionAbs || q.position.absolute).top, m = n + q.helperProportions.height;
        var g = j.offset.left, c = g + j.proportions.width, p = j.offset.top, k = p + j.proportions.height;
        switch (o) {
            case"fit":
                return (g < e && d < c && p < n && m < k);
                break;
            case"intersect":
                return (g < e + (q.helperProportions.width / 2) && d - (q.helperProportions.width / 2) < c && p < n + (q.helperProportions.height / 2) && m - (q.helperProportions.height / 2) < k);
                break;
            case"pointer":
                var h = ((q.positionAbs || q.position.absolute).left + (q.clickOffset || q.offset.click).left),
                    i = ((q.positionAbs || q.position.absolute).top + (q.clickOffset || q.offset.click).top),
                    f = a.ui.isOver(i, h, p, g, j.proportions.height, j.proportions.width);
                return f;
                break;
            case"touch":
                return ((n >= p && n <= k) || (m >= p && m <= k) || (n < p && m > k)) && ((e >= g && e <= c) || (d >= g && d <= c) || (e < g && d > c));
                break;
            default:
                return false;
                break
        }
    };
    a.ui.ddmanager = {
        current: null, droppables: {"default": []}, prepareOffsets: function (e, g) {
            var b = a.ui.ddmanager.droppables[e.options.scope];
            var f = g ? g.type : null;
            var h = (e.currentItem || e.element).find(":data(droppable)").andSelf();
            droppablesLoop:for (var d = 0; d < b.length; d++) {
                if (b[d].options.disabled || (e && !b[d].options.accept.call(b[d].element[0], (e.currentItem || e.element)))) {
                    continue
                }
                for (var c = 0; c < h.length; c++) {
                    if (h[c] == b[d].element[0]) {
                        b[d].proportions.height = 0;
                        continue droppablesLoop
                    }
                }
                b[d].visible = b[d].element.css("display") != "none";
                if (!b[d].visible) {
                    continue
                }
                b[d].offset = b[d].element.offset();
                b[d].proportions = {width: b[d].element[0].offsetWidth, height: b[d].element[0].offsetHeight};
                if (f == "mousedown") {
                    b[d]._activate.call(b[d], g)
                }
            }
        }, drop: function (b, c) {
            var d = false;
            a.each(a.ui.ddmanager.droppables[b.options.scope], function () {
                if (!this.options) {
                    return
                }
                if (!this.options.disabled && this.visible && a.ui.intersect(b, this, this.options.tolerance)) {
                    d = this._drop.call(this, c)
                }
                if (!this.options.disabled && this.visible && this.options.accept.call(this.element[0], (b.currentItem || b.element))) {
                    this.isout = 1;
                    this.isover = 0;
                    this._deactivate.call(this, c)
                }
            });
            return d
        }, drag: function (b, c) {
            if (b.options.refreshPositions) {
                a.ui.ddmanager.prepareOffsets(b, c)
            }
            a.each(a.ui.ddmanager.droppables[b.options.scope], function () {
                if (this.options.disabled || this.greedyChild || !this.visible) {
                    return
                }
                var e = a.ui.intersect(b, this, this.options.tolerance);
                var g = !e && this.isover == 1 ? "isout" : (e && this.isover == 0 ? "isover" : null);
                if (!g) {
                    return
                }
                var f;
                if (this.options.greedy) {
                    var d = this.element.parents(":data(droppable):eq(0)");
                    if (d.length) {
                        f = a.data(d[0], "droppable");
                        f.greedyChild = (g == "isover" ? 1 : 0)
                    }
                }
                if (f && g == "isover") {
                    f.isover = 0;
                    f.isout = 1;
                    f._out.call(f, c)
                }
                this[g] = 1;
                this[g == "isout" ? "isover" : "isout"] = 0;
                this[g == "isover" ? "_over" : "_out"].call(this, c);
                if (f && g == "isout") {
                    f.isout = 0;
                    f.isover = 1;
                    f._over.call(f, c)
                }
            })
        }
    }
})(jQuery);
(function (c) {
    c.widget("ui.resizable", c.extend({}, c.ui.mouse, {
        _init: function () {
            var e = this, j = this.options;
            this.element.addClass("ui-resizable");
            c.extend(this, {
                _aspectRatio: !!(j.aspectRatio),
                aspectRatio: j.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: j.helper || j.ghost || j.animate ? j.helper || "ui-resizable-helper" : null
            });
            if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
                if (/relative/.test(this.element.css("position")) && c.browser.opera) {
                    this.element.css({position: "relative", top: "auto", left: "auto"})
                }
                this.element.wrap(c('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({
                    position: this.element.css("position"),
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight(),
                    top: this.element.css("top"),
                    left: this.element.css("left")
                }));
                this.element = this.element.parent().data("resizable", this.element.data("resizable"));
                this.elementIsWrapper = true;
                this.element.css({
                    marginLeft: this.originalElement.css("marginLeft"),
                    marginTop: this.originalElement.css("marginTop"),
                    marginRight: this.originalElement.css("marginRight"),
                    marginBottom: this.originalElement.css("marginBottom")
                });
                this.originalElement.css({marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});
                this.originalResizeStyle = this.originalElement.css("resize");
                this.originalElement.css("resize", "none");
                this._proportionallyResizeElements.push(this.originalElement.css({
                    position: "static",
                    zoom: 1,
                    display: "block"
                }));
                this.originalElement.css({margin: this.originalElement.css("margin")});
                this._proportionallyResize()
            }
            this.handles = j.handles || (!c(".ui-resizable-handle", this.element).length ? "e,s,se" : {
                n: ".ui-resizable-n",
                e: ".ui-resizable-e",
                s: ".ui-resizable-s",
                w: ".ui-resizable-w",
                se: ".ui-resizable-se",
                sw: ".ui-resizable-sw",
                ne: ".ui-resizable-ne",
                nw: ".ui-resizable-nw"
            });
            if (this.handles.constructor == String) {
                if (this.handles == "all") {
                    this.handles = "n,e,s,w,se,sw,ne,nw"
                }
                var k = this.handles.split(",");
                this.handles = {};
                for (var f = 0; f < k.length; f++) {
                    var h = c.trim(k[f]), d = "ui-resizable-" + h;
                    var g = c('<div class="ui-resizable-handle ' + d + '"></div>');
                    if (/sw|se|ne|nw/.test(h)) {
                        g.css({zIndex: ++j.zIndex})
                    }
                    if ("se" == h) {
                        g.addClass("ui-icon ui-icon-gripsmall-diagonal-se")
                    }
                    this.handles[h] = ".ui-resizable-" + h;
                    this.element.append(g)
                }
            }
            this._renderAxis = function (p) {
                p = p || this.element;
                for (var m in this.handles) {
                    if (this.handles[m].constructor == String) {
                        this.handles[m] = c(this.handles[m], this.element).show()
                    }
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                        var n = c(this.handles[m], this.element), o = 0;
                        o = /sw|ne|nw|se|n|s/.test(m) ? n.outerHeight() : n.outerWidth();
                        var l = ["padding", /ne|nw|n/.test(m) ? "Top" : /se|sw|s/.test(m) ? "Bottom" : /^e$/.test(m) ? "Right" : "Left"].join("");
                        p.css(l, o);
                        this._proportionallyResize()
                    }
                    if (!c(this.handles[m]).length) {
                        continue
                    }
                }
            };
            this._renderAxis(this.element);
            this._handles = c(".ui-resizable-handle", this.element).disableSelection();
            this._handles.mouseover(function () {
                if (!e.resizing) {
                    if (this.className) {
                        var i = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)
                    }
                    e.axis = i && i[1] ? i[1] : "se"
                }
            });
            if (j.autoHide) {
                this._handles.hide();
                c(this.element).addClass("ui-resizable-autohide").hover(function () {
                    c(this).removeClass("ui-resizable-autohide");
                    e._handles.show()
                }, function () {
                    if (!e.resizing) {
                        c(this).addClass("ui-resizable-autohide");
                        e._handles.hide()
                    }
                })
            }
            this._mouseInit()
        }, destroy: function () {
            this._mouseDestroy();
            var d = function (f) {
                c(f).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").unbind(".resizable").find(".ui-resizable-handle").remove()
            };
            if (this.elementIsWrapper) {
                d(this.element);
                var e = this.element;
                e.parent().append(this.originalElement.css({
                    position: e.css("position"),
                    width: e.outerWidth(),
                    height: e.outerHeight(),
                    top: e.css("top"),
                    left: e.css("left")
                })).end().remove()
            }
            this.originalElement.css("resize", this.originalResizeStyle);
            d(this.originalElement)
        }, _mouseCapture: function (e) {
            var f = false;
            for (var d in this.handles) {
                if (c(this.handles[d])[0] == e.target) {
                    f = true
                }
            }
            return this.options.disabled || !!f
        }, _mouseStart: function (f) {
            var i = this.options, e = this.element.position(), d = this.element;
            this.resizing = true;
            this.documentScroll = {top: c(document).scrollTop(), left: c(document).scrollLeft()};
            if (d.is(".ui-draggable") || (/absolute/).test(d.css("position"))) {
                d.css({position: "absolute", top: e.top, left: e.left})
            }
            if (c.browser.opera && (/relative/).test(d.css("position"))) {
                d.css({position: "relative", top: "auto", left: "auto"})
            }
            this._renderProxy();
            var j = b(this.helper.css("left")), g = b(this.helper.css("top"));
            if (i.containment) {
                j += c(i.containment).scrollLeft() || 0;
                g += c(i.containment).scrollTop() || 0
            }
            this.offset = this.helper.offset();
            this.position = {left: j, top: g};
            this.size = this._helper ? {width: d.outerWidth(), height: d.outerHeight()} : {
                width: d.width(),
                height: d.height()
            };
            this.originalSize = this._helper ? {width: d.outerWidth(), height: d.outerHeight()} : {
                width: d.width(),
                height: d.height()
            };
            this.originalPosition = {left: j, top: g};
            this.sizeDiff = {width: d.outerWidth() - d.width(), height: d.outerHeight() - d.height()};
            this.originalMousePosition = {left: f.pageX, top: f.pageY};
            this.aspectRatio = (typeof i.aspectRatio == "number") ? i.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);
            var h = c(".ui-resizable-" + this.axis).css("cursor");
            c("body").css("cursor", h == "auto" ? this.axis + "-resize" : h);
            d.addClass("ui-resizable-resizing");
            this._propagate("start", f);
            return true
        }, _mouseDrag: function (d) {
            var g = this.helper, f = this.options, l = {}, p = this, i = this.originalMousePosition, m = this.axis;
            var q = (d.pageX - i.left) || 0, n = (d.pageY - i.top) || 0;
            var h = this._change[m];
            if (!h) {
                return false
            }
            var k = h.apply(this, [d, q, n]), j = c.browser.msie && c.browser.version < 7, e = this.sizeDiff;
            if (this._aspectRatio || d.shiftKey) {
                k = this._updateRatio(k, d)
            }
            k = this._respectSize(k, d);
            this._propagate("resize", d);
            g.css({
                top: this.position.top + "px",
                left: this.position.left + "px",
                width: this.size.width + "px",
                height: this.size.height + "px"
            });
            if (!this._helper && this._proportionallyResizeElements.length) {
                this._proportionallyResize()
            }
            this._updateCache(k);
            this._trigger("resize", d, this.ui());
            return false
        }, _mouseStop: function (g) {
            this.resizing = false;
            var h = this.options, l = this;
            if (this._helper) {
                var f = this._proportionallyResizeElements, d = f.length && (/textarea/i).test(f[0].nodeName),
                    e = d && c.ui.hasScroll(f[0], "left") ? 0 : l.sizeDiff.height, j = d ? 0 : l.sizeDiff.width;
                var m = {width: (l.size.width - j), height: (l.size.height - e)},
                    i = (parseInt(l.element.css("left"), 10) + (l.position.left - l.originalPosition.left)) || null,
                    k = (parseInt(l.element.css("top"), 10) + (l.position.top - l.originalPosition.top)) || null;
                if (!h.animate) {
                    this.element.css(c.extend(m, {top: k, left: i}))
                }
                l.helper.height(l.size.height);
                l.helper.width(l.size.width);
                if (this._helper && !h.animate) {
                    this._proportionallyResize()
                }
            }
            c("body").css("cursor", "auto");
            this.element.removeClass("ui-resizable-resizing");
            this._propagate("stop", g);
            if (this._helper) {
                this.helper.remove()
            }
            return false
        }, _updateCache: function (d) {
            var e = this.options;
            this.offset = this.helper.offset();
            if (a(d.left)) {
                this.position.left = d.left
            }
            if (a(d.top)) {
                this.position.top = d.top
            }
            if (a(d.height)) {
                this.size.height = d.height
            }
            if (a(d.width)) {
                this.size.width = d.width
            }
        }, _updateRatio: function (g, f) {
            var h = this.options, i = this.position, e = this.size, d = this.axis;
            if (g.height) {
                g.width = (e.height * this.aspectRatio)
            } else {
                if (g.width) {
                    g.height = (e.width / this.aspectRatio)
                }
            }
            if (d == "sw") {
                g.left = i.left + (e.width - g.width);
                g.top = null
            }
            if (d == "nw") {
                g.top = i.top + (e.height - g.height);
                g.left = i.left + (e.width - g.width)
            }
            return g
        }, _respectSize: function (k, f) {
            var i = this.helper, h = this.options, q = this._aspectRatio || f.shiftKey, p = this.axis,
                s = a(k.width) && h.maxWidth && (h.maxWidth < k.width),
                l = a(k.height) && h.maxHeight && (h.maxHeight < k.height),
                g = a(k.width) && h.minWidth && (h.minWidth > k.width),
                r = a(k.height) && h.minHeight && (h.minHeight > k.height);
            if (g) {
                k.width = h.minWidth
            }
            if (r) {
                k.height = h.minHeight
            }
            if (s) {
                k.width = h.maxWidth
            }
            if (l) {
                k.height = h.maxHeight
            }
            var e = this.originalPosition.left + this.originalSize.width, n = this.position.top + this.size.height;
            var j = /sw|nw|w/.test(p), d = /nw|ne|n/.test(p);
            if (g && j) {
                k.left = e - h.minWidth
            }
            if (s && j) {
                k.left = e - h.maxWidth
            }
            if (r && d) {
                k.top = n - h.minHeight
            }
            if (l && d) {
                k.top = n - h.maxHeight
            }
            var m = !k.width && !k.height;
            if (m && !k.left && k.top) {
                k.top = null
            } else {
                if (m && !k.top && k.left) {
                    k.left = null
                }
            }
            return k
        }, _proportionallyResize: function () {
            var j = this.options;
            if (!this._proportionallyResizeElements.length) {
                return
            }
            var f = this.helper || this.element;
            for (var e = 0; e < this._proportionallyResizeElements.length; e++) {
                var g = this._proportionallyResizeElements[e];
                if (!this.borderDif) {
                    var d = [g.css("borderTopWidth"), g.css("borderRightWidth"), g.css("borderBottomWidth"), g.css("borderLeftWidth")],
                        h = [g.css("paddingTop"), g.css("paddingRight"), g.css("paddingBottom"), g.css("paddingLeft")];
                    this.borderDif = c.map(d, function (k, m) {
                        var l = parseInt(k, 10) || 0, n = parseInt(h[m], 10) || 0;
                        return l + n
                    })
                }
                if (c.browser.msie && !(!(c(f).is(":hidden") || c(f).parents(":hidden").length))) {
                    continue
                }
                g.css({
                    height: (f.height() - this.borderDif[0] - this.borderDif[2]) || 0,
                    width: (f.width() - this.borderDif[1] - this.borderDif[3]) || 0
                })
            }
        }, _renderProxy: function () {
            var e = this.element, h = this.options;
            this.elementOffset = e.offset();
            if (this._helper) {
                this.helper = this.helper || c('<div style="overflow:hidden;"></div>');
                var d = c.browser.msie && c.browser.version < 7, f = (d ? 1 : 0), g = (d ? 2 : -1);
                this.helper.addClass(this._helper).css({
                    width: this.element.outerWidth() + g,
                    height: this.element.outerHeight() + g,
                    position: "absolute",
                    left: this.elementOffset.left - f + "px",
                    top: this.elementOffset.top - f + "px",
                    zIndex: ++h.zIndex
                });
                this.helper.appendTo("body").disableSelection()
            } else {
                this.helper = this.element
            }
        }, _change: {
            e: function (f, e, d) {
                return {width: this.originalSize.width + e}
            }, w: function (g, e, d) {
                var i = this.options, f = this.originalSize, h = this.originalPosition;
                return {left: h.left + e, width: f.width - e}
            }, n: function (g, e, d) {
                var i = this.options, f = this.originalSize, h = this.originalPosition;
                return {top: h.top + d, height: f.height - d}
            }, s: function (f, e, d) {
                return {height: this.originalSize.height + d}
            }, se: function (f, e, d) {
                return c.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [f, e, d]))
            }, sw: function (f, e, d) {
                return c.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [f, e, d]))
            }, ne: function (f, e, d) {
                return c.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [f, e, d]))
            }, nw: function (f, e, d) {
                return c.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [f, e, d]))
            }
        }, _propagate: function (e, d) {
            c.ui.plugin.call(this, e, [d, this.ui()]);
            (e != "resize" && this._trigger(e, d, this.ui()))
        }, plugins: {}, ui: function () {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            }
        }
    }));
    c.extend(c.ui.resizable, {
        version: "1.7",
        eventPrefix: "resize",
        defaults: {
            alsoResize: false,
            animate: false,
            animateDuration: "slow",
            animateEasing: "swing",
            aspectRatio: false,
            autoHide: false,
            cancel: ":input,option",
            containment: false,
            delay: 0,
            distance: 1,
            ghost: false,
            grid: false,
            handles: "e,s,se",
            helper: false,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            zIndex: 1000
        }
    });
    c.ui.plugin.add("resizable", "alsoResize", {
        start: function (e, f) {
            var d = c(this).data("resizable"), g = d.options;
            _store = function (h) {
                c(h).each(function () {
                    c(this).data("resizable-alsoresize", {
                        width: parseInt(c(this).width(), 10),
                        height: parseInt(c(this).height(), 10),
                        left: parseInt(c(this).css("left"), 10),
                        top: parseInt(c(this).css("top"), 10)
                    })
                })
            };
            if (typeof (g.alsoResize) == "object" && !g.alsoResize.parentNode) {
                if (g.alsoResize.length) {
                    g.alsoResize = g.alsoResize[0];
                    _store(g.alsoResize)
                } else {
                    c.each(g.alsoResize, function (h, i) {
                        _store(h)
                    })
                }
            } else {
                _store(g.alsoResize)
            }
        }, resize: function (f, h) {
            var e = c(this).data("resizable"), i = e.options, g = e.originalSize, k = e.originalPosition;
            var j = {
                height: (e.size.height - g.height) || 0,
                width: (e.size.width - g.width) || 0,
                top: (e.position.top - k.top) || 0,
                left: (e.position.left - k.left) || 0
            }, d = function (l, m) {
                c(l).each(function () {
                    var p = c(this), q = c(this).data("resizable-alsoresize"), o = {},
                        n = m && m.length ? m : ["width", "height", "top", "left"];
                    c.each(n || ["width", "height", "top", "left"], function (r, u) {
                        var s = (q[u] || 0) + (j[u] || 0);
                        if (s && s >= 0) {
                            o[u] = s || null
                        }
                    });
                    if (/relative/.test(p.css("position")) && c.browser.opera) {
                        e._revertToRelativePosition = true;
                        p.css({position: "absolute", top: "auto", left: "auto"})
                    }
                    p.css(o)
                })
            };
            if (typeof (i.alsoResize) == "object" && !i.alsoResize.nodeType) {
                c.each(i.alsoResize, function (l, m) {
                    d(l, m)
                })
            } else {
                d(i.alsoResize)
            }
        }, stop: function (e, f) {
            var d = c(this).data("resizable");
            if (d._revertToRelativePosition && c.browser.opera) {
                d._revertToRelativePosition = false;
                el.css({position: "relative"})
            }
            c(this).removeData("resizable-alsoresize-start")
        }
    });
    c.ui.plugin.add("resizable", "animate", {
        stop: function (h, m) {
            var n = c(this).data("resizable"), i = n.options;
            var g = n._proportionallyResizeElements, d = g.length && (/textarea/i).test(g[0].nodeName),
                e = d && c.ui.hasScroll(g[0], "left") ? 0 : n.sizeDiff.height, k = d ? 0 : n.sizeDiff.width;
            var f = {width: (n.size.width - k), height: (n.size.height - e)},
                j = (parseInt(n.element.css("left"), 10) + (n.position.left - n.originalPosition.left)) || null,
                l = (parseInt(n.element.css("top"), 10) + (n.position.top - n.originalPosition.top)) || null;
            n.element.animate(c.extend(f, l && j ? {top: l, left: j} : {}), {
                duration: i.animateDuration,
                easing: i.animateEasing,
                step: function () {
                    var o = {
                        width: parseInt(n.element.css("width"), 10),
                        height: parseInt(n.element.css("height"), 10),
                        top: parseInt(n.element.css("top"), 10),
                        left: parseInt(n.element.css("left"), 10)
                    };
                    if (g && g.length) {
                        c(g[0]).css({width: o.width, height: o.height})
                    }
                    n._updateCache(o);
                    n._propagate("resize", h)
                }
            })
        }
    });
    c.ui.plugin.add("resizable", "containment", {
        start: function (e, q) {
            var s = c(this).data("resizable"), i = s.options, k = s.element;
            var f = i.containment, j = (f instanceof c) ? f.get(0) : (/parent/.test(f)) ? k.parent().get(0) : f;
            if (!j) {
                return
            }
            s.containerElement = c(j);
            if (/document/.test(f) || f == document) {
                s.containerOffset = {left: 0, top: 0};
                s.containerPosition = {left: 0, top: 0};
                s.parentData = {
                    element: c(document),
                    left: 0,
                    top: 0,
                    width: c(document).width(),
                    height: c(document).height() || document.body.parentNode.scrollHeight
                }
            } else {
                var m = c(j), h = [];
                c(["Top", "Right", "Left", "Bottom"]).each(function (p, o) {
                    h[p] = b(m.css("padding" + o))
                });
                s.containerOffset = m.offset();
                s.containerPosition = m.position();
                s.containerSize = {height: (m.innerHeight() - h[3]), width: (m.innerWidth() - h[1])};
                var n = s.containerOffset, d = s.containerSize.height, l = s.containerSize.width,
                    g = (c.ui.hasScroll(j, "left") ? j.scrollWidth : l), r = (c.ui.hasScroll(j) ? j.scrollHeight : d);
                s.parentData = {element: j, left: n.left, top: n.top, width: g, height: r}
            }
        }, resize: function (f, p) {
            var s = c(this).data("resizable"), h = s.options, e = s.containerSize, n = s.containerOffset, l = s.size,
                m = s.position, q = h._aspectRatio || f.shiftKey, d = {top: 0, left: 0}, g = s.containerElement;
            if (g[0] != document && (/static/).test(g.css("position"))) {
                d = n
            }
            if (m.left < (s._helper ? n.left : 0)) {
                s.size.width = s.size.width + (s._helper ? (s.position.left - n.left) : (s.position.left - d.left));
                if (q) {
                    s.size.height = s.size.width / h.aspectRatio
                }
                s.position.left = h.helper ? n.left : 0
            }
            if (m.top < (s._helper ? n.top : 0)) {
                s.size.height = s.size.height + (s._helper ? (s.position.top - n.top) : s.position.top);
                if (q) {
                    s.size.width = s.size.height * h.aspectRatio
                }
                s.position.top = s._helper ? n.top : 0
            }
            s.offset.left = s.parentData.left + s.position.left;
            s.offset.top = s.parentData.top + s.position.top;
            var k = Math.abs((s._helper ? s.offset.left - d.left : (s.offset.left - d.left)) + s.sizeDiff.width),
                r = Math.abs((s._helper ? s.offset.top - d.top : (s.offset.top - n.top)) + s.sizeDiff.height);
            var j = s.containerElement.get(0) == s.element.parent().get(0),
                i = /relative|absolute/.test(s.containerElement.css("position"));
            if (j && i) {
                k -= s.parentData.left
            }
            if (k + s.size.width >= s.parentData.width) {
                s.size.width = s.parentData.width - k;
                if (q) {
                    s.size.height = s.size.width / h.aspectRatio
                }
            }
            if (r + s.size.height >= s.parentData.height) {
                s.size.height = s.parentData.height - r;
                if (q) {
                    s.size.width = s.size.height * h.aspectRatio
                }
            }
        }, stop: function (e, m) {
            var p = c(this).data("resizable"), f = p.options, k = p.position, l = p.containerOffset,
                d = p.containerPosition, g = p.containerElement;
            var i = c(p.helper), q = i.offset(), n = i.outerWidth() - p.sizeDiff.width,
                j = i.outerHeight() - p.sizeDiff.height;
            if (p._helper && !f.animate && (/relative/).test(g.css("position"))) {
                c(this).css({left: q.left - d.left - l.left, width: n, height: j})
            }
            if (p._helper && !f.animate && (/static/).test(g.css("position"))) {
                c(this).css({left: q.left - d.left - l.left, width: n, height: j})
            }
        }
    });
    c.ui.plugin.add("resizable", "ghost", {
        start: function (f, g) {
            var d = c(this).data("resizable"), h = d.options, e = d.size;
            d.ghost = d.originalElement.clone();
            d.ghost.css({
                opacity: 0.25,
                display: "block",
                position: "relative",
                height: e.height,
                width: e.width,
                margin: 0,
                left: 0,
                top: 0
            }).addClass("ui-resizable-ghost").addClass(typeof h.ghost == "string" ? h.ghost : "");
            d.ghost.appendTo(d.helper)
        }, resize: function (e, f) {
            var d = c(this).data("resizable"), g = d.options;
            if (d.ghost) {
                d.ghost.css({position: "relative", height: d.size.height, width: d.size.width})
            }
        }, stop: function (e, f) {
            var d = c(this).data("resizable"), g = d.options;
            if (d.ghost && d.helper) {
                d.helper.get(0).removeChild(d.ghost.get(0))
            }
        }
    });
    c.ui.plugin.add("resizable", "grid", {
        resize: function (d, l) {
            var n = c(this).data("resizable"), g = n.options, j = n.size, h = n.originalSize, i = n.originalPosition,
                m = n.axis, k = g._aspectRatio || d.shiftKey;
            g.grid = typeof g.grid == "number" ? [g.grid, g.grid] : g.grid;
            var f = Math.round((j.width - h.width) / (g.grid[0] || 1)) * (g.grid[0] || 1),
                e = Math.round((j.height - h.height) / (g.grid[1] || 1)) * (g.grid[1] || 1);
            if (/^(se|s|e)$/.test(m)) {
                n.size.width = h.width + f;
                n.size.height = h.height + e
            } else {
                if (/^(ne)$/.test(m)) {
                    n.size.width = h.width + f;
                    n.size.height = h.height + e;
                    n.position.top = i.top - e
                } else {
                    if (/^(sw)$/.test(m)) {
                        n.size.width = h.width + f;
                        n.size.height = h.height + e;
                        n.position.left = i.left - f
                    } else {
                        n.size.width = h.width + f;
                        n.size.height = h.height + e;
                        n.position.top = i.top - e;
                        n.position.left = i.left - f
                    }
                }
            }
        }
    });
    var b = function (d) {
        return parseInt(d, 10) || 0
    };
    var a = function (d) {
        return !isNaN(parseInt(d, 10))
    }
})(jQuery);
(function (a) {
    a.widget("ui.selectable", a.extend({}, a.ui.mouse, {
        _init: function () {
            var b = this;
            this.element.addClass("ui-selectable");
            this.dragged = false;
            var c;
            this.refresh = function () {
                c = a(b.options.filter, b.element[0]);
                c.each(function () {
                    var d = a(this);
                    var e = d.offset();
                    a.data(this, "selectable-item", {
                        element: this,
                        $element: d,
                        left: e.left,
                        top: e.top,
                        right: e.left + d.outerWidth(),
                        bottom: e.top + d.outerHeight(),
                        startselected: false,
                        selected: d.hasClass("ui-selected"),
                        selecting: d.hasClass("ui-selecting"),
                        unselecting: d.hasClass("ui-unselecting")
                    })
                })
            };
            this.refresh();
            this.selectees = c.addClass("ui-selectee");
            this._mouseInit();
            this.helper = a(document.createElement("div")).css({border: "1px dotted black"}).addClass("ui-selectable-helper")
        }, destroy: function () {
            this.element.removeClass("ui-selectable ui-selectable-disabled").removeData("selectable").unbind(".selectable");
            this._mouseDestroy()
        }, _mouseStart: function (d) {
            var b = this;
            this.opos = [d.pageX, d.pageY];
            if (this.options.disabled) {
                return
            }
            var c = this.options;
            this.selectees = a(c.filter, this.element[0]);
            this._trigger("start", d);
            a("body").append(this.helper);
            this.helper.css({
                "z-index": 100,
                position: "absolute",
                left: d.clientX,
                top: d.clientY,
                width: 0,
                height: 0
            });
            if (c.autoRefresh) {
                this.refresh()
            }
            this.selectees.filter(".ui-selected").each(function () {
                var e = a.data(this, "selectable-item");
                e.startselected = true;
                if (!d.metaKey) {
                    e.$element.removeClass("ui-selected");
                    e.selected = false;
                    e.$element.addClass("ui-unselecting");
                    e.unselecting = true;
                    b._trigger("unselecting", d, {unselecting: e.element})
                }
            });
            a(d.target).parents().andSelf().each(function () {
                var e = a.data(this, "selectable-item");
                if (e) {
                    e.$element.removeClass("ui-unselecting").addClass("ui-selecting");
                    e.unselecting = false;
                    e.selecting = true;
                    e.selected = true;
                    b._trigger("selecting", d, {selecting: e.element});
                    return false
                }
            })
        }, _mouseDrag: function (i) {
            var c = this;
            this.dragged = true;
            if (this.options.disabled) {
                return
            }
            var e = this.options;
            var d = this.opos[0], h = this.opos[1], b = i.pageX, g = i.pageY;
            if (d > b) {
                var f = b;
                b = d;
                d = f
            }
            if (h > g) {
                var f = g;
                g = h;
                h = f
            }
            this.helper.css({left: d, top: h, width: b - d, height: g - h});
            this.selectees.each(function () {
                var j = a.data(this, "selectable-item");
                if (!j || j.element == c.element[0]) {
                    return
                }
                var k = false;
                if (e.tolerance == "touch") {
                    k = (!(j.left > b || j.right < d || j.top > g || j.bottom < h))
                } else {
                    if (e.tolerance == "fit") {
                        k = (j.left > d && j.right < b && j.top > h && j.bottom < g)
                    }
                }
                if (k) {
                    if (j.selected) {
                        j.$element.removeClass("ui-selected");
                        j.selected = false
                    }
                    if (j.unselecting) {
                        j.$element.removeClass("ui-unselecting");
                        j.unselecting = false
                    }
                    if (!j.selecting) {
                        j.$element.addClass("ui-selecting");
                        j.selecting = true;
                        c._trigger("selecting", i, {selecting: j.element})
                    }
                } else {
                    if (j.selecting) {
                        if (i.metaKey && j.startselected) {
                            j.$element.removeClass("ui-selecting");
                            j.selecting = false;
                            j.$element.addClass("ui-selected");
                            j.selected = true
                        } else {
                            j.$element.removeClass("ui-selecting");
                            j.selecting = false;
                            if (j.startselected) {
                                j.$element.addClass("ui-unselecting");
                                j.unselecting = true
                            }
                            c._trigger("unselecting", i, {unselecting: j.element})
                        }
                    }
                    if (j.selected) {
                        if (!i.metaKey && !j.startselected) {
                            j.$element.removeClass("ui-selected");
                            j.selected = false;
                            j.$element.addClass("ui-unselecting");
                            j.unselecting = true;
                            c._trigger("unselecting", i, {unselecting: j.element})
                        }
                    }
                }
            });
            return false
        }, _mouseStop: function (d) {
            var b = this;
            this.dragged = false;
            var c = this.options;
            a(".ui-unselecting", this.element[0]).each(function () {
                var e = a.data(this, "selectable-item");
                e.$element.removeClass("ui-unselecting");
                e.unselecting = false;
                e.startselected = false;
                b._trigger("unselected", d, {unselected: e.element})
            });
            a(".ui-selecting", this.element[0]).each(function () {
                var e = a.data(this, "selectable-item");
                e.$element.removeClass("ui-selecting").addClass("ui-selected");
                e.selecting = false;
                e.selected = true;
                e.startselected = true;
                b._trigger("selected", d, {selected: e.element})
            });
            this._trigger("stop", d);
            this.helper.remove();
            return false
        }
    }));
    a.extend(a.ui.selectable, {
        version: "1.7",
        defaults: {
            appendTo: "body",
            autoRefresh: true,
            cancel: ":input,option",
            delay: 0,
            distance: 0,
            filter: "*",
            tolerance: "touch"
        }
    })
})(jQuery);
(function (a) {
    a.widget("ui.sortable", a.extend({}, a.ui.mouse, {
        _init: function () {
            var b = this.options;
            this.containerCache = {};
            this.element.addClass("ui-sortable");
            this.refresh();
            this.floating = this.items.length ? (/left|right/).test(this.items[0].item.css("float")) : false;
            this.offset = this.element.offset();
            this._mouseInit()
        }, destroy: function () {
            this.element.removeClass("ui-sortable ui-sortable-disabled").removeData("sortable").unbind(".sortable");
            this._mouseDestroy();
            for (var b = this.items.length - 1; b >= 0; b--) {
                this.items[b].item.removeData("sortable-item")
            }
        }, _mouseCapture: function (e, f) {
            if (this.reverting) {
                return false
            }
            if (this.options.disabled || this.options.type == "static") {
                return false
            }
            this._refreshItems(e);
            var d = null, c = this, b = a(e.target).parents().each(function () {
                if (a.data(this, "sortable-item") == c) {
                    d = a(this);
                    return false
                }
            });
            if (a.data(e.target, "sortable-item") == c) {
                d = a(e.target)
            }
            if (!d) {
                return false
            }
            if (this.options.handle && !f) {
                var g = false;
                a(this.options.handle, d).find("*").andSelf().each(function () {
                    if (this == e.target) {
                        g = true
                    }
                });
                if (!g) {
                    return false
                }
            }
            this.currentItem = d;
            this._removeCurrentsFromItems();
            return true
        }, _mouseStart: function (e, f, b) {
            var g = this.options, c = this;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(e);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left};
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            a.extend(this.offset, {
                click: {left: e.pageX - this.offset.left, top: e.pageY - this.offset.top},
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this._generatePosition(e);
            this.originalPageX = e.pageX;
            this.originalPageY = e.pageY;
            if (g.cursorAt) {
                this._adjustOffsetFromHelper(g.cursorAt)
            }
            this.domPosition = {prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0]};
            if (this.helper[0] != this.currentItem[0]) {
                this.currentItem.hide()
            }
            this._createPlaceholder();
            if (g.containment) {
                this._setContainment()
            }
            if (g.cursor) {
                if (a("body").css("cursor")) {
                    this._storedCursor = a("body").css("cursor")
                }
                a("body").css("cursor", g.cursor)
            }
            if (g.opacity) {
                if (this.helper.css("opacity")) {
                    this._storedOpacity = this.helper.css("opacity")
                }
                this.helper.css("opacity", g.opacity)
            }
            if (g.zIndex) {
                if (this.helper.css("zIndex")) {
                    this._storedZIndex = this.helper.css("zIndex")
                }
                this.helper.css("zIndex", g.zIndex)
            }
            if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML") {
                this.overflowOffset = this.scrollParent.offset()
            }
            this._trigger("start", e, this._uiHash());
            if (!this._preserveHelperProportions) {
                this._cacheHelperProportions()
            }
            if (!b) {
                for (var d = this.containers.length - 1; d >= 0; d--) {
                    this.containers[d]._trigger("activate", e, c._uiHash(this))
                }
            }
            if (a.ui.ddmanager) {
                a.ui.ddmanager.current = this
            }
            if (a.ui.ddmanager && !g.dropBehaviour) {
                a.ui.ddmanager.prepareOffsets(this, e)
            }
            this.dragging = true;
            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(e);
            return true
        }, _mouseDrag: function (f) {
            this.position = this._generatePosition(f);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs
            }
            if (this.options.scroll) {
                var g = this.options, b = false;
                if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML") {
                    if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - f.pageY < g.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = b = this.scrollParent[0].scrollTop + g.scrollSpeed
                    } else {
                        if (f.pageY - this.overflowOffset.top < g.scrollSensitivity) {
                            this.scrollParent[0].scrollTop = b = this.scrollParent[0].scrollTop - g.scrollSpeed
                        }
                    }
                    if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - f.pageX < g.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = b = this.scrollParent[0].scrollLeft + g.scrollSpeed
                    } else {
                        if (f.pageX - this.overflowOffset.left < g.scrollSensitivity) {
                            this.scrollParent[0].scrollLeft = b = this.scrollParent[0].scrollLeft - g.scrollSpeed
                        }
                    }
                } else {
                    if (f.pageY - a(document).scrollTop() < g.scrollSensitivity) {
                        b = a(document).scrollTop(a(document).scrollTop() - g.scrollSpeed)
                    } else {
                        if (a(window).height() - (f.pageY - a(document).scrollTop()) < g.scrollSensitivity) {
                            b = a(document).scrollTop(a(document).scrollTop() + g.scrollSpeed)
                        }
                    }
                    if (f.pageX - a(document).scrollLeft() < g.scrollSensitivity) {
                        b = a(document).scrollLeft(a(document).scrollLeft() - g.scrollSpeed)
                    } else {
                        if (a(window).width() - (f.pageX - a(document).scrollLeft()) < g.scrollSensitivity) {
                            b = a(document).scrollLeft(a(document).scrollLeft() + g.scrollSpeed)
                        }
                    }
                }
                if (b !== false && a.ui.ddmanager && !g.dropBehaviour) {
                    a.ui.ddmanager.prepareOffsets(this, f)
                }
            }
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.options.axis || this.options.axis != "y") {
                this.helper[0].style.left = this.position.left + "px"
            }
            if (!this.options.axis || this.options.axis != "x") {
                this.helper[0].style.top = this.position.top + "px"
            }
            for (var d = this.items.length - 1; d >= 0; d--) {
                var e = this.items[d], c = e.item[0], h = this._intersectsWithPointer(e);
                if (!h) {
                    continue
                }
                if (c != this.currentItem[0] && this.placeholder[h == 1 ? "next" : "prev"]()[0] != c && !a.ui.contains(this.placeholder[0], c) && (this.options.type == "semi-dynamic" ? !a.ui.contains(this.element[0], c) : true)) {
                    this.direction = h == 1 ? "down" : "up";
                    if (this.options.tolerance == "pointer" || this._intersectsWithSides(e)) {
                        this._rearrange(f, e)
                    } else {
                        break
                    }
                    this._trigger("change", f, this._uiHash());
                    break
                }
            }
            this._contactContainers(f);
            if (a.ui.ddmanager) {
                a.ui.ddmanager.drag(this, f)
            }
            this._trigger("sort", f, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false
        }, _mouseStop: function (c, d) {
            if (!c) {
                return
            }
            if (a.ui.ddmanager && !this.options.dropBehaviour) {
                a.ui.ddmanager.drop(this, c)
            }
            if (this.options.revert) {
                var b = this;
                var e = b.placeholder.offset();
                b.reverting = true;
                a(this.helper).animate({
                    left: e.left - this.offset.parent.left - b.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),
                    top: e.top - this.offset.parent.top - b.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)
                }, parseInt(this.options.revert, 10) || 500, function () {
                    b._clear(c)
                })
            } else {
                this._clear(c, d)
            }
            return false
        }, cancel: function () {
            var b = this;
            if (this.dragging) {
                this._mouseUp();
                if (this.options.helper == "original") {
                    this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
                } else {
                    this.currentItem.show()
                }
                for (var c = this.containers.length - 1; c >= 0; c--) {
                    this.containers[c]._trigger("deactivate", null, b._uiHash(this));
                    if (this.containers[c].containerCache.over) {
                        this.containers[c]._trigger("out", null, b._uiHash(this));
                        this.containers[c].containerCache.over = 0
                    }
                }
            }
            if (this.placeholder[0].parentNode) {
                this.placeholder[0].parentNode.removeChild(this.placeholder[0])
            }
            if (this.options.helper != "original" && this.helper && this.helper[0].parentNode) {
                this.helper.remove()
            }
            a.extend(this, {helper: null, dragging: false, reverting: false, _noFinalSort: null});
            if (this.domPosition.prev) {
                a(this.domPosition.prev).after(this.currentItem)
            } else {
                a(this.domPosition.parent).prepend(this.currentItem)
            }
            return true
        }, serialize: function (d) {
            var b = this._getItemsAsjQuery(d && d.connected);
            var c = [];
            d = d || {};
            a(b).each(function () {
                var e = (a(d.item || this).attr(d.attribute || "id") || "").match(d.expression || (/(.+)[-=_](.+)/));
                if (e) {
                    c.push((d.key || e[1] + "[]") + "=" + (d.key && d.expression ? e[1] : e[2]))
                }
            });
            return c.join("&")
        }, toArray: function (d) {
            var b = this._getItemsAsjQuery(d && d.connected);
            var c = [];
            d = d || {};
            b.each(function () {
                c.push(a(d.item || this).attr(d.attribute || "id") || "")
            });
            return c
        }, _intersectsWith: function (m) {
            var e = this.positionAbs.left, d = e + this.helperProportions.width, k = this.positionAbs.top,
                j = k + this.helperProportions.height;
            var f = m.left, c = f + m.width, n = m.top, i = n + m.height;
            var o = this.offset.click.top, h = this.offset.click.left;
            var g = (k + o) > n && (k + o) < i && (e + h) > f && (e + h) < c;
            if (this.options.tolerance == "pointer" || this.options.forcePointerForContainers || (this.options.tolerance != "pointer" && this.helperProportions[this.floating ? "width" : "height"] > m[this.floating ? "width" : "height"])) {
                return g
            } else {
                return (f < e + (this.helperProportions.width / 2) && d - (this.helperProportions.width / 2) < c && n < k + (this.helperProportions.height / 2) && j - (this.helperProportions.height / 2) < i)
            }
        }, _intersectsWithPointer: function (d) {
            var e = a.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, d.top, d.height),
                c = a.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, d.left, d.width), g = e && c,
                b = this._getDragVerticalDirection(), f = this._getDragHorizontalDirection();
            if (!g) {
                return false
            }
            return this.floating ? (((f && f == "right") || b == "down") ? 2 : 1) : (b && (b == "down" ? 2 : 1))
        }, _intersectsWithSides: function (e) {
            var c = a.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, e.top + (e.height / 2), e.height),
                d = a.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, e.left + (e.width / 2), e.width),
                b = this._getDragVerticalDirection(), f = this._getDragHorizontalDirection();
            if (this.floating && f) {
                return ((f == "right" && d) || (f == "left" && !d))
            } else {
                return b && ((b == "down" && c) || (b == "up" && !c))
            }
        }, _getDragVerticalDirection: function () {
            var b = this.positionAbs.top - this.lastPositionAbs.top;
            return b != 0 && (b > 0 ? "down" : "up")
        }, _getDragHorizontalDirection: function () {
            var b = this.positionAbs.left - this.lastPositionAbs.left;
            return b != 0 && (b > 0 ? "right" : "left")
        }, refresh: function (b) {
            this._refreshItems(b);
            this.refreshPositions()
        }, _connectWith: function () {
            var b = this.options;
            return b.connectWith.constructor == String ? [b.connectWith] : b.connectWith
        }, _getItemsAsjQuery: function (b) {
            var l = this;
            var g = [];
            var e = [];
            var h = this._connectWith();
            if (h && b) {
                for (var d = h.length - 1; d >= 0; d--) {
                    var k = a(h[d]);
                    for (var c = k.length - 1; c >= 0; c--) {
                        var f = a.data(k[c], "sortable");
                        if (f && f != this && !f.options.disabled) {
                            e.push([a.isFunction(f.options.items) ? f.options.items.call(f.element) : a(f.options.items, f.element).not(".ui-sortable-helper"), f])
                        }
                    }
                }
            }
            e.push([a.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : a(this.options.items, this.element).not(".ui-sortable-helper"), this]);
            for (var d = e.length - 1; d >= 0; d--) {
                e[d][0].each(function () {
                    g.push(this)
                })
            }
            return a(g)
        }, _removeCurrentsFromItems: function () {
            var d = this.currentItem.find(":data(sortable-item)");
            for (var c = 0; c < this.items.length; c++) {
                for (var b = 0; b < d.length; b++) {
                    if (d[b] == this.items[c].item[0]) {
                        this.items.splice(c, 1)
                    }
                }
            }
        }, _refreshItems: function (b) {
            this.items = [];
            this.containers = [this];
            var h = this.items;
            var p = this;
            var f = [[a.isFunction(this.options.items) ? this.options.items.call(this.element[0], b, {item: this.currentItem}) : a(this.options.items, this.element), this]];
            var l = this._connectWith();
            if (l) {
                for (var e = l.length - 1; e >= 0; e--) {
                    var m = a(l[e]);
                    for (var d = m.length - 1; d >= 0; d--) {
                        var g = a.data(m[d], "sortable");
                        if (g && g != this && !g.options.disabled) {
                            f.push([a.isFunction(g.options.items) ? g.options.items.call(g.element[0], b, {item: this.currentItem}) : a(g.options.items, g.element), g]);
                            this.containers.push(g)
                        }
                    }
                }
            }
            for (var e = f.length - 1; e >= 0; e--) {
                var k = f[e][1];
                var c = f[e][0];
                for (var d = 0, n = c.length; d < n; d++) {
                    var o = a(c[d]);
                    o.data("sortable-item", k);
                    h.push({item: o, instance: k, width: 0, height: 0, left: 0, top: 0})
                }
            }
        }, refreshPositions: function (b) {
            if (this.offsetParent && this.helper) {
                this.offset.parent = this._getParentOffset()
            }
            for (var d = this.items.length - 1; d >= 0; d--) {
                var e = this.items[d];
                if (e.instance != this.currentContainer && this.currentContainer && e.item[0] != this.currentItem[0]) {
                    continue
                }
                var c = this.options.toleranceElement ? a(this.options.toleranceElement, e.item) : e.item;
                if (!b) {
                    e.width = c.outerWidth();
                    e.height = c.outerHeight()
                }
                var f = c.offset();
                e.left = f.left;
                e.top = f.top
            }
            if (this.options.custom && this.options.custom.refreshContainers) {
                this.options.custom.refreshContainers.call(this)
            } else {
                for (var d = this.containers.length - 1; d >= 0; d--) {
                    var f = this.containers[d].element.offset();
                    this.containers[d].containerCache.left = f.left;
                    this.containers[d].containerCache.top = f.top;
                    this.containers[d].containerCache.width = this.containers[d].element.outerWidth();
                    this.containers[d].containerCache.height = this.containers[d].element.outerHeight()
                }
            }
        }, _createPlaceholder: function (d) {
            var b = d || this, e = b.options;
            if (!e.placeholder || e.placeholder.constructor == String) {
                var c = e.placeholder;
                e.placeholder = {
                    element: function () {
                        var f = a(document.createElement(b.currentItem[0].nodeName)).addClass(c || b.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
                        if (!c) {
                            f.style.visibility = "hidden"
                        }
                        return f
                    }, update: function (f, g) {
                        if (c && !e.forcePlaceholderSize) {
                            return
                        }
                        if (!g.height()) {
                            g.height(b.currentItem.innerHeight() - parseInt(b.currentItem.css("paddingTop") || 0, 10) - parseInt(b.currentItem.css("paddingBottom") || 0, 10))
                        }
                        if (!g.width()) {
                            g.width(b.currentItem.innerWidth() - parseInt(b.currentItem.css("paddingLeft") || 0, 10) - parseInt(b.currentItem.css("paddingRight") || 0, 10))
                        }
                    }
                }
            }
            b.placeholder = a(e.placeholder.element.call(b.element, b.currentItem));
            b.currentItem.after(b.placeholder);
            e.placeholder.update(b, b.placeholder)
        }, _contactContainers: function (d) {
            for (var c = this.containers.length - 1; c >= 0; c--) {
                if (this._intersectsWith(this.containers[c].containerCache)) {
                    if (!this.containers[c].containerCache.over) {
                        if (this.currentContainer != this.containers[c]) {
                            var h = 10000;
                            var g = null;
                            var e = this.positionAbs[this.containers[c].floating ? "left" : "top"];
                            for (var b = this.items.length - 1; b >= 0; b--) {
                                if (!a.ui.contains(this.containers[c].element[0], this.items[b].item[0])) {
                                    continue
                                }
                                var f = this.items[b][this.containers[c].floating ? "left" : "top"];
                                if (Math.abs(f - e) < h) {
                                    h = Math.abs(f - e);
                                    g = this.items[b]
                                }
                            }
                            if (!g && !this.options.dropOnEmpty) {
                                continue
                            }
                            this.currentContainer = this.containers[c];
                            g ? this._rearrange(d, g, null, true) : this._rearrange(d, null, this.containers[c].element, true);
                            this._trigger("change", d, this._uiHash());
                            this.containers[c]._trigger("change", d, this._uiHash(this));
                            this.options.placeholder.update(this.currentContainer, this.placeholder)
                        }
                        this.containers[c]._trigger("over", d, this._uiHash(this));
                        this.containers[c].containerCache.over = 1
                    }
                } else {
                    if (this.containers[c].containerCache.over) {
                        this.containers[c]._trigger("out", d, this._uiHash(this));
                        this.containers[c].containerCache.over = 0
                    }
                }
            }
        }, _createHelper: function (c) {
            var d = this.options;
            var b = a.isFunction(d.helper) ? a(d.helper.apply(this.element[0], [c, this.currentItem])) : (d.helper == "clone" ? this.currentItem.clone() : this.currentItem);
            if (!b.parents("body").length) {
                a(d.appendTo != "parent" ? d.appendTo : this.currentItem[0].parentNode)[0].appendChild(b[0])
            }
            if (b[0] == this.currentItem[0]) {
                this._storedCSS = {
                    width: this.currentItem[0].style.width,
                    height: this.currentItem[0].style.height,
                    position: this.currentItem.css("position"),
                    top: this.currentItem.css("top"),
                    left: this.currentItem.css("left")
                }
            }
            if (b[0].style.width == "" || d.forceHelperSize) {
                b.width(this.currentItem.width())
            }
            if (b[0].style.height == "" || d.forceHelperSize) {
                b.height(this.currentItem.height())
            }
            return b
        }, _adjustOffsetFromHelper: function (b) {
            if (b.left != undefined) {
                this.offset.click.left = b.left + this.margins.left
            }
            if (b.right != undefined) {
                this.offset.click.left = this.helperProportions.width - b.right + this.margins.left
            }
            if (b.top != undefined) {
                this.offset.click.top = b.top + this.margins.top
            }
            if (b.bottom != undefined) {
                this.offset.click.top = this.helperProportions.height - b.bottom + this.margins.top
            }
        }, _getParentOffset: function () {
            this.offsetParent = this.helper.offsetParent();
            var b = this.offsetParent.offset();
            if (this.cssPosition == "absolute" && this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                b.left += this.scrollParent.scrollLeft();
                b.top += this.scrollParent.scrollTop()
            }
            if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && a.browser.msie)) {
                b = {top: 0, left: 0}
            }
            return {
                top: b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        }, _getRelativeOffset: function () {
            if (this.cssPosition == "relative") {
                var b = this.currentItem.position();
                return {
                    top: b.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: b.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            } else {
                return {top: 0, left: 0}
            }
        }, _cacheMargins: function () {
            this.margins = {
                left: (parseInt(this.currentItem.css("marginLeft"), 10) || 0),
                top: (parseInt(this.currentItem.css("marginTop"), 10) || 0)
            }
        }, _cacheHelperProportions: function () {
            this.helperProportions = {width: this.helper.outerWidth(), height: this.helper.outerHeight()}
        }, _setContainment: function () {
            var e = this.options;
            if (e.containment == "parent") {
                e.containment = this.helper[0].parentNode
            }
            if (e.containment == "document" || e.containment == "window") {
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, a(e.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (a(e.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
            }
            if (!(/^(document|window|parent)$/).test(e.containment)) {
                var c = a(e.containment)[0];
                var d = a(e.containment).offset();
                var b = (a(c).css("overflow") != "hidden");
                this.containment = [d.left + (parseInt(a(c).css("borderLeftWidth"), 10) || 0) + (parseInt(a(c).css("paddingLeft"), 10) || 0) - this.margins.left, d.top + (parseInt(a(c).css("borderTopWidth"), 10) || 0) + (parseInt(a(c).css("paddingTop"), 10) || 0) - this.margins.top, d.left + (b ? Math.max(c.scrollWidth, c.offsetWidth) : c.offsetWidth) - (parseInt(a(c).css("borderLeftWidth"), 10) || 0) - (parseInt(a(c).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, d.top + (b ? Math.max(c.scrollHeight, c.offsetHeight) : c.offsetHeight) - (parseInt(a(c).css("borderTopWidth"), 10) || 0) - (parseInt(a(c).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
            }
        }, _convertPositionTo: function (f, h) {
            if (!h) {
                h = this.position
            }
            var c = f == "absolute" ? 1 : -1;
            var e = this.options,
                b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                g = (/(html|body)/i).test(b[0].tagName);
            return {
                top: (h.top + this.offset.relative.top * c + this.offset.parent.top * c - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (g ? 0 : b.scrollTop())) * c)),
                left: (h.left + this.offset.relative.left * c + this.offset.parent.left * c - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : g ? 0 : b.scrollLeft()) * c))
            }
        }, _generatePosition: function (e) {
            var h = this.options,
                b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                i = (/(html|body)/i).test(b[0].tagName);
            if (this.cssPosition == "relative" && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
                this.offset.relative = this._getRelativeOffset()
            }
            var d = e.pageX;
            var c = e.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (e.pageX - this.offset.click.left < this.containment[0]) {
                        d = this.containment[0] + this.offset.click.left
                    }
                    if (e.pageY - this.offset.click.top < this.containment[1]) {
                        c = this.containment[1] + this.offset.click.top
                    }
                    if (e.pageX - this.offset.click.left > this.containment[2]) {
                        d = this.containment[2] + this.offset.click.left
                    }
                    if (e.pageY - this.offset.click.top > this.containment[3]) {
                        c = this.containment[3] + this.offset.click.top
                    }
                }
                if (h.grid) {
                    var g = this.originalPageY + Math.round((c - this.originalPageY) / h.grid[1]) * h.grid[1];
                    c = this.containment ? (!(g - this.offset.click.top < this.containment[1] || g - this.offset.click.top > this.containment[3]) ? g : (!(g - this.offset.click.top < this.containment[1]) ? g - h.grid[1] : g + h.grid[1])) : g;
                    var f = this.originalPageX + Math.round((d - this.originalPageX) / h.grid[0]) * h.grid[0];
                    d = this.containment ? (!(f - this.offset.click.left < this.containment[0] || f - this.offset.click.left > this.containment[2]) ? f : (!(f - this.offset.click.left < this.containment[0]) ? f - h.grid[0] : f + h.grid[0])) : f
                }
            }
            return {
                top: (c - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (i ? 0 : b.scrollTop())))),
                left: (d - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : i ? 0 : b.scrollLeft())))
            }
        }, _rearrange: function (g, f, c, e) {
            c ? c[0].appendChild(this.placeholder[0]) : f.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction == "down" ? f.item[0] : f.item[0].nextSibling));
            this.counter = this.counter ? ++this.counter : 1;
            var d = this, b = this.counter;
            window.setTimeout(function () {
                if (b == d.counter) {
                    d.refreshPositions(!e)
                }
            }, 0)
        }, _clear: function (d, e) {
            this.reverting = false;
            var f = [], b = this;
            if (!this._noFinalSort && this.currentItem[0].parentNode) {
                this.placeholder.before(this.currentItem)
            }
            this._noFinalSort = null;
            if (this.helper[0] == this.currentItem[0]) {
                for (var c in this._storedCSS) {
                    if (this._storedCSS[c] == "auto" || this._storedCSS[c] == "static") {
                        this._storedCSS[c] = ""
                    }
                }
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
            } else {
                this.currentItem.show()
            }
            if (this.fromOutside && !e) {
                f.push(function (g) {
                    this._trigger("receive", g, this._uiHash(this.fromOutside))
                })
            }
            if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !e) {
                f.push(function (g) {
                    this._trigger("update", g, this._uiHash())
                })
            }
            if (!a.ui.contains(this.element[0], this.currentItem[0])) {
                if (!e) {
                    f.push(function (g) {
                        this._trigger("remove", g, this._uiHash())
                    })
                }
                for (var c = this.containers.length - 1; c >= 0; c--) {
                    if (a.ui.contains(this.containers[c].element[0], this.currentItem[0]) && !e) {
                        f.push((function (g) {
                            return function (h) {
                                g._trigger("receive", h, this._uiHash(this))
                            }
                        }).call(this, this.containers[c]));
                        f.push((function (g) {
                            return function (h) {
                                g._trigger("update", h, this._uiHash(this))
                            }
                        }).call(this, this.containers[c]))
                    }
                }
            }
            for (var c = this.containers.length - 1; c >= 0; c--) {
                if (!e) {
                    f.push((function (g) {
                        return function (h) {
                            g._trigger("deactivate", h, this._uiHash(this))
                        }
                    }).call(this, this.containers[c]))
                }
                if (this.containers[c].containerCache.over) {
                    f.push((function (g) {
                        return function (h) {
                            g._trigger("out", h, this._uiHash(this))
                        }
                    }).call(this, this.containers[c]));
                    this.containers[c].containerCache.over = 0
                }
            }
            if (this._storedCursor) {
                a("body").css("cursor", this._storedCursor)
            }
            if (this._storedOpacity) {
                this.helper.css("opacity", this._storedOpacity)
            }
            if (this._storedZIndex) {
                this.helper.css("zIndex", this._storedZIndex == "auto" ? "" : this._storedZIndex)
            }
            this.dragging = false;
            if (this.cancelHelperRemoval) {
                if (!e) {
                    this._trigger("beforeStop", d, this._uiHash());
                    for (var c = 0; c < f.length; c++) {
                        f[c].call(this, d)
                    }
                    this._trigger("stop", d, this._uiHash())
                }
                return false
            }
            if (!e) {
                this._trigger("beforeStop", d, this._uiHash())
            }
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            if (this.helper[0] != this.currentItem[0]) {
                this.helper.remove()
            }
            this.helper = null;
            if (!e) {
                for (var c = 0; c < f.length; c++) {
                    f[c].call(this, d)
                }
                this._trigger("stop", d, this._uiHash())
            }
            this.fromOutside = false;
            return true
        }, _trigger: function () {
            if (a.widget.prototype._trigger.apply(this, arguments) === false) {
                this.cancel()
            }
        }, _uiHash: function (c) {
            var b = c || this;
            return {
                helper: b.helper,
                placeholder: b.placeholder || a([]),
                position: b.position,
                absolutePosition: b.positionAbs,
                offset: b.positionAbs,
                item: b.currentItem,
                sender: c ? c.element : null
            }
        }
    }));
    a.extend(a.ui.sortable, {
        getter: "serialize toArray",
        version: "1.7",
        eventPrefix: "sort",
        defaults: {
            appendTo: "parent",
            axis: false,
            cancel: ":input,option",
            connectWith: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            delay: 0,
            distance: 1,
            dropOnEmpty: true,
            forcePlaceholderSize: false,
            forceHelperSize: false,
            grid: false,
            handle: false,
            helper: "original",
            items: "> *",
            opacity: false,
            placeholder: false,
            revert: false,
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1000
        }
    })
})(jQuery);
jQuery.effects || (function (d) {
    d.effects = {
        version: "1.7", save: function (g, h) {
            for (var f = 0; f < h.length; f++) {
                if (h[f] !== null) {
                    g.data("ec.storage." + h[f], g[0].style[h[f]])
                }
            }
        }, restore: function (g, h) {
            for (var f = 0; f < h.length; f++) {
                if (h[f] !== null) {
                    g.css(h[f], g.data("ec.storage." + h[f]))
                }
            }
        }, setMode: function (f, g) {
            if (g == "toggle") {
                g = f.is(":hidden") ? "show" : "hide"
            }
            return g
        }, getBaseline: function (g, h) {
            var i, f;
            switch (g[0]) {
                case"top":
                    i = 0;
                    break;
                case"middle":
                    i = 0.5;
                    break;
                case"bottom":
                    i = 1;
                    break;
                default:
                    i = g[0] / h.height
            }
            switch (g[1]) {
                case"left":
                    f = 0;
                    break;
                case"center":
                    f = 0.5;
                    break;
                case"right":
                    f = 1;
                    break;
                default:
                    f = g[1] / h.width
            }
            return {x: f, y: i}
        }, createWrapper: function (f) {
            if (f.parent().is(".ui-effects-wrapper")) {
                return f.parent()
            }
            var g = {width: f.outerWidth(true), height: f.outerHeight(true), "float": f.css("float")};
            f.wrap('<div class="ui-effects-wrapper" style="font-size:100%;background:transparent;border:none;margin:0;padding:0"></div>');
            var j = f.parent();
            if (f.css("position") == "static") {
                j.css({position: "relative"});
                f.css({position: "relative"})
            } else {
                var i = f.css("top");
                if (isNaN(parseInt(i, 10))) {
                    i = "auto"
                }
                var h = f.css("left");
                if (isNaN(parseInt(h, 10))) {
                    h = "auto"
                }
                j.css({position: f.css("position"), top: i, left: h, zIndex: f.css("z-index")}).show();
                f.css({position: "relative", top: 0, left: 0})
            }
            j.css(g);
            return j
        }, removeWrapper: function (f) {
            if (f.parent().is(".ui-effects-wrapper")) {
                return f.parent().replaceWith(f)
            }
            return f
        }, setTransition: function (g, i, f, h) {
            h = h || {};
            d.each(i, function (k, j) {
                unit = g.cssUnit(j);
                if (unit[0] > 0) {
                    h[j] = unit[0] * f + unit[1]
                }
            });
            return h
        }, animateClass: function (h, i, k, j) {
            var f = (typeof k == "function" ? k : (j ? j : null));
            var g = (typeof k == "string" ? k : null);
            return this.each(function () {
                var q = {};
                var o = d(this);
                var p = o.attr("style") || "";
                if (typeof p == "object") {
                    p = p.cssText
                }
                if (h.toggle) {
                    o.hasClass(h.toggle) ? h.remove = h.toggle : h.add = h.toggle
                }
                var l = d.extend({}, (document.defaultView ? document.defaultView.getComputedStyle(this, null) : this.currentStyle));
                if (h.add) {
                    o.addClass(h.add)
                }
                if (h.remove) {
                    o.removeClass(h.remove)
                }
                var m = d.extend({}, (document.defaultView ? document.defaultView.getComputedStyle(this, null) : this.currentStyle));
                if (h.add) {
                    o.removeClass(h.add)
                }
                if (h.remove) {
                    o.addClass(h.remove)
                }
                for (var r in m) {
                    if (typeof m[r] != "function" && m[r] && r.indexOf("Moz") == -1 && r.indexOf("length") == -1 && m[r] != l[r] && (r.match(/color/i) || (!r.match(/color/i) && !isNaN(parseInt(m[r], 10)))) && (l.position != "static" || (l.position == "static" && !r.match(/left|top|bottom|right/)))) {
                        q[r] = m[r]
                    }
                }
                o.animate(q, i, g, function () {
                    if (typeof d(this).attr("style") == "object") {
                        d(this).attr("style")["cssText"] = "";
                        d(this).attr("style")["cssText"] = p
                    } else {
                        d(this).attr("style", p)
                    }
                    if (h.add) {
                        d(this).addClass(h.add)
                    }
                    if (h.remove) {
                        d(this).removeClass(h.remove)
                    }
                    if (f) {
                        f.apply(this, arguments)
                    }
                })
            })
        }
    };

    function c(g, f) {
        var i = g[1] && g[1].constructor == Object ? g[1] : {};
        if (f) {
            i.mode = f
        }
        var h = g[1] && g[1].constructor != Object ? g[1] : (i.duration ? i.duration : g[2]);
        h = d.fx.off ? 0 : typeof h === "number" ? h : d.fx.speeds[h] || d.fx.speeds._default;
        var j = i.callback || (d.isFunction(g[1]) && g[1]) || (d.isFunction(g[2]) && g[2]) || (d.isFunction(g[3]) && g[3]);
        return [g[0], i, h, j]
    }

    d.fn.extend({
        _show: d.fn.show,
        _hide: d.fn.hide,
        __toggle: d.fn.toggle,
        _addClass: d.fn.addClass,
        _removeClass: d.fn.removeClass,
        _toggleClass: d.fn.toggleClass,
        effect: function (g, f, h, i) {
            return d.effects[g] ? d.effects[g].call(this, {
                method: g,
                options: f || {},
                duration: h,
                callback: i
            }) : null
        },
        show: function () {
            if (!arguments[0] || (arguments[0].constructor == Number || (/(slow|normal|fast)/).test(arguments[0]))) {
                return this._show.apply(this, arguments)
            } else {
                return this.effect.apply(this, c(arguments, "show"))
            }
        },
        hide: function () {
            if (!arguments[0] || (arguments[0].constructor == Number || (/(slow|normal|fast)/).test(arguments[0]))) {
                return this._hide.apply(this, arguments)
            } else {
                return this.effect.apply(this, c(arguments, "hide"))
            }
        },
        toggle: function () {
            if (!arguments[0] || (arguments[0].constructor == Number || (/(slow|normal|fast)/).test(arguments[0])) || (arguments[0].constructor == Function)) {
                return this.__toggle.apply(this, arguments)
            } else {
                return this.effect.apply(this, c(arguments, "toggle"))
            }
        },
        addClass: function (g, f, i, h) {
            return f ? d.effects.animateClass.apply(this, [{add: g}, f, i, h]) : this._addClass(g)
        },
        removeClass: function (g, f, i, h) {
            return f ? d.effects.animateClass.apply(this, [{remove: g}, f, i, h]) : this._removeClass(g)
        },
        toggleClass: function (g, f, i, h) {
            return ((typeof f !== "boolean") && f) ? d.effects.animateClass.apply(this, [{toggle: g}, f, i, h]) : this._toggleClass(g, f)
        },
        morph: function (f, h, g, j, i) {
            return d.effects.animateClass.apply(this, [{add: h, remove: f}, g, j, i])
        },
        switchClass: function () {
            return this.morph.apply(this, arguments)
        },
        cssUnit: function (f) {
            var g = this.css(f), h = [];
            d.each(["em", "px", "%", "pt"], function (j, k) {
                if (g.indexOf(k) > 0) {
                    h = [parseFloat(g), k]
                }
            });
            return h
        }
    });
    d.each(["backgroundColor", "borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor", "color", "outlineColor"], function (g, f) {
        d.fx.step[f] = function (h) {
            if (h.state == 0) {
                h.start = e(h.elem, f);
                h.end = b(h.end)
            }
            h.elem.style[f] = "rgb(" + [Math.max(Math.min(parseInt((h.pos * (h.end[0] - h.start[0])) + h.start[0], 10), 255), 0), Math.max(Math.min(parseInt((h.pos * (h.end[1] - h.start[1])) + h.start[1], 10), 255), 0), Math.max(Math.min(parseInt((h.pos * (h.end[2] - h.start[2])) + h.start[2], 10), 255), 0)].join(",") + ")"
        }
    });

    function b(g) {
        var f;
        if (g && g.constructor == Array && g.length == 3) {
            return g
        }
        if (f = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(g)) {
            return [parseInt(f[1], 10), parseInt(f[2], 10), parseInt(f[3], 10)]
        }
        if (f = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(g)) {
            return [parseFloat(f[1]) * 2.55, parseFloat(f[2]) * 2.55, parseFloat(f[3]) * 2.55]
        }
        if (f = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(g)) {
            return [parseInt(f[1], 16), parseInt(f[2], 16), parseInt(f[3], 16)]
        }
        if (f = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(g)) {
            return [parseInt(f[1] + f[1], 16), parseInt(f[2] + f[2], 16), parseInt(f[3] + f[3], 16)]
        }
        if (f = /rgba\(0, 0, 0, 0\)/.exec(g)) {
            return a.transparent
        }
        return a[d.trim(g).toLowerCase()]
    }

    function e(h, f) {
        var g;
        do {
            g = d.curCSS(h, f);
            if (g != "" && g != "transparent" || d.nodeName(h, "body")) {
                break
            }
            f = "backgroundColor"
        } while (h = h.parentNode);
        return b(g)
    }

    var a = {
        aqua: [0, 255, 255],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        black: [0, 0, 0],
        blue: [0, 0, 255],
        brown: [165, 42, 42],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgrey: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkviolet: [148, 0, 211],
        fuchsia: [255, 0, 255],
        gold: [255, 215, 0],
        green: [0, 128, 0],
        indigo: [75, 0, 130],
        khaki: [240, 230, 140],
        lightblue: [173, 216, 230],
        lightcyan: [224, 255, 255],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightpink: [255, 182, 193],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        navy: [0, 0, 128],
        olive: [128, 128, 0],
        orange: [255, 165, 0],
        pink: [255, 192, 203],
        purple: [128, 0, 128],
        violet: [128, 0, 128],
        red: [255, 0, 0],
        silver: [192, 192, 192],
        white: [255, 255, 255],
        yellow: [255, 255, 0],
        transparent: [255, 255, 255]
    };
    d.easing.jswing = d.easing.swing;
    d.extend(d.easing, {
        def: "easeOutQuad", swing: function (g, h, f, j, i) {
            return d.easing[d.easing.def](g, h, f, j, i)
        }, easeInQuad: function (g, h, f, j, i) {
            return j * (h /= i) * h + f
        }, easeOutQuad: function (g, h, f, j, i) {
            return -j * (h /= i) * (h - 2) + f
        }, easeInOutQuad: function (g, h, f, j, i) {
            if ((h /= i / 2) < 1) {
                return j / 2 * h * h + f
            }
            return -j / 2 * ((--h) * (h - 2) - 1) + f
        }, easeInCubic: function (g, h, f, j, i) {
            return j * (h /= i) * h * h + f
        }, easeOutCubic: function (g, h, f, j, i) {
            return j * ((h = h / i - 1) * h * h + 1) + f
        }, easeInOutCubic: function (g, h, f, j, i) {
            if ((h /= i / 2) < 1) {
                return j / 2 * h * h * h + f
            }
            return j / 2 * ((h -= 2) * h * h + 2) + f
        }, easeInQuart: function (g, h, f, j, i) {
            return j * (h /= i) * h * h * h + f
        }, easeOutQuart: function (g, h, f, j, i) {
            return -j * ((h = h / i - 1) * h * h * h - 1) + f
        }, easeInOutQuart: function (g, h, f, j, i) {
            if ((h /= i / 2) < 1) {
                return j / 2 * h * h * h * h + f
            }
            return -j / 2 * ((h -= 2) * h * h * h - 2) + f
        }, easeInQuint: function (g, h, f, j, i) {
            return j * (h /= i) * h * h * h * h + f
        }, easeOutQuint: function (g, h, f, j, i) {
            return j * ((h = h / i - 1) * h * h * h * h + 1) + f
        }, easeInOutQuint: function (g, h, f, j, i) {
            if ((h /= i / 2) < 1) {
                return j / 2 * h * h * h * h * h + f
            }
            return j / 2 * ((h -= 2) * h * h * h * h + 2) + f
        }, easeInSine: function (g, h, f, j, i) {
            return -j * Math.cos(h / i * (Math.PI / 2)) + j + f
        }, easeOutSine: function (g, h, f, j, i) {
            return j * Math.sin(h / i * (Math.PI / 2)) + f
        }, easeInOutSine: function (g, h, f, j, i) {
            return -j / 2 * (Math.cos(Math.PI * h / i) - 1) + f
        }, easeInExpo: function (g, h, f, j, i) {
            return (h == 0) ? f : j * Math.pow(2, 10 * (h / i - 1)) + f
        }, easeOutExpo: function (g, h, f, j, i) {
            return (h == i) ? f + j : j * (-Math.pow(2, -10 * h / i) + 1) + f
        }, easeInOutExpo: function (g, h, f, j, i) {
            if (h == 0) {
                return f
            }
            if (h == i) {
                return f + j
            }
            if ((h /= i / 2) < 1) {
                return j / 2 * Math.pow(2, 10 * (h - 1)) + f
            }
            return j / 2 * (-Math.pow(2, -10 * --h) + 2) + f
        }, easeInCirc: function (g, h, f, j, i) {
            return -j * (Math.sqrt(1 - (h /= i) * h) - 1) + f
        }, easeOutCirc: function (g, h, f, j, i) {
            return j * Math.sqrt(1 - (h = h / i - 1) * h) + f
        }, easeInOutCirc: function (g, h, f, j, i) {
            if ((h /= i / 2) < 1) {
                return -j / 2 * (Math.sqrt(1 - h * h) - 1) + f
            }
            return j / 2 * (Math.sqrt(1 - (h -= 2) * h) + 1) + f
        }, easeInElastic: function (g, i, f, m, l) {
            var j = 1.70158;
            var k = 0;
            var h = m;
            if (i == 0) {
                return f
            }
            if ((i /= l) == 1) {
                return f + m
            }
            if (!k) {
                k = l * 0.3
            }
            if (h < Math.abs(m)) {
                h = m;
                var j = k / 4
            } else {
                var j = k / (2 * Math.PI) * Math.asin(m / h)
            }
            return -(h * Math.pow(2, 10 * (i -= 1)) * Math.sin((i * l - j) * (2 * Math.PI) / k)) + f
        }, easeOutElastic: function (g, i, f, m, l) {
            var j = 1.70158;
            var k = 0;
            var h = m;
            if (i == 0) {
                return f
            }
            if ((i /= l) == 1) {
                return f + m
            }
            if (!k) {
                k = l * 0.3
            }
            if (h < Math.abs(m)) {
                h = m;
                var j = k / 4
            } else {
                var j = k / (2 * Math.PI) * Math.asin(m / h)
            }
            return h * Math.pow(2, -10 * i) * Math.sin((i * l - j) * (2 * Math.PI) / k) + m + f
        }, easeInOutElastic: function (g, i, f, m, l) {
            var j = 1.70158;
            var k = 0;
            var h = m;
            if (i == 0) {
                return f
            }
            if ((i /= l / 2) == 2) {
                return f + m
            }
            if (!k) {
                k = l * (0.3 * 1.5)
            }
            if (h < Math.abs(m)) {
                h = m;
                var j = k / 4
            } else {
                var j = k / (2 * Math.PI) * Math.asin(m / h)
            }
            if (i < 1) {
                return -0.5 * (h * Math.pow(2, 10 * (i -= 1)) * Math.sin((i * l - j) * (2 * Math.PI) / k)) + f
            }
            return h * Math.pow(2, -10 * (i -= 1)) * Math.sin((i * l - j) * (2 * Math.PI) / k) * 0.5 + m + f
        }, easeInBack: function (g, h, f, k, j, i) {
            if (i == undefined) {
                i = 1.70158
            }
            return k * (h /= j) * h * ((i + 1) * h - i) + f
        }, easeOutBack: function (g, h, f, k, j, i) {
            if (i == undefined) {
                i = 1.70158
            }
            return k * ((h = h / j - 1) * h * ((i + 1) * h + i) + 1) + f
        }, easeInOutBack: function (g, h, f, k, j, i) {
            if (i == undefined) {
                i = 1.70158
            }
            if ((h /= j / 2) < 1) {
                return k / 2 * (h * h * (((i *= (1.525)) + 1) * h - i)) + f
            }
            return k / 2 * ((h -= 2) * h * (((i *= (1.525)) + 1) * h + i) + 2) + f
        }, easeInBounce: function (g, h, f, j, i) {
            return j - d.easing.easeOutBounce(g, i - h, 0, j, i) + f
        }, easeOutBounce: function (g, h, f, j, i) {
            if ((h /= i) < (1 / 2.75)) {
                return j * (7.5625 * h * h) + f
            } else {
                if (h < (2 / 2.75)) {
                    return j * (7.5625 * (h -= (1.5 / 2.75)) * h + 0.75) + f
                } else {
                    if (h < (2.5 / 2.75)) {
                        return j * (7.5625 * (h -= (2.25 / 2.75)) * h + 0.9375) + f
                    } else {
                        return j * (7.5625 * (h -= (2.625 / 2.75)) * h + 0.984375) + f
                    }
                }
            }
        }, easeInOutBounce: function (g, h, f, j, i) {
            if (h < i / 2) {
                return d.easing.easeInBounce(g, h * 2, 0, j, i) * 0.5 + f
            }
            return d.easing.easeOutBounce(g, h * 2 - i, 0, j, i) * 0.5 + j * 0.5 + f
        }
    })
})(jQuery);
(function (a) {
    a.effects.blind = function (b) {
        return this.queue(function () {
            var d = a(this), c = ["position", "top", "left"];
            var h = a.effects.setMode(d, b.options.mode || "hide");
            var g = b.options.direction || "vertical";
            a.effects.save(d, c);
            d.show();
            var j = a.effects.createWrapper(d).css({overflow: "hidden"});
            var e = (g == "vertical") ? "height" : "width";
            var i = (g == "vertical") ? j.height() : j.width();
            if (h == "show") {
                j.css(e, 0)
            }
            var f = {};
            f[e] = h == "show" ? i : 0;
            j.animate(f, b.duration, b.options.easing, function () {
                if (h == "hide") {
                    d.hide()
                }
                a.effects.restore(d, c);
                a.effects.removeWrapper(d);
                if (b.callback) {
                    b.callback.apply(d[0], arguments)
                }
                d.dequeue()
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.bounce = function (b) {
        return this.queue(function () {
            var e = a(this), l = ["position", "top", "left"];
            var k = a.effects.setMode(e, b.options.mode || "effect");
            var n = b.options.direction || "up";
            var c = b.options.distance || 20;
            var d = b.options.times || 5;
            var g = b.duration || 250;
            if (/show|hide/.test(k)) {
                l.push("opacity")
            }
            a.effects.save(e, l);
            e.show();
            a.effects.createWrapper(e);
            var f = (n == "up" || n == "down") ? "top" : "left";
            var p = (n == "up" || n == "left") ? "pos" : "neg";
            var c = b.options.distance || (f == "top" ? e.outerHeight({margin: true}) / 3 : e.outerWidth({margin: true}) / 3);
            if (k == "show") {
                e.css("opacity", 0).css(f, p == "pos" ? -c : c)
            }
            if (k == "hide") {
                c = c / (d * 2)
            }
            if (k != "hide") {
                d--
            }
            if (k == "show") {
                var h = {opacity: 1};
                h[f] = (p == "pos" ? "+=" : "-=") + c;
                e.animate(h, g / 2, b.options.easing);
                c = c / 2;
                d--
            }
            for (var j = 0; j < d; j++) {
                var o = {}, m = {};
                o[f] = (p == "pos" ? "-=" : "+=") + c;
                m[f] = (p == "pos" ? "+=" : "-=") + c;
                e.animate(o, g / 2, b.options.easing).animate(m, g / 2, b.options.easing);
                c = (k == "hide") ? c * 2 : c / 2
            }
            if (k == "hide") {
                var h = {opacity: 0};
                h[f] = (p == "pos" ? "-=" : "+=") + c;
                e.animate(h, g / 2, b.options.easing, function () {
                    e.hide();
                    a.effects.restore(e, l);
                    a.effects.removeWrapper(e);
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                })
            } else {
                var o = {}, m = {};
                o[f] = (p == "pos" ? "-=" : "+=") + c;
                m[f] = (p == "pos" ? "+=" : "-=") + c;
                e.animate(o, g / 2, b.options.easing).animate(m, g / 2, b.options.easing, function () {
                    a.effects.restore(e, l);
                    a.effects.removeWrapper(e);
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                })
            }
            e.queue("fx", function () {
                e.dequeue()
            });
            e.dequeue()
        })
    }
})(jQuery);
(function (a) {
    a.effects.clip = function (b) {
        return this.queue(function () {
            var f = a(this), j = ["position", "top", "left", "height", "width"];
            var i = a.effects.setMode(f, b.options.mode || "hide");
            var k = b.options.direction || "vertical";
            a.effects.save(f, j);
            f.show();
            var c = a.effects.createWrapper(f).css({overflow: "hidden"});
            var e = f[0].tagName == "IMG" ? c : f;
            var g = {size: (k == "vertical") ? "height" : "width", position: (k == "vertical") ? "top" : "left"};
            var d = (k == "vertical") ? e.height() : e.width();
            if (i == "show") {
                e.css(g.size, 0);
                e.css(g.position, d / 2)
            }
            var h = {};
            h[g.size] = i == "show" ? d : 0;
            h[g.position] = i == "show" ? 0 : d / 2;
            e.animate(h, {
                queue: false, duration: b.duration, easing: b.options.easing, complete: function () {
                    if (i == "hide") {
                        f.hide()
                    }
                    a.effects.restore(f, j);
                    a.effects.removeWrapper(f);
                    if (b.callback) {
                        b.callback.apply(f[0], arguments)
                    }
                    f.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.drop = function (b) {
        return this.queue(function () {
            var e = a(this), d = ["position", "top", "left", "opacity"];
            var i = a.effects.setMode(e, b.options.mode || "hide");
            var h = b.options.direction || "left";
            a.effects.save(e, d);
            e.show();
            a.effects.createWrapper(e);
            var f = (h == "up" || h == "down") ? "top" : "left";
            var c = (h == "up" || h == "left") ? "pos" : "neg";
            var j = b.options.distance || (f == "top" ? e.outerHeight({margin: true}) / 2 : e.outerWidth({margin: true}) / 2);
            if (i == "show") {
                e.css("opacity", 0).css(f, c == "pos" ? -j : j)
            }
            var g = {opacity: i == "show" ? 1 : 0};
            g[f] = (i == "show" ? (c == "pos" ? "+=" : "-=") : (c == "pos" ? "-=" : "+=")) + j;
            e.animate(g, {
                queue: false, duration: b.duration, easing: b.options.easing, complete: function () {
                    if (i == "hide") {
                        e.hide()
                    }
                    a.effects.restore(e, d);
                    a.effects.removeWrapper(e);
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                    e.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.explode = function (b) {
        return this.queue(function () {
            var k = b.options.pieces ? Math.round(Math.sqrt(b.options.pieces)) : 3;
            var e = b.options.pieces ? Math.round(Math.sqrt(b.options.pieces)) : 3;
            b.options.mode = b.options.mode == "toggle" ? (a(this).is(":visible") ? "hide" : "show") : b.options.mode;
            var h = a(this).show().css("visibility", "hidden");
            var l = h.offset();
            l.top -= parseInt(h.css("marginTop"), 10) || 0;
            l.left -= parseInt(h.css("marginLeft"), 10) || 0;
            var g = h.outerWidth(true);
            var c = h.outerHeight(true);
            for (var f = 0; f < k; f++) {
                for (var d = 0; d < e; d++) {
                    h.clone().appendTo("body").wrap("<div></div>").css({
                        position: "absolute",
                        visibility: "visible",
                        left: -d * (g / e),
                        top: -f * (c / k)
                    }).parent().addClass("ui-effects-explode").css({
                        position: "absolute",
                        overflow: "hidden",
                        width: g / e,
                        height: c / k,
                        left: l.left + d * (g / e) + (b.options.mode == "show" ? (d - Math.floor(e / 2)) * (g / e) : 0),
                        top: l.top + f * (c / k) + (b.options.mode == "show" ? (f - Math.floor(k / 2)) * (c / k) : 0),
                        opacity: b.options.mode == "show" ? 0 : 1
                    }).animate({
                        left: l.left + d * (g / e) + (b.options.mode == "show" ? 0 : (d - Math.floor(e / 2)) * (g / e)),
                        top: l.top + f * (c / k) + (b.options.mode == "show" ? 0 : (f - Math.floor(k / 2)) * (c / k)),
                        opacity: b.options.mode == "show" ? 1 : 0
                    }, b.duration || 500)
                }
            }
            setTimeout(function () {
                b.options.mode == "show" ? h.css({visibility: "visible"}) : h.css({visibility: "visible"}).hide();
                if (b.callback) {
                    b.callback.apply(h[0])
                }
                h.dequeue();
                a("div.ui-effects-explode").remove()
            }, b.duration || 500)
        })
    }
})(jQuery);
(function (a) {
    a.effects.fold = function (b) {
        return this.queue(function () {
            var e = a(this), k = ["position", "top", "left"];
            var h = a.effects.setMode(e, b.options.mode || "hide");
            var o = b.options.size || 15;
            var n = !(!b.options.horizFirst);
            var g = b.duration ? b.duration / 2 : a.fx.speeds._default / 2;
            a.effects.save(e, k);
            e.show();
            var d = a.effects.createWrapper(e).css({overflow: "hidden"});
            var i = ((h == "show") != n);
            var f = i ? ["width", "height"] : ["height", "width"];
            var c = i ? [d.width(), d.height()] : [d.height(), d.width()];
            var j = /([0-9]+)%/.exec(o);
            if (j) {
                o = parseInt(j[1], 10) / 100 * c[h == "hide" ? 0 : 1]
            }
            if (h == "show") {
                d.css(n ? {height: 0, width: o} : {height: o, width: 0})
            }
            var m = {}, l = {};
            m[f[0]] = h == "show" ? c[0] : o;
            l[f[1]] = h == "show" ? c[1] : 0;
            d.animate(m, g, b.options.easing).animate(l, g, b.options.easing, function () {
                if (h == "hide") {
                    e.hide()
                }
                a.effects.restore(e, k);
                a.effects.removeWrapper(e);
                if (b.callback) {
                    b.callback.apply(e[0], arguments)
                }
                e.dequeue()
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.highlight = function (b) {
        return this.queue(function () {
            var e = a(this), d = ["backgroundImage", "backgroundColor", "opacity"];
            var h = a.effects.setMode(e, b.options.mode || "show");
            var c = b.options.color || "#ffff99";
            var g = e.css("backgroundColor");
            a.effects.save(e, d);
            e.show();
            e.css({backgroundImage: "none", backgroundColor: c});
            var f = {backgroundColor: g};
            if (h == "hide") {
                f.opacity = 0
            }
            e.animate(f, {
                queue: false, duration: b.duration, easing: b.options.easing, complete: function () {
                    if (h == "hide") {
                        e.hide()
                    }
                    a.effects.restore(e, d);
                    if (h == "show" && a.browser.msie) {
                        this.style.removeAttribute("filter")
                    }
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                    e.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.pulsate = function (b) {
        return this.queue(function () {
            var d = a(this);
            var g = a.effects.setMode(d, b.options.mode || "show");
            var f = b.options.times || 5;
            var e = b.duration ? b.duration / 2 : a.fx.speeds._default / 2;
            if (g == "hide") {
                f--
            }
            if (d.is(":hidden")) {
                d.css("opacity", 0);
                d.show();
                d.animate({opacity: 1}, e, b.options.easing);
                f = f - 2
            }
            for (var c = 0; c < f; c++) {
                d.animate({opacity: 0}, e, b.options.easing).animate({opacity: 1}, e, b.options.easing)
            }
            if (g == "hide") {
                d.animate({opacity: 0}, e, b.options.easing, function () {
                    d.hide();
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                })
            } else {
                d.animate({opacity: 0}, e, b.options.easing).animate({opacity: 1}, e, b.options.easing, function () {
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                })
            }
            d.queue("fx", function () {
                d.dequeue()
            });
            d.dequeue()
        })
    }
})(jQuery);
(function (a) {
    a.effects.puff = function (b) {
        return this.queue(function () {
            var f = a(this);
            var c = a.extend(true, {}, b.options);
            var h = a.effects.setMode(f, b.options.mode || "hide");
            var g = parseInt(b.options.percent, 10) || 150;
            c.fade = true;
            var e = {height: f.height(), width: f.width()};
            var d = g / 100;
            f.from = (h == "hide") ? e : {height: e.height * d, width: e.width * d};
            c.from = f.from;
            c.percent = (h == "hide") ? g : 100;
            c.mode = h;
            f.effect("scale", c, b.duration, b.callback);
            f.dequeue()
        })
    };
    a.effects.scale = function (b) {
        return this.queue(function () {
            var g = a(this);
            var d = a.extend(true, {}, b.options);
            var j = a.effects.setMode(g, b.options.mode || "effect");
            var h = parseInt(b.options.percent, 10) || (parseInt(b.options.percent, 10) == 0 ? 0 : (j == "hide" ? 0 : 100));
            var i = b.options.direction || "both";
            var c = b.options.origin;
            if (j != "effect") {
                d.origin = c || ["middle", "center"];
                d.restore = true
            }
            var f = {height: g.height(), width: g.width()};
            g.from = b.options.from || (j == "show" ? {height: 0, width: 0} : f);
            var e = {y: i != "horizontal" ? (h / 100) : 1, x: i != "vertical" ? (h / 100) : 1};
            g.to = {height: f.height * e.y, width: f.width * e.x};
            if (b.options.fade) {
                if (j == "show") {
                    g.from.opacity = 0;
                    g.to.opacity = 1
                }
                if (j == "hide") {
                    g.from.opacity = 1;
                    g.to.opacity = 0
                }
            }
            d.from = g.from;
            d.to = g.to;
            d.mode = j;
            g.effect("size", d, b.duration, b.callback);
            g.dequeue()
        })
    };
    a.effects.size = function (b) {
        return this.queue(function () {
            var c = a(this), n = ["position", "top", "left", "width", "height", "overflow", "opacity"];
            var m = ["position", "top", "left", "overflow", "opacity"];
            var j = ["width", "height", "overflow"];
            var p = ["fontSize"];
            var k = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"];
            var f = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"];
            var g = a.effects.setMode(c, b.options.mode || "effect");
            var i = b.options.restore || false;
            var e = b.options.scale || "both";
            var o = b.options.origin;
            var d = {height: c.height(), width: c.width()};
            c.from = b.options.from || d;
            c.to = b.options.to || d;
            if (o) {
                var h = a.effects.getBaseline(o, d);
                c.from.top = (d.height - c.from.height) * h.y;
                c.from.left = (d.width - c.from.width) * h.x;
                c.to.top = (d.height - c.to.height) * h.y;
                c.to.left = (d.width - c.to.width) * h.x
            }
            var l = {
                from: {y: c.from.height / d.height, x: c.from.width / d.width},
                to: {y: c.to.height / d.height, x: c.to.width / d.width}
            };
            if (e == "box" || e == "both") {
                if (l.from.y != l.to.y) {
                    n = n.concat(k);
                    c.from = a.effects.setTransition(c, k, l.from.y, c.from);
                    c.to = a.effects.setTransition(c, k, l.to.y, c.to)
                }
                if (l.from.x != l.to.x) {
                    n = n.concat(f);
                    c.from = a.effects.setTransition(c, f, l.from.x, c.from);
                    c.to = a.effects.setTransition(c, f, l.to.x, c.to)
                }
            }
            if (e == "content" || e == "both") {
                if (l.from.y != l.to.y) {
                    n = n.concat(p);
                    c.from = a.effects.setTransition(c, p, l.from.y, c.from);
                    c.to = a.effects.setTransition(c, p, l.to.y, c.to)
                }
            }
            a.effects.save(c, i ? n : m);
            c.show();
            a.effects.createWrapper(c);
            c.css("overflow", "hidden").css(c.from);
            if (e == "content" || e == "both") {
                k = k.concat(["marginTop", "marginBottom"]).concat(p);
                f = f.concat(["marginLeft", "marginRight"]);
                j = n.concat(k).concat(f);
                c.find("*[width]").each(function () {
                    child = a(this);
                    if (i) {
                        a.effects.save(child, j)
                    }
                    var q = {height: child.height(), width: child.width()};
                    child.from = {height: q.height * l.from.y, width: q.width * l.from.x};
                    child.to = {height: q.height * l.to.y, width: q.width * l.to.x};
                    if (l.from.y != l.to.y) {
                        child.from = a.effects.setTransition(child, k, l.from.y, child.from);
                        child.to = a.effects.setTransition(child, k, l.to.y, child.to)
                    }
                    if (l.from.x != l.to.x) {
                        child.from = a.effects.setTransition(child, f, l.from.x, child.from);
                        child.to = a.effects.setTransition(child, f, l.to.x, child.to)
                    }
                    child.css(child.from);
                    child.animate(child.to, b.duration, b.options.easing, function () {
                        if (i) {
                            a.effects.restore(child, j)
                        }
                    })
                })
            }
            c.animate(c.to, {
                queue: false, duration: b.duration, easing: b.options.easing, complete: function () {
                    if (g == "hide") {
                        c.hide()
                    }
                    a.effects.restore(c, i ? n : m);
                    a.effects.removeWrapper(c);
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                    c.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.shake = function (b) {
        return this.queue(function () {
            var e = a(this), l = ["position", "top", "left"];
            var k = a.effects.setMode(e, b.options.mode || "effect");
            var n = b.options.direction || "left";
            var c = b.options.distance || 20;
            var d = b.options.times || 3;
            var g = b.duration || b.options.duration || 140;
            a.effects.save(e, l);
            e.show();
            a.effects.createWrapper(e);
            var f = (n == "up" || n == "down") ? "top" : "left";
            var p = (n == "up" || n == "left") ? "pos" : "neg";
            var h = {}, o = {}, m = {};
            h[f] = (p == "pos" ? "-=" : "+=") + c;
            o[f] = (p == "pos" ? "+=" : "-=") + c * 2;
            m[f] = (p == "pos" ? "-=" : "+=") + c * 2;
            e.animate(h, g, b.options.easing);
            for (var j = 1; j < d; j++) {
                e.animate(o, g, b.options.easing).animate(m, g, b.options.easing)
            }
            e.animate(o, g, b.options.easing).animate(h, g / 2, b.options.easing, function () {
                a.effects.restore(e, l);
                a.effects.removeWrapper(e);
                if (b.callback) {
                    b.callback.apply(this, arguments)
                }
            });
            e.queue("fx", function () {
                e.dequeue()
            });
            e.dequeue()
        })
    }
})(jQuery);
(function (a) {
    a.effects.slide = function (b) {
        return this.queue(function () {
            var e = a(this), d = ["position", "top", "left"];
            var i = a.effects.setMode(e, b.options.mode || "show");
            var h = b.options.direction || "left";
            a.effects.save(e, d);
            e.show();
            a.effects.createWrapper(e).css({overflow: "hidden"});
            var f = (h == "up" || h == "down") ? "top" : "left";
            var c = (h == "up" || h == "left") ? "pos" : "neg";
            var j = b.options.distance || (f == "top" ? e.outerHeight({margin: true}) : e.outerWidth({margin: true}));
            if (i == "show") {
                e.css(f, c == "pos" ? -j : j)
            }
            var g = {};
            g[f] = (i == "show" ? (c == "pos" ? "+=" : "-=") : (c == "pos" ? "-=" : "+=")) + j;
            e.animate(g, {
                queue: false, duration: b.duration, easing: b.options.easing, complete: function () {
                    if (i == "hide") {
                        e.hide()
                    }
                    a.effects.restore(e, d);
                    a.effects.removeWrapper(e);
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                    e.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.transfer = function (b) {
        return this.queue(function () {
            var f = a(this), h = a(b.options.to), e = h.offset(),
                g = {top: e.top, left: e.left, height: h.innerHeight(), width: h.innerWidth()}, d = f.offset(),
                c = a('<div class="ui-effects-transfer"></div>').appendTo(document.body).addClass(b.options.className).css({
                    top: d.top,
                    left: d.left,
                    height: f.innerHeight(),
                    width: f.innerWidth(),
                    position: "absolute"
                }).animate(g, b.duration, b.options.easing, function () {
                    c.remove();
                    (b.callback && b.callback.apply(f[0], arguments));
                    f.dequeue()
                })
        })
    }
})(jQuery);
(function (a) {
    a.widget("ui.accordion", {
        _init: function () {
            var d = this.options, b = this;
            this.running = 0;
            if (d.collapsible == a.ui.accordion.defaults.collapsible && d.alwaysOpen != a.ui.accordion.defaults.alwaysOpen) {
                d.collapsible = !d.alwaysOpen
            }
            if (d.navigation) {
                var c = this.element.find("a").filter(d.navigationFilter);
                if (c.length) {
                    if (c.filter(d.header).length) {
                        this.active = c
                    } else {
                        this.active = c.parent().parent().prev();
                        c.addClass("ui-accordion-content-active")
                    }
                }
            }
            this.element.addClass("ui-accordion ui-widget ui-helper-reset");
            if (this.element[0].nodeName == "UL") {
                this.element.children("li").addClass("ui-accordion-li-fix")
            }
            this.headers = this.element.find(d.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all").bind("mouseenter.accordion", function () {
                a(this).addClass("ui-state-hover")
            }).bind("mouseleave.accordion", function () {
                a(this).removeClass("ui-state-hover")
            }).bind("focus.accordion", function () {
                a(this).addClass("ui-state-focus")
            }).bind("blur.accordion", function () {
                a(this).removeClass("ui-state-focus")
            });
            this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom");
            this.active = this._findActive(this.active || d.active).toggleClass("ui-state-default").toggleClass("ui-state-active").toggleClass("ui-corner-all").toggleClass("ui-corner-top");
            this.active.next().addClass("ui-accordion-content-active");
            a("<span/>").addClass("ui-icon " + d.icons.header).prependTo(this.headers);
            this.active.find(".ui-icon").toggleClass(d.icons.header).toggleClass(d.icons.headerSelected);
            if (a.browser.msie) {
                this.element.find("a").css("zoom", "1")
            }
            this.resize();
            this.element.attr("role", "tablist");
            this.headers.attr("role", "tab").bind("keydown", function (e) {
                return b._keydown(e)
            }).next().attr("role", "tabpanel");
            this.headers.not(this.active || "").attr("aria-expanded", "false").attr("tabIndex", "-1").next().hide();
            if (!this.active.length) {
                this.headers.eq(0).attr("tabIndex", "0")
            } else {
                this.active.attr("aria-expanded", "true").attr("tabIndex", "0")
            }
            if (!a.browser.safari) {
                this.headers.find("a").attr("tabIndex", "-1")
            }
            if (d.event) {
                this.headers.bind((d.event) + ".accordion", function (e) {
                    return b._clickHandler.call(b, e, this)
                })
            }
        }, destroy: function () {
            var c = this.options;
            this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role").unbind(".accordion").removeData("accordion");
            this.headers.unbind(".accordion").removeClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("tabindex");
            this.headers.find("a").removeAttr("tabindex");
            this.headers.children(".ui-icon").remove();
            var b = this.headers.next().css("display", "").removeAttr("role").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active");
            if (c.autoHeight || c.fillHeight) {
                b.css("height", "")
            }
        }, _setData: function (b, c) {
            if (b == "alwaysOpen") {
                b = "collapsible";
                c = !c
            }
            a.widget.prototype._setData.apply(this, arguments)
        }, _keydown: function (e) {
            var g = this.options, f = a.ui.keyCode;
            if (g.disabled || e.altKey || e.ctrlKey) {
                return
            }
            var d = this.headers.length;
            var b = this.headers.index(e.target);
            var c = false;
            switch (e.keyCode) {
                case f.RIGHT:
                case f.DOWN:
                    c = this.headers[(b + 1) % d];
                    break;
                case f.LEFT:
                case f.UP:
                    c = this.headers[(b - 1 + d) % d];
                    break;
                case f.SPACE:
                case f.ENTER:
                    return this._clickHandler({target: e.target}, e.target)
            }
            if (c) {
                a(e.target).attr("tabIndex", "-1");
                a(c).attr("tabIndex", "0");
                c.focus();
                return false
            }
            return true
        }, resize: function () {
            var e = this.options, d;
            if (e.fillSpace) {
                if (a.browser.msie) {
                    var b = this.element.parent().css("overflow");
                    this.element.parent().css("overflow", "hidden")
                }
                d = this.element.parent().height();
                if (a.browser.msie) {
                    this.element.parent().css("overflow", b)
                }
                this.headers.each(function () {
                    d -= a(this).outerHeight()
                });
                var c = 0;
                this.headers.next().each(function () {
                    c = Math.max(c, a(this).innerHeight() - a(this).height())
                }).height(Math.max(0, d - c)).css("overflow", "auto")
            } else {
                if (e.autoHeight) {
                    d = 0;
                    this.headers.next().each(function () {
                        d = Math.max(d, a(this).outerHeight())
                    }).height(d)
                }
            }
        }, activate: function (b) {
            var c = this._findActive(b)[0];
            this._clickHandler({target: c}, c)
        }, _findActive: function (b) {
            return b ? typeof b == "number" ? this.headers.filter(":eq(" + b + ")") : this.headers.not(this.headers.not(b)) : b === false ? a([]) : this.headers.filter(":eq(0)")
        }, _clickHandler: function (b, f) {
            var d = this.options;
            if (d.disabled) {
                return false
            }
            if (!b.target && d.collapsible) {
                this.active.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").find(".ui-icon").removeClass(d.icons.headerSelected).addClass(d.icons.header);
                this.active.next().addClass("ui-accordion-content-active");
                var h = this.active.next(),
                    e = {options: d, newHeader: a([]), oldHeader: d.active, newContent: a([]), oldContent: h},
                    c = (this.active = a([]));
                this._toggle(c, h, e);
                return false
            }
            var g = a(b.currentTarget || f);
            var i = g[0] == this.active[0];
            if (this.running || (!d.collapsible && i)) {
                return false
            }
            this.active.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").find(".ui-icon").removeClass(d.icons.headerSelected).addClass(d.icons.header);
            this.active.next().addClass("ui-accordion-content-active");
            if (!i) {
                g.removeClass("ui-state-default ui-corner-all").addClass("ui-state-active ui-corner-top").find(".ui-icon").removeClass(d.icons.header).addClass(d.icons.headerSelected);
                g.next().addClass("ui-accordion-content-active")
            }
            var c = g.next(), h = this.active.next(), e = {
                options: d,
                newHeader: i && d.collapsible ? a([]) : g,
                oldHeader: this.active,
                newContent: i && d.collapsible ? a([]) : c.find("> *"),
                oldContent: h.find("> *")
            }, j = this.headers.index(this.active[0]) > this.headers.index(g[0]);
            this.active = i ? a([]) : g;
            this._toggle(c, h, e, i, j);
            return false
        }, _toggle: function (b, i, g, j, k) {
            var d = this.options, m = this;
            this.toShow = b;
            this.toHide = i;
            this.data = g;
            var c = function () {
                if (!m) {
                    return
                }
                return m._completed.apply(m, arguments)
            };
            this._trigger("changestart", null, this.data);
            this.running = i.size() === 0 ? b.size() : i.size();
            if (d.animated) {
                var f = {};
                if (d.collapsible && j) {
                    f = {toShow: a([]), toHide: i, complete: c, down: k, autoHeight: d.autoHeight || d.fillSpace}
                } else {
                    f = {toShow: b, toHide: i, complete: c, down: k, autoHeight: d.autoHeight || d.fillSpace}
                }
                if (!d.proxied) {
                    d.proxied = d.animated
                }
                if (!d.proxiedDuration) {
                    d.proxiedDuration = d.duration
                }
                d.animated = a.isFunction(d.proxied) ? d.proxied(f) : d.proxied;
                d.duration = a.isFunction(d.proxiedDuration) ? d.proxiedDuration(f) : d.proxiedDuration;
                var l = a.ui.accordion.animations, e = d.duration, h = d.animated;
                if (!l[h]) {
                    l[h] = function (n) {
                        this.slide(n, {easing: h, duration: e || 700})
                    }
                }
                l[h](f)
            } else {
                if (d.collapsible && j) {
                    b.toggle()
                } else {
                    i.hide();
                    b.show()
                }
                c(true)
            }
            i.prev().attr("aria-expanded", "false").attr("tabIndex", "-1").blur();
            b.prev().attr("aria-expanded", "true").attr("tabIndex", "0").focus()
        }, _completed: function (b) {
            var c = this.options;
            this.running = b ? 0 : --this.running;
            if (this.running) {
                return
            }
            if (c.clearStyle) {
                this.toShow.add(this.toHide).css({height: "", overflow: ""})
            }
            this._trigger("change", null, this.data)
        }
    });
    a.extend(a.ui.accordion, {
        version: "1.7",
        defaults: {
            active: null,
            alwaysOpen: true,
            animated: "slide",
            autoHeight: true,
            clearStyle: false,
            collapsible: false,
            event: "click",
            fillSpace: false,
            header: "> li > :first-child,> :not(li):even",
            icons: {header: "ui-icon-triangle-1-e", headerSelected: "ui-icon-triangle-1-s"},
            navigation: false,
            navigationFilter: function () {
                return this.href.toLowerCase() == location.href.toLowerCase()
            }
        },
        animations: {
            slide: function (j, h) {
                j = a.extend({easing: "swing", duration: 300}, j, h);
                if (!j.toHide.size()) {
                    j.toShow.animate({height: "show"}, j);
                    return
                }
                if (!j.toShow.size()) {
                    j.toHide.animate({height: "hide"}, j);
                    return
                }
                var c = j.toShow.css("overflow"), g, d = {}, f = {}, e = ["height", "paddingTop", "paddingBottom"], b;
                var i = j.toShow;
                b = i[0].style.width;
                i.width(parseInt(i.parent().width(), 10) - parseInt(i.css("paddingLeft"), 10) - parseInt(i.css("paddingRight"), 10) - parseInt(i.css("borderLeftWidth"), 10) - parseInt(i.css("borderRightWidth"), 10));
                a.each(e, function (k, m) {
                    f[m] = "hide";
                    var l = ("" + a.css(j.toShow[0], m)).match(/^([\d+-.]+)(.*)$/);
                    d[m] = {value: l[1], unit: l[2] || "px"}
                });
                j.toShow.css({height: 0, overflow: "hidden"}).show();
                j.toHide.filter(":hidden").each(j.complete).end().filter(":visible").animate(f, {
                    step: function (k, l) {
                        if (l.prop == "height") {
                            g = (l.now - l.start) / (l.end - l.start)
                        }
                        j.toShow[0].style[l.prop] = (g * d[l.prop].value) + d[l.prop].unit
                    }, duration: j.duration, easing: j.easing, complete: function () {
                        if (!j.autoHeight) {
                            j.toShow.css("height", "")
                        }
                        j.toShow.css("width", b);
                        j.toShow.css({overflow: c});
                        j.complete()
                    }
                })
            }, bounceslide: function (b) {
                this.slide(b, {easing: b.down ? "easeOutBounce" : "swing", duration: b.down ? 1000 : 200})
            }, easeslide: function (b) {
                this.slide(b, {easing: "easeinout", duration: 700})
            }
        }
    })
})(jQuery);
(function ($) {
    $.extend($.ui, {datepicker: {version: "1.7"}});
    var PROP_NAME = "datepicker";

    function Datepicker() {
        this.debug = false;
        this._curInst = null;
        this._keyEvent = false;
        this._disabledInputs = [];
        this._datepickerShowing = false;
        this._inDialog = false;
        this._mainDivId = "ui-datepicker-div";
        this._inlineClass = "ui-datepicker-inline";
        this._appendClass = "ui-datepicker-append";
        this._triggerClass = "ui-datepicker-trigger";
        this._dialogClass = "ui-datepicker-dialog";
        this._disableClass = "ui-datepicker-disabled";
        this._unselectableClass = "ui-datepicker-unselectable";
        this._currentClass = "ui-datepicker-current-day";
        this._dayOverClass = "ui-datepicker-days-cell-over";
        this.regional = [];
        this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            dateFormat: "mm/dd/yy",
            firstDay: 0,
            isRTL: false
        };
        this._defaults = {
            showOn: "focus",
            showAnim: "show",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: false,
            hideIfNoPrevNext: false,
            navigationAsDateFormat: false,
            gotoCurrent: false,
            changeMonth: false,
            changeYear: false,
            showMonthAfterYear: false,
            yearRange: "-10:+10",
            showOtherMonths: false,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "normal",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: true,
            showButtonPanel: false
        };
        $.extend(this._defaults, this.regional[""]);
        this.dpDiv = $('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all ui-helper-hidden-accessible"></div>')
    }

    $.extend(Datepicker.prototype, {
        markerClassName: "hasDatepicker",
        log: function () {
            if (this.debug) {
                console.log.apply("", arguments)
            }
        },
        setDefaults: function (settings) {
            extendRemove(this._defaults, settings || {});
            return this
        },
        _attachDatepicker: function (target, settings) {
            var inlineSettings = null;
            for (var attrName in this._defaults) {
                var attrValue = target.getAttribute("date:" + attrName);
                if (attrValue) {
                    inlineSettings = inlineSettings || {};
                    try {
                        inlineSettings[attrName] = eval(attrValue)
                    } catch (err) {
                        inlineSettings[attrName] = attrValue
                    }
                }
            }
            var nodeName = target.nodeName.toLowerCase();
            var inline = (nodeName == "div" || nodeName == "span");
            if (!target.id) {
                target.id = "dp" + (++this.uuid)
            }
            var inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {}, inlineSettings || {});
            if (nodeName == "input") {
                this._connectDatepicker(target, inst)
            } else {
                if (inline) {
                    this._inlineDatepicker(target, inst)
                }
            }
        },
        _newInst: function (target, inline) {
            var id = target[0].id.replace(/([:\[\]\.])/g, "\\\\$1");
            return {
                id: id,
                input: target,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: inline,
                dpDiv: (!inline ? this.dpDiv : $('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'))
            }
        },
        _connectDatepicker: function (target, inst) {
            var input = $(target);
            if (input.hasClass(this.markerClassName)) {
                return
            }
            var appendText = this._get(inst, "appendText");
            var isRTL = this._get(inst, "isRTL");
            if (appendText) {
                input[isRTL ? "before" : "after"]('<span class="' + this._appendClass + '">' + appendText + "</span>")
            }
            var showOn = this._get(inst, "showOn");
            if (showOn == "focus" || showOn == "both") {
                input.focus(this._showDatepicker)
            }
            if (showOn == "button" || showOn == "both") {
                var buttonText = this._get(inst, "buttonText");
                var buttonImage = this._get(inst, "buttonImage");
                var trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                }) : $('<button type="button"></button>').addClass(this._triggerClass).html(buttonImage == "" ? buttonText : $("<img/>").attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                })));
                input[isRTL ? "before" : "after"](trigger);
                trigger.click(function () {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput == target) {
                        $.datepicker._hideDatepicker()
                    } else {
                        $.datepicker._showDatepicker(target)
                    }
                    return false
                })
            }
            input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).bind("setData.datepicker", function (event, key, value) {
                inst.settings[key] = value
            }).bind("getData.datepicker", function (event, key) {
                return this._get(inst, key)
            });
            $.data(target, PROP_NAME, inst)
        },
        _inlineDatepicker: function (target, inst) {
            var divSpan = $(target);
            if (divSpan.hasClass(this.markerClassName)) {
                return
            }
            divSpan.addClass(this.markerClassName).append(inst.dpDiv).bind("setData.datepicker", function (event, key, value) {
                inst.settings[key] = value
            }).bind("getData.datepicker", function (event, key) {
                return this._get(inst, key)
            });
            $.data(target, PROP_NAME, inst);
            this._setDate(inst, this._getDefaultDate(inst));
            this._updateDatepicker(inst);
            this._updateAlternate(inst)
        },
        _dialogDatepicker: function (input, dateText, onSelect, settings, pos) {
            var inst = this._dialogInst;
            if (!inst) {
                var id = "dp" + (++this.uuid);
                this._dialogInput = $('<input type="text" id="' + id + '" size="1" style="position: absolute; top: -100px;"/>');
                this._dialogInput.keydown(this._doKeyDown);
                $("body").append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                $.data(this._dialogInput[0], PROP_NAME, inst)
            }
            extendRemove(inst.settings, settings || {});
            this._dialogInput.val(dateText);
            this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
            if (!this._pos) {
                var browserWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
                var browserHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
                var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY]
            }
            this._dialogInput.css("left", this._pos[0] + "px").css("top", this._pos[1] + "px");
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if ($.blockUI) {
                $.blockUI(this.dpDiv)
            }
            $.data(this._dialogInput[0], PROP_NAME, inst);
            return this
        },
        _destroyDatepicker: function (target) {
            var $target = $(target);
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            var nodeName = target.nodeName.toLowerCase();
            $.removeData(target, PROP_NAME);
            if (nodeName == "input") {
                $target.siblings("." + this._appendClass).remove().end().siblings("." + this._triggerClass).remove().end().removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress)
            } else {
                if (nodeName == "div" || nodeName == "span") {
                    $target.removeClass(this.markerClassName).empty()
                }
            }
        },
        _enableDatepicker: function (target) {
            var $target = $(target);
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            var nodeName = target.nodeName.toLowerCase();
            if (nodeName == "input") {
                target.disabled = false;
                $target.siblings("button." + this._triggerClass).each(function () {
                    this.disabled = false
                }).end().siblings("img." + this._triggerClass).css({opacity: "1.0", cursor: ""})
            } else {
                if (nodeName == "div" || nodeName == "span") {
                    var inline = $target.children("." + this._inlineClass);
                    inline.children().removeClass("ui-state-disabled")
                }
            }
            this._disabledInputs = $.map(this._disabledInputs, function (value) {
                return (value == target ? null : value)
            })
        },
        _disableDatepicker: function (target) {
            var $target = $(target);
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            var nodeName = target.nodeName.toLowerCase();
            if (nodeName == "input") {
                target.disabled = true;
                $target.siblings("button." + this._triggerClass).each(function () {
                    this.disabled = true
                }).end().siblings("img." + this._triggerClass).css({opacity: "0.5", cursor: "default"})
            } else {
                if (nodeName == "div" || nodeName == "span") {
                    var inline = $target.children("." + this._inlineClass);
                    inline.children().addClass("ui-state-disabled")
                }
            }
            this._disabledInputs = $.map(this._disabledInputs, function (value) {
                return (value == target ? null : value)
            });
            this._disabledInputs[this._disabledInputs.length] = target
        },
        _isDisabledDatepicker: function (target) {
            if (!target) {
                return false
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] == target) {
                    return true
                }
            }
            return false
        },
        _getInst: function (target) {
            try {
                return $.data(target, PROP_NAME)
            } catch (err) {
                throw"Missing instance data for this datepicker"
            }
        },
        _optionDatepicker: function (target, name, value) {
            var settings = name || {};
            if (typeof name == "string") {
                settings = {};
                settings[name] = value
            }
            var inst = this._getInst(target);
            if (inst) {
                if (this._curInst == inst) {
                    this._hideDatepicker(null)
                }
                extendRemove(inst.settings, settings);
                var date = new Date();
                extendRemove(inst, {
                    rangeStart: null,
                    endDay: null,
                    endMonth: null,
                    endYear: null,
                    selectedDay: date.getDate(),
                    selectedMonth: date.getMonth(),
                    selectedYear: date.getFullYear(),
                    currentDay: date.getDate(),
                    currentMonth: date.getMonth(),
                    currentYear: date.getFullYear(),
                    drawMonth: date.getMonth(),
                    drawYear: date.getFullYear()
                });
                this._updateDatepicker(inst)
            }
        },
        _changeDatepicker: function (target, name, value) {
            this._optionDatepicker(target, name, value)
        },
        _refreshDatepicker: function (target) {
            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst)
            }
        },
        _setDateDatepicker: function (target, date, endDate) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date, endDate);
                this._updateDatepicker(inst);
                this._updateAlternate(inst)
            }
        },
        _getDateDatepicker: function (target) {
            var inst = this._getInst(target);
            if (inst && !inst.inline) {
                this._setDateFromField(inst)
            }
            return (inst ? this._getDate(inst) : null)
        },
        _doKeyDown: function (event) {
            var inst = $.datepicker._getInst(event.target);
            var handled = true;
            var isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
            inst._keyEvent = true;
            if ($.datepicker._datepickerShowing) {
                switch (event.keyCode) {
                    case 9:
                        $.datepicker._hideDatepicker(null, "");
                        break;
                    case 13:
                        var sel = $("td." + $.datepicker._dayOverClass + ", td." + $.datepicker._currentClass, inst.dpDiv);
                        if (sel[0]) {
                            $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0])
                        } else {
                            $.datepicker._hideDatepicker(null, $.datepicker._get(inst, "duration"))
                        }
                        return false;
                        break;
                    case 27:
                        $.datepicker._hideDatepicker(null, $.datepicker._get(inst, "duration"));
                        break;
                    case 33:
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths")), "M");
                        break;
                    case 34:
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths")), "M");
                        break;
                    case 35:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._clearDate(event.target)
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    case 36:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._gotoToday(event.target)
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    case 37:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D")
                        }
                        handled = event.ctrlKey || event.metaKey;
                        if (event.originalEvent.altKey) {
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths")), "M")
                        }
                        break;
                    case 38:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, -7, "D")
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    case 39:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D")
                        }
                        handled = event.ctrlKey || event.metaKey;
                        if (event.originalEvent.altKey) {
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths")), "M")
                        }
                        break;
                    case 40:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, +7, "D")
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break;
                    default:
                        handled = false
                }
            } else {
                if (event.keyCode == 36 && event.ctrlKey) {
                    $.datepicker._showDatepicker(this)
                } else {
                    handled = false
                }
            }
            if (handled) {
                event.preventDefault();
                event.stopPropagation()
            }
        },
        _doKeyPress: function (event) {
            var inst = $.datepicker._getInst(event.target);
            if ($.datepicker._get(inst, "constrainInput")) {
                var chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
                var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
                return event.ctrlKey || (chr < " " || !chars || chars.indexOf(chr) > -1)
            }
        },
        _showDatepicker: function (input) {
            input = input.target || input;
            if (input.nodeName.toLowerCase() != "input") {
                input = $("input", input.parentNode)[0]
            }
            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) {
                return
            }
            var inst = $.datepicker._getInst(input);
            var beforeShow = $.datepicker._get(inst, "beforeShow");
            extendRemove(inst.settings, (beforeShow ? beforeShow.apply(input, [input, inst]) : {}));
            $.datepicker._hideDatepicker(null, "");
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField(inst);
            if ($.datepicker._inDialog) {
                input.value = ""
            }
            if (!$.datepicker._pos) {
                $.datepicker._pos = $.datepicker._findPos(input);
                $.datepicker._pos[1] += input.offsetHeight
            }
            var isFixed = false;
            $(input).parents().each(function () {
                isFixed |= $(this).css("position") == "fixed";
                return !isFixed
            });
            if (isFixed && $.browser.opera) {
                $.datepicker._pos[0] -= document.documentElement.scrollLeft;
                $.datepicker._pos[1] -= document.documentElement.scrollTop
            }
            var offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
            $.datepicker._pos = null;
            inst.rangeStart = null;
            inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
            $.datepicker._updateDatepicker(inst);
            offset = $.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.css({
                position: ($.datepicker._inDialog && $.blockUI ? "static" : (isFixed ? "fixed" : "absolute")),
                display: "none",
                left: offset.left + "px",
                top: offset.top + "px"
            });
            if (!inst.inline) {
                var showAnim = $.datepicker._get(inst, "showAnim") || "show";
                var duration = $.datepicker._get(inst, "duration");
                var postProcess = function () {
                    $.datepicker._datepickerShowing = true;
                    if ($.browser.msie && parseInt($.browser.version, 10) < 7) {
                        $("iframe.ui-datepicker-cover").css({
                            width: inst.dpDiv.width() + 4,
                            height: inst.dpDiv.height() + 4
                        })
                    }
                };
                if ($.effects && $.effects[showAnim]) {
                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess)
                } else {
                    inst.dpDiv[showAnim](duration, postProcess)
                }
                if (duration == "") {
                    postProcess()
                }
                if (inst.input[0].type != "hidden") {
                    inst.input[0].focus()
                }
                $.datepicker._curInst = inst
            }
        },
        _updateDatepicker: function (inst) {
            var dims = {width: inst.dpDiv.width() + 4, height: inst.dpDiv.height() + 4};
            var self = this;
            inst.dpDiv.empty().append(this._generateHTML(inst)).find("iframe.ui-datepicker-cover").css({
                width: dims.width,
                height: dims.height
            }).end().find("button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a").bind("mouseout", function () {
                $(this).removeClass("ui-state-hover");
                if (this.className.indexOf("ui-datepicker-prev") != -1) {
                    $(this).removeClass("ui-datepicker-prev-hover")
                }
                if (this.className.indexOf("ui-datepicker-next") != -1) {
                    $(this).removeClass("ui-datepicker-next-hover")
                }
            }).bind("mouseover", function () {
                if (!self._isDisabledDatepicker(inst.inline ? inst.dpDiv.parent()[0] : inst.input[0])) {
                    $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
                    $(this).addClass("ui-state-hover");
                    if (this.className.indexOf("ui-datepicker-prev") != -1) {
                        $(this).addClass("ui-datepicker-prev-hover")
                    }
                    if (this.className.indexOf("ui-datepicker-next") != -1) {
                        $(this).addClass("ui-datepicker-next-hover")
                    }
                }
            }).end().find("." + this._dayOverClass + " a").trigger("mouseover").end();
            var numMonths = this._getNumberOfMonths(inst);
            var cols = numMonths[1];
            var width = 17;
            if (cols > 1) {
                inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em")
            } else {
                inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("")
            }
            inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
            inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
            if (inst.input && inst.input[0].type != "hidden" && inst == $.datepicker._curInst) {
                $(inst.input[0]).focus()
            }
        },
        _checkOffset: function (inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth();
            var dpHeight = inst.dpDiv.outerHeight();
            var inputWidth = inst.input ? inst.input.outerWidth() : 0;
            var inputHeight = inst.input ? inst.input.outerHeight() : 0;
            var viewWidth = (window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) + $(document).scrollLeft();
            var viewHeight = (window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight) + $(document).scrollTop();
            offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
            offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
            offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;
            offset.left -= (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ? Math.abs(offset.left + dpWidth - viewWidth) : 0;
            offset.top -= (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ? Math.abs(offset.top + dpHeight + inputHeight * 2 - viewHeight) : 0;
            return offset
        },
        _findPos: function (obj) {
            while (obj && (obj.type == "hidden" || obj.nodeType != 1)) {
                obj = obj.nextSibling
            }
            var position = $(obj).offset();
            return [position.left, position.top]
        },
        _hideDatepicker: function (input, duration) {
            var inst = this._curInst;
            if (!inst || (input && inst != $.data(input, PROP_NAME))) {
                return
            }
            if (inst.stayOpen) {
                this._selectDate("#" + inst.id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear))
            }
            inst.stayOpen = false;
            if (this._datepickerShowing) {
                duration = (duration != null ? duration : this._get(inst, "duration"));
                var showAnim = this._get(inst, "showAnim");
                var postProcess = function () {
                    $.datepicker._tidyDialog(inst)
                };
                if (duration != "" && $.effects && $.effects[showAnim]) {
                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess)
                } else {
                    inst.dpDiv[(duration == "" ? "hide" : (showAnim == "slideDown" ? "slideUp" : (showAnim == "fadeIn" ? "fadeOut" : "hide")))](duration, postProcess)
                }
                if (duration == "") {
                    this._tidyDialog(inst)
                }
                var onClose = this._get(inst, "onClose");
                if (onClose) {
                    onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst])
                }
                this._datepickerShowing = false;
                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({position: "absolute", left: "0", top: "-100px"});
                    if ($.blockUI) {
                        $.unblockUI();
                        $("body").append(this.dpDiv)
                    }
                }
                this._inDialog = false
            }
            this._curInst = null
        },
        _tidyDialog: function (inst) {
            inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")
        },
        _checkExternalClick: function (event) {
            if (!$.datepicker._curInst) {
                return
            }
            var $target = $(event.target);
            if (($target.parents("#" + $.datepicker._mainDivId).length == 0) && !$target.hasClass($.datepicker.markerClassName) && !$target.hasClass($.datepicker._triggerClass) && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI)) {
                $.datepicker._hideDatepicker(null, "")
            }
        },
        _adjustDate: function (id, offset, period) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (this._isDisabledDatepicker(target[0])) {
                return
            }
            this._adjustInstDate(inst, offset + (period == "M" ? this._get(inst, "showCurrentAtPos") : 0), period);
            this._updateDatepicker(inst)
        },
        _gotoToday: function (id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (this._get(inst, "gotoCurrent") && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear
            } else {
                var date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear()
            }
            this._notifyChange(inst);
            this._adjustDate(target)
        },
        _selectMonthYear: function (id, select, period) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            inst._selectingMonthYear = false;
            inst["selected" + (period == "M" ? "Month" : "Year")] = inst["draw" + (period == "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
            this._notifyChange(inst);
            this._adjustDate(target)
        },
        _clickMonthYear: function (id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (inst.input && inst._selectingMonthYear && !$.browser.msie) {
                inst.input[0].focus()
            }
            inst._selectingMonthYear = !inst._selectingMonthYear
        },
        _selectDay: function (id, month, year, td) {
            var target = $(id);
            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                return
            }
            var inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $("a", td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            if (inst.stayOpen) {
                inst.endDay = inst.endMonth = inst.endYear = null
            }
            this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
            if (inst.stayOpen) {
                inst.rangeStart = this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
                this._updateDatepicker(inst)
            }
        },
        _clearDate: function (id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            inst.stayOpen = false;
            inst.endDay = inst.endMonth = inst.endYear = inst.rangeStart = null;
            this._selectDate(target, "")
        },
        _selectDate: function (id, dateStr) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
            if (inst.input) {
                inst.input.val(dateStr)
            }
            this._updateAlternate(inst);
            var onSelect = this._get(inst, "onSelect");
            if (onSelect) {
                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst])
            } else {
                if (inst.input) {
                    inst.input.trigger("change")
                }
            }
            if (inst.inline) {
                this._updateDatepicker(inst)
            } else {
                if (!inst.stayOpen) {
                    this._hideDatepicker(null, this._get(inst, "duration"));
                    this._lastInput = inst.input[0];
                    if (typeof (inst.input[0]) != "object") {
                        inst.input[0].focus()
                    }
                    this._lastInput = null
                }
            }
        },
        _updateAlternate: function (inst) {
            var altField = this._get(inst, "altField");
            if (altField) {
                var altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
                var date = this._getDate(inst);
                dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).each(function () {
                    $(this).val(dateStr)
                })
            }
        },
        noWeekends: function (date) {
            var day = date.getDay();
            return [(day > 0 && day < 6), ""]
        },
        iso8601Week: function (date) {
            var checkDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            var firstMon = new Date(checkDate.getFullYear(), 1 - 1, 4);
            var firstDay = firstMon.getDay() || 7;
            firstMon.setDate(firstMon.getDate() + 1 - firstDay);
            if (firstDay < 4 && checkDate < firstMon) {
                checkDate.setDate(checkDate.getDate() - 3);
                return $.datepicker.iso8601Week(checkDate)
            } else {
                if (checkDate > new Date(checkDate.getFullYear(), 12 - 1, 28)) {
                    firstDay = new Date(checkDate.getFullYear() + 1, 1 - 1, 4).getDay() || 7;
                    if (firstDay > 4 && (checkDate.getDay() || 7) < firstDay - 3) {
                        return 1
                    }
                }
            }
            return Math.floor(((checkDate - firstMon) / 86400000) / 7) + 1
        },
        parseDate: function (format, value, settings) {
            if (format == null || value == null) {
                throw"Invalid arguments"
            }
            value = (typeof value == "object" ? value.toString() : value + "");
            if (value == "") {
                return null
            }
            var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
            var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
            var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
            var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
            var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
            var year = -1;
            var month = -1;
            var day = -1;
            var doy = -1;
            var literal = false;
            var lookAhead = function (match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                if (matches) {
                    iFormat++
                }
                return matches
            };
            var getNumber = function (match) {
                lookAhead(match);
                var origSize = (match == "@" ? 14 : (match == "y" ? 4 : (match == "o" ? 3 : 2)));
                var size = origSize;
                var num = 0;
                while (size > 0 && iValue < value.length && value.charAt(iValue) >= "0" && value.charAt(iValue) <= "9") {
                    num = num * 10 + parseInt(value.charAt(iValue++), 10);
                    size--
                }
                if (size == origSize) {
                    throw"Missing number at position " + iValue
                }
                return num
            };
            var getName = function (match, shortNames, longNames) {
                var names = (lookAhead(match) ? longNames : shortNames);
                var size = 0;
                for (var j = 0; j < names.length; j++) {
                    size = Math.max(size, names[j].length)
                }
                var name = "";
                var iInit = iValue;
                while (size > 0 && iValue < value.length) {
                    name += value.charAt(iValue++);
                    for (var i = 0; i < names.length; i++) {
                        if (name == names[i]) {
                            return i + 1
                        }
                    }
                    size--
                }
                throw"Unknown name at position " + iInit
            };
            var checkLiteral = function () {
                if (value.charAt(iValue) != format.charAt(iFormat)) {
                    throw"Unexpected literal at position " + iValue
                }
                iValue++
            };
            var iValue = 0;
            for (var iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) == "'" && !lookAhead("'")) {
                        literal = false
                    } else {
                        checkLiteral()
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                        case"d":
                            day = getNumber("d");
                            break;
                        case"D":
                            getName("D", dayNamesShort, dayNames);
                            break;
                        case"o":
                            doy = getNumber("o");
                            break;
                        case"m":
                            month = getNumber("m");
                            break;
                        case"M":
                            month = getName("M", monthNamesShort, monthNames);
                            break;
                        case"y":
                            year = getNumber("y");
                            break;
                        case"@":
                            var date = new Date(getNumber("@"));
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case"'":
                            if (lookAhead("'")) {
                                checkLiteral()
                            } else {
                                literal = true
                            }
                            break;
                        default:
                            checkLiteral()
                    }
                }
            }
            if (year == -1) {
                year = new Date().getFullYear()
            } else {
                if (year < 100) {
                    year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100)
                }
            }
            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    var dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim) {
                        break
                    }
                    month++;
                    day -= dim
                } while (true)
            }
            var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day) {
                throw"Invalid date"
            }
            return date
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        formatDate: function (format, date, settings) {
            if (!date) {
                return ""
            }
            var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
            var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
            var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
            var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
            var lookAhead = function (match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                if (matches) {
                    iFormat++
                }
                return matches
            };
            var formatNumber = function (match, value, len) {
                var num = "" + value;
                if (lookAhead(match)) {
                    while (num.length < len) {
                        num = "0" + num
                    }
                }
                return num
            };
            var formatName = function (match, value, shortNames, longNames) {
                return (lookAhead(match) ? longNames[value] : shortNames[value])
            };
            var output = "";
            var literal = false;
            if (date) {
                for (var iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) == "'" && !lookAhead("'")) {
                            literal = false
                        } else {
                            output += format.charAt(iFormat)
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                            case"d":
                                output += formatNumber("d", date.getDate(), 2);
                                break;
                            case"D":
                                output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                                break;
                            case"o":
                                var doy = date.getDate();
                                for (var m = date.getMonth() - 1; m >= 0; m--) {
                                    doy += this._getDaysInMonth(date.getFullYear(), m)
                                }
                                output += formatNumber("o", doy, 3);
                                break;
                            case"m":
                                output += formatNumber("m", date.getMonth() + 1, 2);
                                break;
                            case"M":
                                output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                                break;
                            case"y":
                                output += (lookAhead("y") ? date.getFullYear() : (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
                                break;
                            case"@":
                                output += date.getTime();
                                break;
                            case"'":
                                if (lookAhead("'")) {
                                    output += "'"
                                } else {
                                    literal = true
                                }
                                break;
                            default:
                                output += format.charAt(iFormat)
                        }
                    }
                }
            }
            return output
        },
        _possibleChars: function (format) {
            var chars = "";
            var literal = false;
            for (var iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) == "'" && !lookAhead("'")) {
                        literal = false
                    } else {
                        chars += format.charAt(iFormat)
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                        case"d":
                        case"m":
                        case"y":
                        case"@":
                            chars += "0123456789";
                            break;
                        case"D":
                        case"M":
                            return null;
                        case"'":
                            if (lookAhead("'")) {
                                chars += "'"
                            } else {
                                literal = true
                            }
                            break;
                        default:
                            chars += format.charAt(iFormat)
                    }
                }
            }
            return chars
        },
        _get: function (inst, name) {
            return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name]
        },
        _setDateFromField: function (inst) {
            var dateFormat = this._get(inst, "dateFormat");
            var dates = inst.input ? inst.input.val() : null;
            inst.endDay = inst.endMonth = inst.endYear = null;
            var date = defaultDate = this._getDefaultDate(inst);
            var settings = this._getFormatConfig(inst);
            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate
            } catch (event) {
                this.log(event);
                date = defaultDate
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = (dates ? date.getDate() : 0);
            inst.currentMonth = (dates ? date.getMonth() : 0);
            inst.currentYear = (dates ? date.getFullYear() : 0);
            this._adjustInstDate(inst)
        },
        _getDefaultDate: function (inst) {
            var date = this._determineDate(this._get(inst, "defaultDate"), new Date());
            var minDate = this._getMinMaxDate(inst, "min", true);
            var maxDate = this._getMinMaxDate(inst, "max");
            date = (minDate && date < minDate ? minDate : date);
            date = (maxDate && date > maxDate ? maxDate : date);
            return date
        },
        _determineDate: function (date, defaultDate) {
            var offsetNumeric = function (offset) {
                var date = new Date();
                date.setDate(date.getDate() + offset);
                return date
            };
            var offsetString = function (offset, getDaysInMonth) {
                var date = new Date();
                var year = date.getFullYear();
                var month = date.getMonth();
                var day = date.getDate();
                var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
                var matches = pattern.exec(offset);
                while (matches) {
                    switch (matches[2] || "d") {
                        case"d":
                        case"D":
                            day += parseInt(matches[1], 10);
                            break;
                        case"w":
                        case"W":
                            day += parseInt(matches[1], 10) * 7;
                            break;
                        case"m":
                        case"M":
                            month += parseInt(matches[1], 10);
                            day = Math.min(day, getDaysInMonth(year, month));
                            break;
                        case"y":
                        case"Y":
                            year += parseInt(matches[1], 10);
                            day = Math.min(day, getDaysInMonth(year, month));
                            break
                    }
                    matches = pattern.exec(offset)
                }
                return new Date(year, month, day)
            };
            date = (date == null ? defaultDate : (typeof date == "string" ? offsetString(date, this._getDaysInMonth) : (typeof date == "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : date)));
            date = (date && date.toString() == "Invalid Date" ? defaultDate : date);
            if (date) {
                date.setHours(0);
                date.setMinutes(0);
                date.setSeconds(0);
                date.setMilliseconds(0)
            }
            return this._daylightSavingAdjust(date)
        },
        _daylightSavingAdjust: function (date) {
            if (!date) {
                return null
            }
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date
        },
        _setDate: function (inst, date, endDate) {
            var clear = !(date);
            var origMonth = inst.selectedMonth;
            var origYear = inst.selectedYear;
            date = this._determineDate(date, new Date());
            inst.selectedDay = inst.currentDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = date.getFullYear();
            if (origMonth != inst.selectedMonth || origYear != inst.selectedYear) {
                this._notifyChange(inst)
            }
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.val(clear ? "" : this._formatDate(inst))
            }
        },
        _getDate: function (inst) {
            var startDate = (!inst.currentYear || (inst.input && inst.input.val() == "") ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return startDate
        },
        _generateHTML: function (inst) {
            var today = new Date();
            today = this._daylightSavingAdjust(new Date(today.getFullYear(), today.getMonth(), today.getDate()));
            var isRTL = this._get(inst, "isRTL");
            var showButtonPanel = this._get(inst, "showButtonPanel");
            var hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext");
            var navigationAsDateFormat = this._get(inst, "navigationAsDateFormat");
            var numMonths = this._getNumberOfMonths(inst);
            var showCurrentAtPos = this._get(inst, "showCurrentAtPos");
            var stepMonths = this._get(inst, "stepMonths");
            var stepBigMonths = this._get(inst, "stepBigMonths");
            var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
            var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            var minDate = this._getMinMaxDate(inst, "min", true);
            var maxDate = this._getMinMaxDate(inst, "max");
            var drawMonth = inst.drawMonth - showCurrentAtPos;
            var drawYear = inst.drawYear;
            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--
            }
            if (maxDate) {
                var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[1] + 1, maxDate.getDate()));
                maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;
            var prevText = this._get(inst, "prevText");
            prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst)));
            var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? '<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery.datepicker._adjustDate(\'#' + inst.id + "', -" + stepMonths + ", 'M');\" title=\"" + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "e" : "w") + '">' + prevText + "</span></a>" : (hideIfNoPrevNext ? "" : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "e" : "w") + '">' + prevText + "</span></a>"));
            var nextText = this._get(inst, "nextText");
            nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst)));
            var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? '<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery.datepicker._adjustDate(\'#' + inst.id + "', +" + stepMonths + ", 'M');\" title=\"" + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "w" : "e") + '">' + nextText + "</span></a>" : (hideIfNoPrevNext ? "" : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "w" : "e") + '">' + nextText + "</span></a>"));
            var currentText = this._get(inst, "currentText");
            var gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
            currentText = (!navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
            var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery.datepicker._hideDatepicker();">' + this._get(inst, "closeText") + "</button>" : "");
            var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery.datepicker._gotoToday(\'#' + inst.id + "');\">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
            var firstDay = parseInt(this._get(inst, "firstDay"), 10);
            firstDay = (isNaN(firstDay) ? 0 : firstDay);
            var dayNames = this._get(inst, "dayNames");
            var dayNamesShort = this._get(inst, "dayNamesShort");
            var dayNamesMin = this._get(inst, "dayNamesMin");
            var monthNames = this._get(inst, "monthNames");
            var monthNamesShort = this._get(inst, "monthNamesShort");
            var beforeShowDay = this._get(inst, "beforeShowDay");
            var showOtherMonths = this._get(inst, "showOtherMonths");
            var calculateWeek = this._get(inst, "calculateWeek") || this.iso8601Week;
            var endDate = inst.endDay ? this._daylightSavingAdjust(new Date(inst.endYear, inst.endMonth, inst.endDay)) : currentDate;
            var defaultDate = this._getDefaultDate(inst);
            var html = "";
            for (var row = 0; row < numMonths[0]; row++) {
                var group = "";
                for (var col = 0; col < numMonths[1]; col++) {
                    var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    var cornerClass = " ui-corner-all";
                    var calender = "";
                    if (isMultiMonth) {
                        calender += '<div class="ui-datepicker-group ui-datepicker-group-';
                        switch (col) {
                            case 0:
                                calender += "first";
                                cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
                                break;
                            case numMonths[1] - 1:
                                calender += "last";
                                cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
                                break;
                            default:
                                calender += "middle";
                                cornerClass = "";
                                break
                        }
                        calender += '">'
                    }
                    calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' + (/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : "") + (/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, selectedDate, row > 0 || col > 0, monthNames, monthNamesShort) + '</div><table class="ui-datepicker-calendar"><thead><tr>';
                    var thead = "";
                    for (var dow = 0; dow < 7; dow++) {
                        var day = (dow + firstDay) % 7;
                        thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : "") + '><span title="' + dayNames[day] + '">' + dayNamesMin[day] + "</span></th>"
                    }
                    calender += thead + "</tr></thead><tbody>";
                    var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth) {
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth)
                    }
                    var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    var numRows = (isMultiMonth ? 6 : Math.ceil((leadDays + daysInMonth) / 7));
                    var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (var dRow = 0; dRow < numRows; dRow++) {
                        calender += "<tr>";
                        var tbody = "";
                        for (var dow = 0; dow < 7; dow++) {
                            var daySettings = (beforeShowDay ? beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
                            var otherMonth = (printDate.getMonth() != drawMonth);
                            var unselectable = otherMonth || !daySettings[0] || (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                            tbody += '<td class="' + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (otherMonth ? " ui-datepicker-other-month" : "") + ((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || (defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ? " " + this._dayOverClass : "") + (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + (printDate.getTime() >= currentDate.getTime() && printDate.getTime() <= endDate.getTime() ? " " + this._currentClass : "") + (printDate.getTime() == today.getTime() ? " ui-datepicker-today" : "")) + '"' + ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : "") + (unselectable ? "" : " onclick=\"DP_jQuery.datepicker._selectDay('#" + inst.id + "'," + drawMonth + "," + drawYear + ', this);return false;"') + ">" + (otherMonth ? (showOtherMonths ? printDate.getDate() : "&#xa0;") : (unselectable ? '<span class="ui-state-default">' + printDate.getDate() + "</span>" : '<a class="ui-state-default' + (printDate.getTime() == today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() >= currentDate.getTime() && printDate.getTime() <= endDate.getTime() ? " ui-state-active" : "") + '" href="#">' + printDate.getDate() + "</a>")) + "</td>";
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate)
                        }
                        calender += tbody + "</tr>"
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++
                    }
                    calender += "</tbody></table>" + (isMultiMonth ? "</div>" + ((numMonths[0] > 0 && col == numMonths[1] - 1) ? '<div class="ui-datepicker-row-break"></div>' : "") : "");
                    group += calender
                }
                html += group
            }
            html += buttonPanel + ($.browser.msie && parseInt($.browser.version, 10) < 7 && !inst.inline ? '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : "");
            inst._keyEvent = false;
            return html
        },
        _generateMonthYearHeader: function (inst, drawMonth, drawYear, minDate, maxDate, selectedDate, secondary, monthNames, monthNamesShort) {
            minDate = (inst.rangeStart && minDate && selectedDate < minDate ? selectedDate : minDate);
            var changeMonth = this._get(inst, "changeMonth");
            var changeYear = this._get(inst, "changeYear");
            var showMonthAfterYear = this._get(inst, "showMonthAfterYear");
            var html = '<div class="ui-datepicker-title">';
            var monthHtml = "";
            if (secondary || !changeMonth) {
                monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + "</span> "
            } else {
                var inMinYear = (minDate && minDate.getFullYear() == drawYear);
                var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
                monthHtml += '<select class="ui-datepicker-month" onchange="DP_jQuery.datepicker._selectMonthYear(\'#' + inst.id + "', this, 'M');\" onclick=\"DP_jQuery.datepicker._clickMonthYear('#" + inst.id + "');\">";
                for (var month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                        monthHtml += '<option value="' + month + '"' + (month == drawMonth ? ' selected="selected"' : "") + ">" + monthNamesShort[month] + "</option>"
                    }
                }
                monthHtml += "</select>"
            }
            if (!showMonthAfterYear) {
                html += monthHtml + ((secondary || changeMonth || changeYear) && (!(changeMonth && changeYear)) ? "&#xa0;" : "")
            }
            if (secondary || !changeYear) {
                html += '<span class="ui-datepicker-year">' + drawYear + "</span>"
            } else {
                var years = this._get(inst, "yearRange").split(":");
                var year = 0;
                var endYear = 0;
                if (years.length != 2) {
                    year = drawYear - 10;
                    endYear = drawYear + 10
                } else {
                    if (years[0].charAt(0) == "+" || years[0].charAt(0) == "-") {
                        year = drawYear + parseInt(years[0], 10);
                        endYear = drawYear + parseInt(years[1], 10)
                    } else {
                        year = parseInt(years[0], 10);
                        endYear = parseInt(years[1], 10)
                    }
                }
                year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                html += '<select class="ui-datepicker-year" onchange="DP_jQuery.datepicker._selectMonthYear(\'#' + inst.id + "', this, 'Y');\" onclick=\"DP_jQuery.datepicker._clickMonthYear('#" + inst.id + "');\">";
                for (; year <= endYear; year++) {
                    html += '<option value="' + year + '"' + (year == drawYear ? ' selected="selected"' : "") + ">" + year + "</option>"
                }
                html += "</select>"
            }
            if (showMonthAfterYear) {
                html += (secondary || changeMonth || changeYear ? "&#xa0;" : "") + monthHtml
            }
            html += "</div>";
            return html
        },
        _adjustInstDate: function (inst, offset, period) {
            var year = inst.drawYear + (period == "Y" ? offset : 0);
            var month = inst.drawMonth + (period == "M" ? offset : 0);
            var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period == "D" ? offset : 0);
            var date = this._daylightSavingAdjust(new Date(year, month, day));
            var minDate = this._getMinMaxDate(inst, "min", true);
            var maxDate = this._getMinMaxDate(inst, "max");
            date = (minDate && date < minDate ? minDate : date);
            date = (maxDate && date > maxDate ? maxDate : date);
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period == "M" || period == "Y") {
                this._notifyChange(inst)
            }
        },
        _notifyChange: function (inst) {
            var onChange = this._get(inst, "onChangeMonthYear");
            if (onChange) {
                onChange.apply((inst.input ? inst.input[0] : null), [inst.selectedYear, inst.selectedMonth + 1, inst])
            }
        },
        _getNumberOfMonths: function (inst) {
            var numMonths = this._get(inst, "numberOfMonths");
            return (numMonths == null ? [1, 1] : (typeof numMonths == "number" ? [1, numMonths] : numMonths))
        },
        _getMinMaxDate: function (inst, minMax, checkRange) {
            var date = this._determineDate(this._get(inst, minMax + "Date"), null);
            return (!checkRange || !inst.rangeStart ? date : (!date || inst.rangeStart > date ? inst.rangeStart : date))
        },
        _getDaysInMonth: function (year, month) {
            return 32 - new Date(year, month, 32).getDate()
        },
        _getFirstDayOfMonth: function (year, month) {
            return new Date(year, month, 1).getDay()
        },
        _canAdjustMonth: function (inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst);
            var date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[1]), 1));
            if (offset < 0) {
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()))
            }
            return this._isInRange(inst, date)
        },
        _isInRange: function (inst, date) {
            var newMinDate = (!inst.rangeStart ? null : this._daylightSavingAdjust(new Date(inst.selectedYear, inst.selectedMonth, inst.selectedDay)));
            newMinDate = (newMinDate && inst.rangeStart < newMinDate ? inst.rangeStart : newMinDate);
            var minDate = newMinDate || this._getMinMaxDate(inst, "min");
            var maxDate = this._getMinMaxDate(inst, "max");
            return ((!minDate || date >= minDate) && (!maxDate || date <= maxDate))
        },
        _getFormatConfig: function (inst) {
            var shortYearCutoff = this._get(inst, "shortYearCutoff");
            shortYearCutoff = (typeof shortYearCutoff != "string" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
            return {
                shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, "dayNamesShort"),
                dayNames: this._get(inst, "dayNames"),
                monthNamesShort: this._get(inst, "monthNamesShort"),
                monthNames: this._get(inst, "monthNames")
            }
        },
        _formatDate: function (inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear
            }
            var date = (day ? (typeof day == "object" ? day : this._daylightSavingAdjust(new Date(year, month, day))) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst))
        }
    });

    function extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props) {
            if (props[name] == null || props[name] == undefined) {
                target[name] = props[name]
            }
        }
        return target
    }

    function isArray(a) {
        return (a && (($.browser.safari && typeof a == "object" && a.length) || (a.constructor && a.constructor.toString().match(/\Array\(\)/))))
    }

    $.fn.datepicker = function (options) {
        if (!$.datepicker.initialized) {
            $(document).mousedown($.datepicker._checkExternalClick).find("body").append($.datepicker.dpDiv);
            $.datepicker.initialized = true
        }
        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options == "string" && (options == "isDisabled" || options == "getDate")) {
            return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs))
        }
        return this.each(function () {
            typeof options == "string" ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options)
        })
    };
    $.datepicker = new Datepicker();
    $.datepicker.initialized = false;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = "1.7";
    window.DP_jQuery = $
})(jQuery);
(function (c) {
    var b = {
        dragStart: "start.draggable",
        drag: "drag.draggable",
        dragStop: "stop.draggable",
        maxHeight: "maxHeight.resizable",
        minHeight: "minHeight.resizable",
        maxWidth: "maxWidth.resizable",
        minWidth: "minWidth.resizable",
        resizeStart: "start.resizable",
        resize: "drag.resizable",
        resizeStop: "stop.resizable"
    }, a = "ui-dialog ui-widget ui-widget-content ui-corner-all ";
    c.widget("ui.dialog", {
        _init: function () {
            this.originalTitle = this.element.attr("title");
            var l = this, m = this.options, j = m.title || this.originalTitle || "&nbsp;",
                e = c.ui.dialog.getTitleId(this.element),
                k = (this.uidialog = c("<div/>")).appendTo(document.body).hide().addClass(a + m.dialogClass).css({
                    position: "absolute",
                    overflow: "hidden",
                    zIndex: m.zIndex
                }).attr("tabIndex", -1).css("outline", 0).keydown(function (n) {
                    (m.closeOnEscape && n.keyCode && n.keyCode == c.ui.keyCode.ESCAPE && l.close(n))
                }).attr({role: "dialog", "aria-labelledby": e}).mousedown(function (n) {
                    l.moveToTop(false, n)
                }),
                g = this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(k),
                f = (this.uidialogTitlebar = c("<div></div>")).addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(k),
                i = c('<a href="#"/>').addClass("ui-dialog-titlebar-close ui-corner-all").attr("role", "button").hover(function () {
                    i.addClass("ui-state-hover")
                }, function () {
                    i.removeClass("ui-state-hover")
                }).focus(function () {
                    i.addClass("ui-state-focus")
                }).blur(function () {
                    i.removeClass("ui-state-focus")
                }).mousedown(function (n) {
                    n.stopPropagation()
                }).click(function (n) {
                    l.close(n);
                    return false
                }).appendTo(f),
                h = (this.uidialogTitlebarCloseText = c("<span/>")).addClass("ui-icon ui-icon-closethick").text(m.closeText).appendTo(i),
                d = c("<span/>").addClass("ui-dialog-title").attr("id", e).html(j).prependTo(f);
            f.find("*").add(f).disableSelection();
            (m.draggable && c.fn.draggable && this._makeDraggable());
            (m.resizable && c.fn.resizable && this._makeResizable());
            this._createButtons(m.buttons);
            this._isOpen = false;
            (m.bgiframe && c.fn.bgiframe && k.bgiframe());
            (m.autoOpen && this.open())
        }, destroy: function () {
            (this.overlay && this.overlay.destroy());
            this.uidialog.hide();
            this.element.unbind(".dialog").removeData("dialog").removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body");
            this.uidialog.remove();
            (this.originalTitle && this.element.attr("title", this.originalTitle))
        }, close: function (e) {
            var d = this;
            if (false === d._trigger("beforeclose", e)) {
                return
            }
            (d.overlay && d.overlay.destroy());
            d.uidialog.unbind("keypress.ui-dialog");
            (d.options.hide ? d.uidialog.hide(d.options.hide, function () {
                d._trigger("close", e)
            }) : d.uidialog.hide() && d._trigger("close", e));
            c.ui.dialog.overlay.resize();
            d._isOpen = false
        }, isOpen: function () {
            return this._isOpen
        }, moveToTop: function (f, e) {
            if ((this.options.modal && !f) || (!this.options.stack && !this.options.modal)) {
                return this._trigger("focus", e)
            }
            if (this.options.zIndex > c.ui.dialog.maxZ) {
                c.ui.dialog.maxZ = this.options.zIndex
            }
            (this.overlay && this.overlay.$el.css("z-index", c.ui.dialog.overlay.maxZ = ++c.ui.dialog.maxZ));
            var d = {scrollTop: this.element.attr("scrollTop"), scrollLeft: this.element.attr("scrollLeft")};
            this.uidialog.css("z-index", ++c.ui.dialog.maxZ);
            this.element.attr(d);
            this._trigger("focus", e)
        }, open: function () {
            if (this._isOpen) {
                return
            }
            var e = this.options, d = this.uidialog;
            this.overlay = e.modal ? new c.ui.dialog.overlay(this) : null;
            (d.next().length && d.appendTo("body"));
            this._size();
            this._position(e.position);
            d.show(e.show);
            this.moveToTop(true);
            (e.modal && d.bind("keypress.ui-dialog", function (h) {
                if (h.keyCode != c.ui.keyCode.TAB) {
                    return
                }
                var g = c(":tabbable", this), i = g.filter(":first")[0], f = g.filter(":last")[0];
                if (h.target == f && !h.shiftKey) {
                    setTimeout(function () {
                        i.focus()
                    }, 1)
                } else {
                    if (h.target == i && h.shiftKey) {
                        setTimeout(function () {
                            f.focus()
                        }, 1)
                    }
                }
            }));
            c([]).add(d.find(".ui-dialog-content :tabbable:first")).add(d.find(".ui-dialog-buttonpane :tabbable:first")).add(d).filter(":first").focus();
            this._trigger("open");
            this._isOpen = true
        }, _createButtons: function (g) {
            var f = this, d = false,
                e = c("<div></div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
            this.uidialog.find(".ui-dialog-buttonpane").remove();
            (typeof g == "object" && g !== null && c.each(g, function () {
                return !(d = true)
            }));
            if (d) {
                c.each(g, function (h, i) {
                    c('<button type="button"></button>').addClass("ui-state-default ui-corner-all").text(h).click(function () {
                        i.apply(f.element[0], arguments)
                    }).hover(function () {
                        c(this).addClass("ui-state-hover")
                    }, function () {
                        c(this).removeClass("ui-state-hover")
                    }).focus(function () {
                        c(this).addClass("ui-state-focus")
                    }).blur(function () {
                        c(this).removeClass("ui-state-focus")
                    }).appendTo(e)
                });
                e.appendTo(this.uidialog)
            }
        }, _makeDraggable: function () {
            var d = this, f = this.options, e;
            this.uidialog.draggable({
                cancel: ".ui-dialog-content",
                handle: ".ui-dialog-titlebar",
                containment: "document",
                start: function () {
                    e = f.height;
                    c(this).height(c(this).height()).addClass("ui-dialog-dragging");
                    (f.dragStart && f.dragStart.apply(d.element[0], arguments))
                },
                drag: function () {
                    (f.drag && f.drag.apply(d.element[0], arguments))
                },
                stop: function () {
                    c(this).removeClass("ui-dialog-dragging").height(e);
                    (f.dragStop && f.dragStop.apply(d.element[0], arguments));
                    c.ui.dialog.overlay.resize()
                }
            })
        }, _makeResizable: function (g) {
            g = (g === undefined ? this.options.resizable : g);
            var d = this, f = this.options, e = typeof g == "string" ? g : "n,e,s,w,se,sw,ne,nw";
            this.uidialog.resizable({
                cancel: ".ui-dialog-content",
                alsoResize: this.element,
                maxWidth: f.maxWidth,
                maxHeight: f.maxHeight,
                minWidth: f.minWidth,
                minHeight: f.minHeight,
                start: function () {
                    c(this).addClass("ui-dialog-resizing");
                    (f.resizeStart && f.resizeStart.apply(d.element[0], arguments))
                },
                resize: function () {
                    (f.resize && f.resize.apply(d.element[0], arguments))
                },
                handles: e,
                stop: function () {
                    c(this).removeClass("ui-dialog-resizing");
                    f.height = c(this).height();
                    f.width = c(this).width();
                    (f.resizeStop && f.resizeStop.apply(d.element[0], arguments));
                    c.ui.dialog.overlay.resize()
                }
            }).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")
        }, _position: function (i) {
            var e = c(window), f = c(document), g = f.scrollTop(), d = f.scrollLeft(), h = g;
            if (c.inArray(i, ["center", "top", "right", "bottom", "left"]) >= 0) {
                i = [i == "right" || i == "left" ? i : "center", i == "top" || i == "bottom" ? i : "middle"]
            }
            if (i.constructor != Array) {
                i = ["center", "middle"]
            }
            if (i[0].constructor == Number) {
                d += i[0]
            } else {
                switch (i[0]) {
                    case"left":
                        d += 0;
                        break;
                    case"right":
                        d += e.width() - this.uidialog.outerWidth();
                        break;
                    default:
                    case"center":
                        d += (e.width() - this.uidialog.outerWidth()) / 2
                }
            }
            if (i[1].constructor == Number) {
                g += i[1]
            } else {
                switch (i[1]) {
                    case"top":
                        g += 0;
                        break;
                    case"bottom":
                        g += e.height() - this.uidialog.outerHeight();
                        break;
                    default:
                    case"middle":
                        g += (e.height() - this.uidialog.outerHeight()) / 2
                }
            }
            g = Math.max(g, h);
            this.uidialog.css({top: g, left: d})
        }, _setData: function (e, f) {
            (b[e] && this.uidialog.data(b[e], f));
            switch (e) {
                case"buttons":
                    this._createButtons(f);
                    break;
                case"closeText":
                    this.uidialogTitlebarCloseText.text(f);
                    break;
                case"dialogClass":
                    this.uidialog.removeClass(this.options.dialogClass).addClass(a + f);
                    break;
                case"draggable":
                    (f ? this._makeDraggable() : this.uidialog.draggable("destroy"));
                    break;
                case"height":
                    this.uidialog.height(f);
                    break;
                case"position":
                    this._position(f);
                    break;
                case"resizable":
                    var d = this.uidialog, g = this.uidialog.is(":data(resizable)");
                    (g && !f && d.resizable("destroy"));
                    (g && typeof f == "string" && d.resizable("option", "handles", f));
                    (g || this._makeResizable(f));
                    break;
                case"title":
                    c(".ui-dialog-title", this.uidialogTitlebar).html(f || "&nbsp;");
                    break;
                case"width":
                    this.uidialog.width(f);
                    break
            }
            c.widget.prototype._setData.apply(this, arguments)
        }, _size: function () {
            var e = this.options;
            this.element.css({height: 0, minHeight: 0, width: "auto"});
            var d = this.uidialog.css({height: "auto", width: e.width}).height();
            this.element.css({
                minHeight: Math.max(e.minHeight - d, 0),
                height: e.height == "auto" ? "auto" : Math.max(e.height - d, 0)
            })
        }
    });
    c.extend(c.ui.dialog, {
        version: "1.7",
        defaults: {
            autoOpen: true,
            bgiframe: false,
            buttons: {},
            closeOnEscape: true,
            closeText: "close",
            dialogClass: "",
            draggable: true,
            hide: null,
            height: "auto",
            maxHeight: false,
            maxWidth: false,
            minHeight: 150,
            minWidth: 150,
            modal: false,
            position: "center",
            resizable: true,
            show: null,
            stack: true,
            title: "",
            width: 300,
            zIndex: 1000
        },
        getter: "isOpen",
        uuid: 0,
        maxZ: 0,
        getTitleId: function (d) {
            return "ui-dialog-title-" + (d.attr("id") || ++this.uuid)
        },
        overlay: function (d) {
            this.$el = c.ui.dialog.overlay.create(d)
        }
    });
    c.extend(c.ui.dialog.overlay, {
        instances: [],
        maxZ: 0,
        events: c.map("focus,mousedown,mouseup,keydown,keypress,click".split(","), function (d) {
            return d + ".dialog-overlay"
        }).join(" "),
        create: function (e) {
            if (this.instances.length === 0) {
                setTimeout(function () {
                    c(document).bind(c.ui.dialog.overlay.events, function (f) {
                        var g = c(f.target).parents(".ui-dialog").css("zIndex") || 0;
                        return (g > c.ui.dialog.overlay.maxZ)
                    })
                }, 1);
                c(document).bind("keydown.dialog-overlay", function (f) {
                    (e.options.closeOnEscape && f.keyCode && f.keyCode == c.ui.keyCode.ESCAPE && e.close(f))
                });
                c(window).bind("resize.dialog-overlay", c.ui.dialog.overlay.resize)
            }
            var d = c("<div></div>").appendTo(document.body).addClass("ui-widget-overlay").css({
                width: this.width(),
                height: this.height()
            });
            (e.options.bgiframe && c.fn.bgiframe && d.bgiframe());
            this.instances.push(d);
            return d
        },
        destroy: function (d) {
            this.instances.splice(c.inArray(this.instances, d), 1);
            if (this.instances.length === 0) {
                c([document, window]).unbind(".dialog-overlay")
            }
            d.remove()
        },
        height: function () {
            if (c.browser.msie && c.browser.version < 7) {
                var e = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
                var d = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight);
                if (e < d) {
                    return c(window).height() + "px"
                } else {
                    return e + "px"
                }
            } else {
                return c(document).height() + "px"
            }
        },
        width: function () {
            if (c.browser.msie && c.browser.version < 7) {
                var d = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth);
                var e = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);
                if (d < e) {
                    return c(window).width() + "px"
                } else {
                    return d + "px"
                }
            } else {
                return c(document).width() + "px"
            }
        },
        resize: function () {
            var d = c([]);
            c.each(c.ui.dialog.overlay.instances, function () {
                d = d.add(this)
            });
            d.css({width: 0, height: 0}).css({width: c.ui.dialog.overlay.width(), height: c.ui.dialog.overlay.height()})
        }
    });
    c.extend(c.ui.dialog.overlay.prototype, {
        destroy: function () {
            c.ui.dialog.overlay.destroy(this.$el)
        }
    })
})(jQuery);
(function (a) {
    a.widget("ui.progressbar", {
        _init: function () {
            this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                role: "progressbar",
                "aria-valuemin": this._valueMin(),
                "aria-valuemax": this._valueMax(),
                "aria-valuenow": this._value()
            });
            this.valueDiv = a('<div class="ui-progressbar-value ui-widget-header ui-corner-left"></div>').appendTo(this.element);
            this._refreshValue()
        }, destroy: function () {
            this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow").removeData("progressbar").unbind(".progressbar");
            this.valueDiv.remove();
            a.widget.prototype.destroy.apply(this, arguments)
        }, value: function (b) {
            arguments.length && this._setData("value", b);
            return this._value()
        }, _setData: function (b, c) {
            switch (b) {
                case"value":
                    this.options.value = c;
                    this._refreshValue();
                    this._trigger("change", null, {});
                    break
            }
            a.widget.prototype._setData.apply(this, arguments)
        }, _value: function () {
            var b = this.options.value;
            if (b < this._valueMin()) {
                b = this._valueMin()
            }
            if (b > this._valueMax()) {
                b = this._valueMax()
            }
            return b
        }, _valueMin: function () {
            var b = 0;
            return b
        }, _valueMax: function () {
            var b = 100;
            return b
        }, _refreshValue: function () {
            var b = this.value();
            this.valueDiv[b == this._valueMax() ? "addClass" : "removeClass"]("ui-corner-right");
            this.valueDiv.width(b + "%");
            this.element.attr("aria-valuenow", b)
        }
    });
    a.extend(a.ui.progressbar, {version: "1.7", defaults: {value: 0}})
})(jQuery);
(function (a) {
    a.widget("ui.slider", a.extend({}, a.ui.mouse, {
        _init: function () {
            var b = this, c = this.options;
            this._keySliding = false;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all");
            this.range = a([]);
            if (c.range) {
                if (c.range === true) {
                    this.range = a("<div></div>");
                    if (!c.values) {
                        c.values = [this._valueMin(), this._valueMin()]
                    }
                    if (c.values.length && c.values.length != 2) {
                        c.values = [c.values[0], c.values[0]]
                    }
                } else {
                    this.range = a("<div></div>")
                }
                this.range.appendTo(this.element).addClass("ui-slider-range");
                if (c.range == "min" || c.range == "max") {
                    this.range.addClass("ui-slider-range-" + c.range)
                }
                this.range.addClass("ui-widget-header")
            }
            if (a(".ui-slider-handle", this.element).length == 0) {
                a('<a href="#"></a>').appendTo(this.element).addClass("ui-slider-handle")
            }
            if (c.values && c.values.length) {
                while (a(".ui-slider-handle", this.element).length < c.values.length) {
                    a('<a href="#"></a>').appendTo(this.element).addClass("ui-slider-handle")
                }
            }
            this.handles = a(".ui-slider-handle", this.element).addClass("ui-state-default ui-corner-all");
            this.handle = this.handles.eq(0);
            this.handles.add(this.range).filter("a").click(function (d) {
                d.preventDefault()
            }).hover(function () {
                a(this).addClass("ui-state-hover")
            }, function () {
                a(this).removeClass("ui-state-hover")
            }).focus(function () {
                a(".ui-slider .ui-state-focus").removeClass("ui-state-focus");
                a(this).addClass("ui-state-focus")
            }).blur(function () {
                a(this).removeClass("ui-state-focus")
            });
            this.handles.each(function (d) {
                a(this).data("index.ui-slider-handle", d)
            });
            this.handles.keydown(function (i) {
                var f = true;
                var e = a(this).data("index.ui-slider-handle");
                if (b.options.disabled) {
                    return
                }
                switch (i.keyCode) {
                    case a.ui.keyCode.HOME:
                    case a.ui.keyCode.END:
                    case a.ui.keyCode.UP:
                    case a.ui.keyCode.RIGHT:
                    case a.ui.keyCode.DOWN:
                    case a.ui.keyCode.LEFT:
                        f = false;
                        if (!b._keySliding) {
                            b._keySliding = true;
                            a(this).addClass("ui-state-active");
                            b._start(i, e)
                        }
                        break
                }
                var g, d, h = b._step();
                if (b.options.values && b.options.values.length) {
                    g = d = b.values(e)
                } else {
                    g = d = b.value()
                }
                switch (i.keyCode) {
                    case a.ui.keyCode.HOME:
                        d = b._valueMin();
                        break;
                    case a.ui.keyCode.END:
                        d = b._valueMax();
                        break;
                    case a.ui.keyCode.UP:
                    case a.ui.keyCode.RIGHT:
                        if (g == b._valueMax()) {
                            return
                        }
                        d = g + h;
                        break;
                    case a.ui.keyCode.DOWN:
                    case a.ui.keyCode.LEFT:
                        if (g == b._valueMin()) {
                            return
                        }
                        d = g - h;
                        break
                }
                b._slide(i, e, d);
                return f
            }).keyup(function (e) {
                var d = a(this).data("index.ui-slider-handle");
                if (b._keySliding) {
                    b._stop(e, d);
                    b._change(e, d);
                    b._keySliding = false;
                    a(this).removeClass("ui-state-active")
                }
            });
            this._refreshValue()
        }, destroy: function () {
            this.handles.remove();
            this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all").removeData("slider").unbind(".slider");
            this._mouseDestroy()
        }, _mouseCapture: function (d) {
            var e = this.options;
            if (e.disabled) {
                return false
            }
            this.elementSize = {width: this.element.outerWidth(), height: this.element.outerHeight()};
            this.elementOffset = this.element.offset();
            var h = {x: d.pageX, y: d.pageY};
            var j = this._normValueFromMouse(h);
            var c = this._valueMax() + 1, f;
            var k = this, i;
            this.handles.each(function (l) {
                var m = Math.abs(j - k.values(l));
                if (c > m) {
                    c = m;
                    f = a(this);
                    i = l
                }
            });
            if (e.range == true && this.values(1) == e.min) {
                f = a(this.handles[++i])
            }
            this._start(d, i);
            k._handleIndex = i;
            f.addClass("ui-state-active").focus();
            var g = f.offset();
            var b = !a(d.target).parents().andSelf().is(".ui-slider-handle");
            this._clickOffset = b ? {left: 0, top: 0} : {
                left: d.pageX - g.left - (f.width() / 2),
                top: d.pageY - g.top - (f.height() / 2) - (parseInt(f.css("borderTopWidth"), 10) || 0) - (parseInt(f.css("borderBottomWidth"), 10) || 0) + (parseInt(f.css("marginTop"), 10) || 0)
            };
            j = this._normValueFromMouse(h);
            this._slide(d, i, j);
            return true
        }, _mouseStart: function (b) {
            return true
        }, _mouseDrag: function (d) {
            var b = {x: d.pageX, y: d.pageY};
            var c = this._normValueFromMouse(b);
            this._slide(d, this._handleIndex, c);
            return false
        }, _mouseStop: function (b) {
            this.handles.removeClass("ui-state-active");
            this._stop(b, this._handleIndex);
            this._change(b, this._handleIndex);
            this._handleIndex = null;
            this._clickOffset = null;
            return false
        }, _detectOrientation: function () {
            this.orientation = this.options.orientation == "vertical" ? "vertical" : "horizontal"
        }, _normValueFromMouse: function (d) {
            var c, h;
            if ("horizontal" == this.orientation) {
                c = this.elementSize.width;
                h = d.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)
            } else {
                c = this.elementSize.height;
                h = d.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)
            }
            var f = (h / c);
            if (f > 1) {
                f = 1
            }
            if (f < 0) {
                f = 0
            }
            if ("vertical" == this.orientation) {
                f = 1 - f
            }
            var e = this._valueMax() - this._valueMin(), i = f * e, b = i % this.options.step,
                g = this._valueMin() + i - b;
            if (b > (this.options.step / 2)) {
                g += this.options.step
            }
            return parseFloat(g.toFixed(5))
        }, _start: function (c, b) {
            this._trigger("start", c, this._uiHash(b))
        }, _slide: function (f, e, d) {
            var g = this.handles[e];
            if (this.options.values && this.options.values.length) {
                var b = this.values(e ? 0 : 1);
                if ((e == 0 && d >= b) || (e == 1 && d <= b)) {
                    d = b
                }
                if (d != this.values(e)) {
                    var c = this.values();
                    c[e] = d;
                    var h = this._trigger("slide", f, this._uiHash(e, d, c));
                    var b = this.values(e ? 0 : 1);
                    if (h !== false) {
                        this.values(e, d, (f.type == "mousedown" && this.options.animate), true)
                    }
                }
            } else {
                if (d != this.value()) {
                    var h = this._trigger("slide", f, this._uiHash(e, d));
                    if (h !== false) {
                        this._setData("value", d, (f.type == "mousedown" && this.options.animate))
                    }
                }
            }
        }, _stop: function (c, b) {
            this._trigger("stop", c, this._uiHash(b))
        }, _change: function (c, b) {
            this._trigger("change", c, this._uiHash(b))
        }, value: function (b) {
            if (arguments.length) {
                this._setData("value", b);
                this._change(null, 0)
            }
            return this._value()
        }, values: function (b, e, c, d) {
            if (arguments.length > 1) {
                this.options.values[b] = e;
                this._refreshValue(c);
                if (!d) {
                    this._change(null, b)
                }
            }
            if (arguments.length) {
                if (this.options.values && this.options.values.length) {
                    return this._values(b)
                } else {
                    return this.value()
                }
            } else {
                return this._values()
            }
        }, _setData: function (b, d, c) {
            a.widget.prototype._setData.apply(this, arguments);
            switch (b) {
                case"orientation":
                    this._detectOrientation();
                    this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
                    this._refreshValue(c);
                    break;
                case"value":
                    this._refreshValue(c);
                    break
            }
        }, _step: function () {
            var b = this.options.step;
            return b
        }, _value: function () {
            var b = this.options.value;
            if (b < this._valueMin()) {
                b = this._valueMin()
            }
            if (b > this._valueMax()) {
                b = this._valueMax()
            }
            return b
        }, _values: function (b) {
            if (arguments.length) {
                var c = this.options.values[b];
                if (c < this._valueMin()) {
                    c = this._valueMin()
                }
                if (c > this._valueMax()) {
                    c = this._valueMax()
                }
                return c
            } else {
                return this.options.values
            }
        }, _valueMin: function () {
            var b = this.options.min;
            return b
        }, _valueMax: function () {
            var b = this.options.max;
            return b
        }, _refreshValue: function (c) {
            var f = this.options.range, d = this.options, l = this;
            if (this.options.values && this.options.values.length) {
                var i, h;
                this.handles.each(function (p, n) {
                    var o = (l.values(p) - l._valueMin()) / (l._valueMax() - l._valueMin()) * 100;
                    var m = {};
                    m[l.orientation == "horizontal" ? "left" : "bottom"] = o + "%";
                    a(this).stop(1, 1)[c ? "animate" : "css"](m, d.animate);
                    if (l.options.range === true) {
                        if (l.orientation == "horizontal") {
                            (p == 0) && l.range.stop(1, 1)[c ? "animate" : "css"]({left: o + "%"}, d.animate);
                            (p == 1) && l.range[c ? "animate" : "css"]({width: (o - lastValPercent) + "%"}, {
                                queue: false,
                                duration: d.animate
                            })
                        } else {
                            (p == 0) && l.range.stop(1, 1)[c ? "animate" : "css"]({bottom: (o) + "%"}, d.animate);
                            (p == 1) && l.range[c ? "animate" : "css"]({height: (o - lastValPercent) + "%"}, {
                                queue: false,
                                duration: d.animate
                            })
                        }
                    }
                    lastValPercent = o
                })
            } else {
                var j = this.value(), g = this._valueMin(), k = this._valueMax(),
                    e = k != g ? (j - g) / (k - g) * 100 : 0;
                var b = {};
                b[l.orientation == "horizontal" ? "left" : "bottom"] = e + "%";
                this.handle.stop(1, 1)[c ? "animate" : "css"](b, d.animate);
                (f == "min") && (this.orientation == "horizontal") && this.range.stop(1, 1)[c ? "animate" : "css"]({width: e + "%"}, d.animate);
                (f == "max") && (this.orientation == "horizontal") && this.range[c ? "animate" : "css"]({width: (100 - e) + "%"}, {
                    queue: false,
                    duration: d.animate
                });
                (f == "min") && (this.orientation == "vertical") && this.range.stop(1, 1)[c ? "animate" : "css"]({height: e + "%"}, d.animate);
                (f == "max") && (this.orientation == "vertical") && this.range[c ? "animate" : "css"]({height: (100 - e) + "%"}, {
                    queue: false,
                    duration: d.animate
                })
            }
        }, _uiHash: function (d, e, c) {
            var b = this.options.values && this.options.values.length;
            return {
                handle: this.handles[d],
                value: e || (b ? this.values(d) : this.value()),
                values: c || (b && this.values())
            }
        }
    }));
    a.extend(a.ui.slider, {
        getter: "value values",
        version: "1.7",
        eventPrefix: "slide",
        defaults: {
            animate: false,
            delay: 0,
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: false,
            step: 1,
            value: 0,
            values: null
        }
    })
})(jQuery);
(function (a) {
    a.widget("ui.tabs", {
        _init: function () {
            if (this.options.deselectable !== undefined) {
                this.options.collapsible = this.options.deselectable
            }
            this._tabify(true)
        }, _setData: function (b, c) {
            if (b == "selected") {
                if (this.options.collapsible && c == this.options.selected) {
                    return
                }
                this.select(c)
            } else {
                this.options[b] = c;
                if (b == "deselectable") {
                    this.options.collapsible = c
                }
                this._tabify()
            }
        }, _tabId: function (b) {
            return b.title && b.title.replace(/\s/g, "_").replace(/[^A-Za-z0-9\-_:\.]/g, "") || this.options.idPrefix + a.data(b)
        }, _sanitizeSelector: function (b) {
            return b.replace(/:/g, "\\:")
        }, _cookie: function () {
            var b = this.cookie || (this.cookie = this.options.cookie.name || "ui-tabs-" + a.data(this.list[0]));
            return a.cookie.apply(null, [b].concat(a.makeArray(arguments)))
        }, _ui: function (c, b) {
            return {tab: c, panel: b, index: this.anchors.index(c)}
        }, _cleanup: function () {
            this.lis.filter(".ui-state-processing").removeClass("ui-state-processing").find("span:data(label.tabs)").each(function () {
                var b = a(this);
                b.html(b.data("label.tabs")).removeData("label.tabs")
            })
        }, _tabify: function (n) {
            this.list = this.element.children("ul:first");
            this.lis = a("li:has(a[href])", this.list);
            this.anchors = this.lis.map(function () {
                return a("a", this)[0]
            });
            this.panels = a([]);
            var p = this, d = this.options;
            var c = /^#.+/;
            this.anchors.each(function (r, o) {
                var q = a(o).attr("href");
                var s = q.split("#")[0], u;
                if (s && (s === location.toString().split("#")[0] || (u = a("base")[0]) && s === u.href)) {
                    q = o.hash;
                    o.href = q
                }
                if (c.test(q)) {
                    p.panels = p.panels.add(p._sanitizeSelector(q))
                } else {
                    if (q != "#") {
                        a.data(o, "href.tabs", q);
                        a.data(o, "load.tabs", q.replace(/#.*$/, ""));
                        var w = p._tabId(o);
                        o.href = "#" + w;
                        var v = a("#" + w);
                        if (!v.length) {
                            v = a(d.panelTemplate).attr("id", w).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").insertAfter(p.panels[r - 1] || p.list);
                            v.data("destroy.tabs", true)
                        }
                        p.panels = p.panels.add(v)
                    } else {
                        d.disabled.push(r)
                    }
                }
            });
            if (n) {
                this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all");
                this.list.addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");
                this.lis.addClass("ui-state-default ui-corner-top");
                this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom");
                if (d.selected === undefined) {
                    if (location.hash) {
                        this.anchors.each(function (q, o) {
                            if (o.hash == location.hash) {
                                d.selected = q;
                                return false
                            }
                        })
                    }
                    if (typeof d.selected != "number" && d.cookie) {
                        d.selected = parseInt(p._cookie(), 10)
                    }
                    if (typeof d.selected != "number" && this.lis.filter(".ui-tabs-selected").length) {
                        d.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"))
                    }
                    d.selected = d.selected || 0
                } else {
                    if (d.selected === null) {
                        d.selected = -1
                    }
                }
                d.selected = ((d.selected >= 0 && this.anchors[d.selected]) || d.selected < 0) ? d.selected : 0;
                d.disabled = a.unique(d.disabled.concat(a.map(this.lis.filter(".ui-state-disabled"), function (q, o) {
                    return p.lis.index(q)
                }))).sort();
                if (a.inArray(d.selected, d.disabled) != -1) {
                    d.disabled.splice(a.inArray(d.selected, d.disabled), 1)
                }
                this.panels.addClass("ui-tabs-hide");
                this.lis.removeClass("ui-tabs-selected ui-state-active");
                if (d.selected >= 0 && this.anchors.length) {
                    this.panels.eq(d.selected).removeClass("ui-tabs-hide");
                    this.lis.eq(d.selected).addClass("ui-tabs-selected ui-state-active");
                    p.element.queue("tabs", function () {
                        p._trigger("show", null, p._ui(p.anchors[d.selected], p.panels[d.selected]))
                    });
                    this.load(d.selected)
                }
                a(window).bind("unload", function () {
                    p.lis.add(p.anchors).unbind(".tabs");
                    p.lis = p.anchors = p.panels = null
                })
            } else {
                d.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"))
            }
            this.element[d.collapsible ? "addClass" : "removeClass"]("ui-tabs-collapsible");
            if (d.cookie) {
                this._cookie(d.selected, d.cookie)
            }
            for (var g = 0, m; (m = this.lis[g]); g++) {
                a(m)[a.inArray(g, d.disabled) != -1 && !a(m).hasClass("ui-tabs-selected") ? "addClass" : "removeClass"]("ui-state-disabled")
            }
            if (d.cache === false) {
                this.anchors.removeData("cache.tabs")
            }
            this.lis.add(this.anchors).unbind(".tabs");
            if (d.event != "mouseover") {
                var f = function (o, i) {
                    if (i.is(":not(.ui-state-disabled)")) {
                        i.addClass("ui-state-" + o)
                    }
                };
                var j = function (o, i) {
                    i.removeClass("ui-state-" + o)
                };
                this.lis.bind("mouseover.tabs", function () {
                    f("hover", a(this))
                });
                this.lis.bind("mouseout.tabs", function () {
                    j("hover", a(this))
                });
                this.anchors.bind("focus.tabs", function () {
                    f("focus", a(this).closest("li"))
                });
                this.anchors.bind("blur.tabs", function () {
                    j("focus", a(this).closest("li"))
                })
            }
            var b, h;
            if (d.fx) {
                if (a.isArray(d.fx)) {
                    b = d.fx[0];
                    h = d.fx[1]
                } else {
                    b = h = d.fx
                }
            }

            function e(i, o) {
                i.css({display: ""});
                if (a.browser.msie && o.opacity) {
                    i[0].style.removeAttribute("filter")
                }
            }

            var k = h ? function (i, o) {
                a(i).closest("li").removeClass("ui-state-default").addClass("ui-tabs-selected ui-state-active");
                o.hide().removeClass("ui-tabs-hide").animate(h, h.duration || "normal", function () {
                    e(o, h);
                    p._trigger("show", null, p._ui(i, o[0]))
                })
            } : function (i, o) {
                a(i).closest("li").removeClass("ui-state-default").addClass("ui-tabs-selected ui-state-active");
                o.removeClass("ui-tabs-hide");
                p._trigger("show", null, p._ui(i, o[0]))
            };
            var l = b ? function (o, i) {
                i.animate(b, b.duration || "normal", function () {
                    p.lis.removeClass("ui-tabs-selected ui-state-active").addClass("ui-state-default");
                    i.addClass("ui-tabs-hide");
                    e(i, b);
                    p.element.dequeue("tabs")
                })
            } : function (o, i, q) {
                p.lis.removeClass("ui-tabs-selected ui-state-active").addClass("ui-state-default");
                i.addClass("ui-tabs-hide");
                p.element.dequeue("tabs")
            };
            this.anchors.bind(d.event + ".tabs", function () {
                var o = this, r = a(this).closest("li"), i = p.panels.filter(":not(.ui-tabs-hide)"),
                    q = a(p._sanitizeSelector(this.hash));
                if ((r.hasClass("ui-tabs-selected") && !d.collapsible) || r.hasClass("ui-state-disabled") || r.hasClass("ui-state-processing") || p._trigger("select", null, p._ui(this, q[0])) === false) {
                    this.blur();
                    return false
                }
                d.selected = p.anchors.index(this);
                p.abort();
                if (d.collapsible) {
                    if (r.hasClass("ui-tabs-selected")) {
                        d.selected = -1;
                        if (d.cookie) {
                            p._cookie(d.selected, d.cookie)
                        }
                        p.element.queue("tabs", function () {
                            l(o, i)
                        }).dequeue("tabs");
                        this.blur();
                        return false
                    } else {
                        if (!i.length) {
                            if (d.cookie) {
                                p._cookie(d.selected, d.cookie)
                            }
                            p.element.queue("tabs", function () {
                                k(o, q)
                            });
                            p.load(p.anchors.index(this));
                            this.blur();
                            return false
                        }
                    }
                }
                if (d.cookie) {
                    p._cookie(d.selected, d.cookie)
                }
                if (q.length) {
                    if (i.length) {
                        p.element.queue("tabs", function () {
                            l(o, i)
                        })
                    }
                    p.element.queue("tabs", function () {
                        k(o, q)
                    });
                    p.load(p.anchors.index(this))
                } else {
                    throw"jQuery UI Tabs: Mismatching fragment identifier."
                }
                if (a.browser.msie) {
                    this.blur()
                }
            });
            this.anchors.bind("click.tabs", function () {
                return false
            })
        }, destroy: function () {
            var b = this.options;
            this.abort();
            this.element.unbind(".tabs").removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible").removeData("tabs");
            this.list.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");
            this.anchors.each(function () {
                var c = a.data(this, "href.tabs");
                if (c) {
                    this.href = c
                }
                var d = a(this).unbind(".tabs");
                a.each(["href", "load", "cache"], function (e, f) {
                    d.removeData(f + ".tabs")
                })
            });
            this.lis.unbind(".tabs").add(this.panels).each(function () {
                if (a.data(this, "destroy.tabs")) {
                    a(this).remove()
                } else {
                    a(this).removeClass(["ui-state-default", "ui-corner-top", "ui-tabs-selected", "ui-state-active", "ui-state-hover", "ui-state-focus", "ui-state-disabled", "ui-tabs-panel", "ui-widget-content", "ui-corner-bottom", "ui-tabs-hide"].join(" "))
                }
            });
            if (b.cookie) {
                this._cookie(null, b.cookie)
            }
        }, add: function (e, d, c) {
            if (c === undefined) {
                c = this.anchors.length
            }
            var b = this, g = this.options, i = a(g.tabTemplate.replace(/#\{href\}/g, e).replace(/#\{label\}/g, d)),
                h = !e.indexOf("#") ? e.replace("#", "") : this._tabId(a("a", i)[0]);
            i.addClass("ui-state-default ui-corner-top").data("destroy.tabs", true);
            var f = a("#" + h);
            if (!f.length) {
                f = a(g.panelTemplate).attr("id", h).data("destroy.tabs", true)
            }
            f.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");
            if (c >= this.lis.length) {
                i.appendTo(this.list);
                f.appendTo(this.list[0].parentNode)
            } else {
                i.insertBefore(this.lis[c]);
                f.insertBefore(this.panels[c])
            }
            g.disabled = a.map(g.disabled, function (k, j) {
                return k >= c ? ++k : k
            });
            this._tabify();
            if (this.anchors.length == 1) {
                i.addClass("ui-tabs-selected ui-state-active");
                f.removeClass("ui-tabs-hide");
                this.element.queue("tabs", function () {
                    b._trigger("show", null, b._ui(b.anchors[0], b.panels[0]))
                });
                this.load(0)
            }
            this._trigger("add", null, this._ui(this.anchors[c], this.panels[c]))
        }, remove: function (b) {
            var d = this.options, e = this.lis.eq(b).remove(), c = this.panels.eq(b).remove();
            if (e.hasClass("ui-tabs-selected") && this.anchors.length > 1) {
                this.select(b + (b + 1 < this.anchors.length ? 1 : -1))
            }
            d.disabled = a.map(a.grep(d.disabled, function (g, f) {
                return g != b
            }), function (g, f) {
                return g >= b ? --g : g
            });
            this._tabify();
            this._trigger("remove", null, this._ui(e.find("a")[0], c[0]))
        }, enable: function (b) {
            var c = this.options;
            if (a.inArray(b, c.disabled) == -1) {
                return
            }
            this.lis.eq(b).removeClass("ui-state-disabled");
            c.disabled = a.grep(c.disabled, function (e, d) {
                return e != b
            });
            this._trigger("enable", null, this._ui(this.anchors[b], this.panels[b]))
        }, disable: function (c) {
            var b = this, d = this.options;
            if (c != d.selected) {
                this.lis.eq(c).addClass("ui-state-disabled");
                d.disabled.push(c);
                d.disabled.sort();
                this._trigger("disable", null, this._ui(this.anchors[c], this.panels[c]))
            }
        }, select: function (b) {
            if (typeof b == "string") {
                b = this.anchors.index(this.anchors.filter("[href$=" + b + "]"))
            } else {
                if (b === null) {
                    b = -1
                }
            }
            if (b == -1 && this.options.collapsible) {
                b = this.options.selected
            }
            this.anchors.eq(b).trigger(this.options.event + ".tabs")
        }, load: function (e) {
            var c = this, g = this.options, b = this.anchors.eq(e)[0], d = a.data(b, "load.tabs");
            this.abort();
            if (!d || this.element.queue("tabs").length !== 0 && a.data(b, "cache.tabs")) {
                this.element.dequeue("tabs");
                return
            }
            this.lis.eq(e).addClass("ui-state-processing");
            if (g.spinner) {
                var f = a("span", b);
                f.data("label.tabs", f.html()).html(g.spinner)
            }
            this.xhr = a.ajax(a.extend({}, g.ajaxOptions, {
                url: d, success: function (i, h) {
                    a(c._sanitizeSelector(b.hash)).html(i);
                    c._cleanup();
                    if (g.cache) {
                        a.data(b, "cache.tabs", true)
                    }
                    c._trigger("load", null, c._ui(c.anchors[e], c.panels[e]));
                    try {
                        g.ajaxOptions.success(i, h)
                    } catch (j) {
                    }
                    c.element.dequeue("tabs")
                }
            }))
        }, abort: function () {
            this.element.queue([]);
            this.panels.stop(false, true);
            if (this.xhr) {
                this.xhr.abort();
                delete this.xhr
            }
            this._cleanup()
        }, url: function (c, b) {
            this.anchors.eq(c).removeData("cache.tabs").data("load.tabs", b)
        }, length: function () {
            return this.anchors.length
        }
    });
    a.extend(a.ui.tabs, {
        version: "1.7",
        getter: "length",
        defaults: {
            ajaxOptions: null,
            cache: false,
            cookie: null,
            collapsible: false,
            disabled: [],
            event: "click",
            fx: null,
            idPrefix: "ui-tabs-",
            panelTemplate: "<div></div>",
            spinner: "<em>Loading&#8230;</em>",
            tabTemplate: '<li><a href="#{href}"><span>#{label}</span></a></li>'
        }
    });
    a.extend(a.ui.tabs.prototype, {
        rotation: null, rotate: function (d, f) {
            var b = this, g = this.options;
            var c = b._rotate || (b._rotate = function (h) {
                clearTimeout(b.rotation);
                b.rotation = setTimeout(function () {
                    var i = g.selected;
                    b.select(++i < b.anchors.length ? i : 0)
                }, d);
                if (h) {
                    h.stopPropagation()
                }
            });
            var e = b._unrotate || (b._unrotate = !f ? function (h) {
                if (h.clientX) {
                    b.rotate(null)
                }
            } : function (h) {
                t = g.selected;
                c()
            });
            if (d) {
                this.element.bind("tabsshow", c);
                this.anchors.bind(g.event + ".tabs", e);
                c()
            } else {
                clearTimeout(b.rotation);
                this.element.unbind("tabsshow", c);
                this.anchors.unbind(g.event + ".tabs", e);
                delete this._rotate;
                delete this._unrotate
            }
        }
    })
})(jQuery);
$.datepicker.regional['zh-CN'] = {
    clearText: '清除',
    clearStatus: '清除已选日期',
    closeText: '关闭',
    closeStatus: '不改变当前选择',
    prevText: '<上月',
    prevStatus: '显示上月',
    prevBigText: '<<',
    prevBigStatus: '显示上一年',
    nextText: '下月>',
    nextStatus: '显示下月',
    nextBigText: '>>',
    nextBigStatus: '显示下一年',
    currentText: '今天',
    currentStatus: '显示本月',
    monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
    monthNamesShort: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
    monthStatus: '选择月份',
    yearStatus: '选择年份',
    weekHeader: '周',
    weekStatus: '年内周次',
    dayNames: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],
    dayNamesShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    dayNamesMin: ['日', '一', '二', '三', '四', '五', '六'],
    dayStatus: '设置DD为一周起始',
    dateStatus: '选择m月d日,DD',
    dateFormat: 'yy-mm-dd',
    firstDay: 1,
    initStatus: '请选择日期',
    isRTL: false
};
$.datepicker.setDefaults($.datepicker.regional['zh-CN']);

/**
 * 获取交易查询条件
 * @param trsCode
 * @param viewType
 */
function getView(trsCode, viewType) {
    var datas = {};
    $.ajax({
        url: G_WebRoot + 'console/viewAction!genViewFrame.do?bizType=' + trsCode + '&viewType=' + viewType,
        data: '',
        dataType: 'json',
        async: false,
        timeout: 200000,
        success: function (msg) {
            datas = JBF.initDatas(msg);
        },
        error: function (httprequest, error, e) {
            alert(httprequest.responseText);
            alert("请求视图框架出错：" + error);
        }
    });
    return datas;

}

/**
 * 获取列表展示列视图（公共查询）
 * @param trsCode 业务类型代码
 * @returns {String}
 */
function getListQueryURL(trsCode) {
    var datas = "";
    $.ajax({
        url: G_WebRoot + 'console/viewAction!genViewFrame.do?bizType=' + trsCode + '&viewType=0000000000005',
        data: '',
        dataType: 'json',
        async: false,
        timeout: 200000,
        success: function (msg) {
            datas = msg.viewDefMap.url;
        },
        error: function (httprequest, error, e) {
            alert(httprequest.responseText);
            alert("请求视图框架出错：" + error);
        }
    });
    return datas;
}

/**
 * 获取默认交易(未选则交易时默认交易为999999）查询条件表单视图.
 * @returns
 */
function getCommonQueryCondition() {
    return getView('999999', '0000000000003');
}

/**
 * 获取默认交易(未选则交易时默认交易为999999）查询条件表单视图.
 * @returns
 */
function getCodeQueryCondition() {
    return getView('999990', '0000000000003');
}

/**
 * 根据业务类型获取公共查询功能的查询条件表单视图
 * @param trsCode
 * @returns
 */
function getBizQueryConditon(trsCode) {
    return getView(trsCode, '0000000000003');
}

/**
 * 获取未选中交易时查询列表展示列视图
 * @returns
 */
function getCommonTableColumns() {
    return getView('999999', '0000000000005');
}

/**
 * 根据业务类型获取查询列表展示列视图
 * @param trsCode
 * @returns
 */
function getTableColumns(trsCode) {
    return getView(trsCode, '0000000000005');
}

/**
 * 根据业务类型获取流水详细信息展示视图（公共查询用）
 * @param trsCode
 * @returns
 */
function getFlwDetailItems(trsCode) {
    return getView(trsCode, '0000000000004');
}

/**
 * 根据业务获取流水详细信息展示视图（控制台使用）
 * @param trsCode
 * @returns
 */
function getFlwProcDetailItems(trsCode) {
    return getView(trsCode, '0000000000002');
}

/**
 * 根据业务类型获取扫描发起视图
 * @param bizTypeId
 * @returns
 */
function getScanFormView(bizTypeId) {
    return getView(bizTypeId, '0000000000001');
}

/**
 * 根据业务类型获取业务授权视图
 * @param bizTypeId
 * @returns
 */
function getAuthView(bizTypeId) {
    return getView(bizTypeId, '0000000000006');
}

/**
 * 根据流水ID查询流水的详细信息
 * @param flwId 流水ID
 * @returns {___anonymous2133_2134}
 */
function getFlwDetailById(flwId) {
    var datas = {};
    $.ajax({
        url: G_WebRoot + 'console//viewFlwDetailAction!view.do?flwId=' + flwId,
        data: '',
        dataType: 'json',
        async: false,
        timeout: 200000,
        success: function (msg) {
            datas = msg.flwDetail;
        },
        error: function (httprequest, error, e) {
            alert(httprequest.responseText);
            alert("请求流水详细信息出错：" + error);
        }
    });
    return datas;
}

/**
 * 根据流水ID和视图类型获取可展示的操作（按钮）
 * @param flwId
 * @param viewType
 * @returns {___anonymous2652_2653}
 */
function getViewCtrlOperations(flwId, viewType) {
    var datas = {};
    $.ajax({
        url: G_WebRoot + 'console/viewAction!genViewCtrlOperatios.do?flwId=' + flwId + '&viewType=' + viewType,   //修改的将&viewType=的双引号改为单引号
        data: '',
        dataType: 'json',
        async: false,
        timeout: 200000,
        success: function (msg) {
            datas = msg.ctrlOperations;
        },
        error: function (httprequest, error, e) {
            alert(httprequest.responseText);
            alert("请求按钮显示信息出错：" + error);
        }
    });
    return datas;
}

/**
 * 根据流水ID获取控制台可展示的操作（按钮）
 * @param flwId 流水ID
 * @returns
 */
function getViewButtons4Proc(flwId) {
    return getViewCtrlOperations(flwId, '0000000000002');
}

/**
 * 根据流水ID获取流水的公共信息
 * @param flwId
 * @returns {___anonymous3382_3383}
 */
function getFlwCommonById(flwId) {
    var datas = {};
    $.ajax({
        url: G_WebRoot + 'console/flwCommonQueryAction!viewSummary.do?id=' + flwId,
        data: '',
        dataType: 'json',
        async: false,
        timeout: 200000,
        success: function (msg) {
            //alert(msg.pojoMap);
            datas = msg.pojoMap;
        },
        error: function (httprequest, error, e) {
            alert(httprequest.responseText);
            alert("查询流水公共信息出错：" + error);
        }
    });
    return datas;
}

﻿function TabTool(obj, objName) {
    this.obj = obj;
    this.objName = objName;
    this.tabIndex = "0";
    this.tabCount = 0;
    this.tabDatas = [];
    if (this.obj && this.obj.tabIndex) {
        this.tabIndex = this.obj.tabIndex;
    }
    if (this.obj && this.obj.datas) {
        this.tabDatas = this.obj.datas;
        this.tabCount = this.tabDatas.length;
    }
    //tabPage名称，用于存放iframe
    this.tabTitleName = objName + "TabTitle";
    this.tabPageName = objName + "TabPage";
}

TabTool.prototype = {
    constructor: TabTool,
    show: function () {
        if (this.obj && this.tabDatas) {
            var titleStr = "";
            var contentStr = "";
            for (var i = 0; i < this.tabDatas.length; i++) {
                var pojo = this.reBuildPojo(this.tabDatas[i]);
                titleStr += this.createTitle(i, pojo);//新建tab信息
                contentStr += this.createContent(i, pojo);//新建tab信息下的主体内容信息
            }
            titleStr = "<div id='" + this.objName + "tabTitleDiv' class='tabTitleDiv'>" + titleStr + "</div>";
            //contentStr=" <div id='"+this.objName+"tabContent' class='tabContent'>"+contentStr+"</div>";
            if (JBF.getBrowseVersion() == 6) {//如果是ie6
                contentStr = " <div id='" + this.objName + "tabContent' class='tabContent'>" + contentStr + "</div>";
            } else {//如果不是ie6
                contentStr = " <div id='" + this.objName + "tabContent' class='tabContent'>" + contentStr + "</div>";
            }
            return titleStr + contentStr;
        }
    },
    /**
     * 对pojo进行重构，并对其未设置值进行初始化
     * @param obj
     * @returns
     */
    reBuildPojo: function (obj) {
        if (obj) {
            if (!obj.title) {
                obj.title = "新建tab";
            }
            if (!obj.content) {
                obj.content = "未初始化";
            }
            if (!obj.type) {
                obj.type = "text";
            }
            if (!obj.isClose) {
                obj.isClose = "false";
            }
            if (!obj.code) {
                obj.code = "0000" + this.tabCount;
            }
        }
        return obj;
    },
    tabFirst: function () {
        var title = JBF.el(this.tabTitleName + "0");
        this.changePanel(title);
    },
    /**
     * 新建tabTitle
     * @param index
     * @param pojo
     * @returns {String}
     */
    createTitle: function (index, pojo) {
        var titleInnerHTML = this.createTitleInnerHtml(index, pojo);
        return "<div class='tabTitle' id='" + (this.tabTitleName + index) + "' srcIndex='" + index + "' code='" + pojo.code + "' onclick='" + this.objName + ".changePanel(this)'>" + titleInnerHTML + "</div>";
    },
    /**
     * 新建tabTitle中的内部div
     * @param index
     * @param pojo
     * @returns {String}
     */
    createTitleInnerHtml: function (index, pojo) {
        var closeStr = "";
        if (pojo.isClose && pojo.isClose == "true") {
            closeStr = "<div class='closeBtn'><a href='javascript:void(0);' onclick='" + this.objName + ".closeTab(event," + index + ");return false;'></a></div>";
        }
        var overStr = "";
        if (this.tabIndex == index) {
            overStr = "Over";
        }
        return "<div class='tabTitleLeft" + overStr + "' ></div><div class='tabTitleCenter" + overStr + "'><div class='text'><a href='#' onclick='return false;'>" + pojo.title + "</a></div>" + closeStr + "</div><div class='tabTitleRight" + overStr + "' ></div>";
    },
    /**
     *新建主体信息的content面板
     */
    createContent: function (index, pojo) {
        var type = pojo.type;
        var styleStr = "";
        if (this.tabIndex != index) {
            styleStr = " style='display:none' ";
        }
        var iframeStr = pojo.content;
        if (type == "url") {
            if (index == this.tabIndex) {//用来进行哪一个tab是默认的选项
                iframeStr = this.createIframe(true, pojo);
            } else {
                iframeStr = this.createIframe(false, pojo);
            }
        }
        return "<div name='" + this.tabPageName + "' id='" + this.tabPageName + index + "' srcIndex='" + index + "' class='tabPage' " + styleStr + ">" + iframeStr + "</div>";
    },
    /*
		*选中当前tab
		*/
    changePanel: function (opt) {
        var tabTitleIndex = opt.attributes["srcIndex"].nodeValue;//获取当前选中节点的srcIndex值
        if (tabTitleIndex != this.tabIndex) {
            this.clearTabAllTitleClasss(opt);
            var tabPanel = JBF.el(this.objName + "tabContent");//用来获取存放iframe的div
            var tabPages = [];
            JBF.elAllChildForClassName(tabPanel, "tabPage", tabPages);
            var tabPage = null;
            for (var i = 0; i < tabPages.length; i++) {
                tab = tabPages[i];
                if (tabTitleIndex == tab.attributes["srcIndex"].nodeValue) {
                    tab.style.display = "";
                    tabPage = tab;
                    var iframes = JBF.getSubNodesByNodeName("IFRAME", tab);
                    if (iframes.length > 0) {
                        var iframe = iframes[0];
                        if (!iframe.attributes["srcBit"]) {
                            iframe.setAttribute("src", iframe.attributes["bak_src"].value);
                            iframe.setAttribute("srcBit", "srcBit");
                        }
                    }
                } else {
                    tab.style.display = "none";
                }
            }
            //每一次点击完按钮后记录下来++，一直记录下来方便其关闭是打个下一个tab,操作之前的tab
            if (null != tabPage) {
                this.tabCount++;
                opt.attributes["srcIndex"].nodeValue = this.tabCount;
                tabPage.attributes["srcIndex"].nodeValue = this.tabCount;
                this.tabIndex = this.tabCount;
            }
        }
    },
    /**
     * 将当前操作的tab设置成活动。将其它设置成静止状态
     */
    clearTabAllTitleClasss: function (opt) {
        var parentNode = opt.parentNode;
        for (var i = 0; i < parentNode.childNodes.length; i++) {
            var node = parentNode.childNodes[i];
            if (typeof (node.className) == "string" && node.className.indexOf("tabTitle") > -1) {
                if (opt == node) {
                    this.setTabTitleClass(opt, "Over");
                } else {
                    this.setTabTitleClass(node);
                }
            }
        }
    },
    /**
     *动态设置tabTitle的样式。对当前操作的tab进行样式变更
     */
    setTabTitleClass: function (opt, over) {
        if (opt && opt.childNodes) {
            for (var i = 0; i < opt.childNodes.length; i++) {
                var child = opt.childNodes[i];
                //alert(child.className);
                if (typeof (child.className) == "string" && child.className.indexOf("tabTitle") > -1) {
                    if (over) {
                        child.className += "Over";
                    } else {
                        var className = child.className.replace("Over", "");
                        child.className = className;
                    }
                }
            }
        }
    },
    /**
     *点击关闭按钮是触发的方法
     */
    closeTab: function (ev) {
        //获取节点
        var opEv = JBF.getEvent(ev);//当前点击的节点事件
        var opObj = JBF.getEventTarget(opEv);//节点
        var tabTitle = JBF.getParentNodeByClassName("tabTitle", opObj);//准备更换css的tab标签
        var parentObj = JBF.getParentNodeByClassName("tabTitleDiv", tabTitle);//tab标签的父节点
        var pagePanelObj = JBF.el(this.objName + "tabContent");//取的所有标签所对应的面板（显示内容）的你节点
        if (null != parentObj) {
            var index = tabTitle.attributes['srcIndex'].value;//获取控件tab头与面板中的对应关系属性
            this.remove(parentObj, index, "tabTitle");//开始移除tabTitle节点
            this.remove(pagePanelObj, index, "tabPage");//移除面板节点
            if (this.tabIndex == index) {//关闭当前  移除面板后要找到下一对获取焦点的tab,及面板,理论上找到上一节点。如果找不到，则直接指向第一个节点，如果关闭非当前节点，不做些操作
                var nextTab = null;
                for (var i = 0; i < parentObj.childNodes.length; i++) {
                    if (parentObj.childNodes[i].attributes['srcIndex'].nodeValue == (index - 1)) {
                        nextTab = parentObj.childNodes[i];
                        break;
                    }
                }
                if (nextTab == null) {
                    nextTab = parentObj.childNodes[0];
                }
                this.changePanel(nextTab);
            }

        }
        opEv.cancelBubble = true;//取消事件向上传递
    },
    /**
     * 移除节点
     * @param parentDiv
     * @param index
     * @param className
     */
    remove: function (parentDiv, index, className) {
        var childs = parentDiv.childNodes;
        for (var i = childs.length - 1; i > -1; i--) {
            var srcIndex = childs[i].attributes['srcIndex'].value;
            if (srcIndex) {
                if (childs[i].className && childs[i].className == className && srcIndex == index) {
                    childs[i].innerHTML = "";
                    parentDiv.removeChild(childs[i]);
                    i = -1;
                }
            }
        }
    },
    /**
     * 动态增加一tab
     * @param obj
     */
    addTab: function (obj) {
        if (obj) {
            obj = this.reBuildPojo(obj);
            var appDiv = JBF.el(this.objName + "tabTitleDiv");
            var tabNode = this.tabIsExist(obj.code, appDiv, 'tabTitle', 'code');
            if (!tabNode) {
                this.tabCount++;
                var newTitleDiv = document.createElement("div");
                newTitleDiv.setAttribute("srcIndex", this.tabCount);
                newTitleDiv.className = 'tabTitle';
                newTitleDiv.innerHTML = this.createTitleInnerHtml(this.tabCount, obj.title, obj.isClose);
                JBF.addEvent(newTitleDiv, "click", this.addTabClick(newTitleDiv));

                newTitleDiv.setAttribute("code", obj.code);
                appDiv.appendChild(newTitleDiv);

                //增加面板
                var newContentPanel = document.createElement("div");
                newContentPanel.id = (this.tabPageName + this.tabCount);
                newContentPanel.setAttribute("srcIndex", this.tabCount);
                newContentPanel.className = "tabPage";
                newContentPanel.name = this.tabPageName;
                newContentPanel.style.display = "none";
                var contentStr = "";
                if (obj.type) {
                    contentStr = this.createIframe(obj.type, true, obj.content);
                }
                newContentPanel.innerHTML = contentStr;
                JBF.el(this.objName + "tabContent").appendChild(newContentPanel);
                this.changePanel(newTitleDiv);
            } else {
                this.changePanel(tabNode);
            }
        }
    },
    createIframe: function (isSrc, pojo) {
        var content = pojo.content;
        var srcBit = " bak_src='" + content + "'";
        if (isSrc) {//如果是默认展开则
            srcBit += "srcBit='srcBit' src='" + content + "'";
        }
        var idStr = "iframe_" + pojo.code;
        return "<iframe id='" + idStr + "' name='" + idStr + "' frameborder='0' width='99%'  height='99%' " + srcBit + "></iframe>";
    },
    getIframeByCode: function (code) {
        return JBF.el("iframe_" + code);
    },
    adjustWidth: function (parentDiv) {
        var tabTitles = [];
        for (var i = 0; i < parentDiv.length; i++) {
            var tabTitle = parentDiv[i];
            if (tabTitle.className && tabTitle.className == "tabTitle") {
                tabTitles.push(tabTitle);
            }
        }
        if (tabTitles.length > 0) {
            for (var i = 0; i < tabTitles.length; i++) {
                alert(tabTitles[i].offsetWidth);
            }
        }

    },
    addTabClick: function (obj) {
        var that = this;
        return function (event) {
            that.changePanel(obj);
        };
    },
    /**
     * 判断当前tab是否存在
     * @param nodeValue
     * @param appDiv
     * @param className
     * @param attributeName
     * @returns
     */
    tabIsExist: function (nodeValue, appDiv, className, attributeName) {
        var childNodes = appDiv.childNodes;
        if (childNodes) {
            for (var i = 0; i < childNodes.length; i++) {
                var subNode = childNodes[i];
                if (subNode.className && subNode.className == className) {
                    var attr = subNode.attributes[attributeName];
                    if (attr) {
                        var divCode = subNode.attributes[attributeName].nodeValue;
                        if (divCode && divCode == nodeValue) {
                            return subNode;
                        }
                    }
                }
            }
        }
        return false;
    },
    dynamicChangeUrl: function (url, type, code) {
        var appDiv = JBF.el(this.objName + "tabTitleDiv");
        var tabNode = this.tabIsExist(code, appDiv, 'tabTitle', 'code');//获取tabTitle节点
        if (tabNode) {
            this.changePanel(tabNode);
        }
        var srcIndex = tabNode.attributes['srcIndex'].nodeValue;
        //取相应的tabContent面板
        var contentDiv = JBF.el(this.objName + "tabContent");
        var contentNode = this.tabIsExist(srcIndex, contentDiv, 'tabPage', 'srcIndex');//获取tabContent节点
        if (contentNode) {
            var childNode = contentNode.childNodes;
            for (var i = 0; i < childNode.length; i++) {
                if (childNode[i].nodeName == "IFRAME") {
                    childNode[i].src = url;
                    i = childNode.length;
                }
            }
        }
    }
};

function Select(id, objName, targetDivObj) {
    this.id = id;
    this.objName = objName;
    this.targetDivObj = targetDivObj;// 目标div
    this.dataObj; // 下拉框后台load数据
    this.width = 200;// 下拉框的宽度
    this.textWidth = 177;// 文本框的宽度
    this.optionHeight = 21;// 操作对像option的高度
    this.optionDivHeight;// 下拉框div的总高度
    this.optionCount = 10;
    this.selectOptValue;// 下拉框value值
    this.selectTextValue;// 下来框text值
    this.iframeObj;// iframe对象遮挡下拉框
    this.iframeLeft;// iframe对象遮挡下拉框左边坐标
    this.iframeTop;// iframe对象遮挡下拉框左边坐标
    this.tagObj;// 输入框对象

    this.dataChangeListners = [];
}

Select.prototype = {
    constructor: Select,
    addDataChangeListner: function (obj) {
        this.dataChangeListners.push(obj);
    },
    fireDataChangeEvent: function () {
        for (var i = 0; i < this.dataChangeListners.length; i++) {
            try {
                this.dataChangeListners[i].processSelectDataChangeEvent({
                    text: this.selectOptValue,
                    value: this.selectTextValue
                });
            } catch (e) {
                alert(this.dataChangeListners[i] + e.message);
            }
        }
        this.getInputObj().blur();
    },
    init: function () {
        var op = this;
        var url = G_WebRoot + 'console/BizCodeControlAction!query.do';
        JBF.ajax(url, "", function (msg) {
            var selectData = msg.pageList;
            selectData.width = window.screen.width * 0.3 * 0.7;
            selectData.optionCount = 10;
            op.dataObj = selectData;
            op.setDivHeight();
            JBF.el(op.targetDivObj).innerHTML = op.getHTML();
        }, function (msg) {
            alert("请求视图框架出错：" + msg.errorMessage);
        });

    },
    setDivHeight: function () {
        if (this.dataObj) {
            if (this.dataObj.width) {
                this.width = this.dataObj.width;
                if (document.all) {
                    this.textWidth = this.width - 23;
                } else {
                    this.textWidth = this.width - 21;
                }
            }
            if (this.dataObj.optionHeight) {
                this.optionHeight = this.dataObj.optionHeight;
            }
            if (this.dataObj.optionCount) {
                if (this.dataObj.length < this.dataObj.optionCount) {
                    this.optionDivHeight = this.dataObj.length
                        * this.optionHeight + 0;
                } else {
                    this.optionDivHeight = this.dataObj.optionCount
                        * this.optionHeight + 0;
                }
            }
        }
    },
    getHTML: function () {
        htmlStr = "<div style=' margin:auto; width:" + this.width + "px;' >";
        htmlStr += "<div class='selectDiv' onclick='" + this.objName
            + ".displaySelectPanel(this,event)'>";
        htmlStr += "<input class='selectTxt' id='" + this.objName
            + "inputId' style='width:" + this.textWidth + "px;'  onkeyup='"
            + this.objName + ".inputValue(this)' >";
        htmlStr += "<div class='selectBtn'><a href='javascript:void(0)' ></a></div>";
        htmlStr += "</div>";
        htmlStr += "<div  style='width:" + this.width
            + "px;'  class='selectedPanel selectedPanelHidden' onclick='"
            + this.objName + ".selectValue(this)'>";
        htmlStr += "<div class='selectedSubPanel' style='height:"
            + this.optionDivHeight + "px;'>";

        htmlStr += "</div></div></div>";
        return htmlStr;
    },
    getOptionStr: function () {
        var optionStr = "";
        if (this.dataObj) {
            for (var i = 0; i < this.dataObj.length; i++) {
                var option = this.dataObj[i];
                var className = "option";
                optionStr += this.returnSechResDiv(className, option);
            }
        }
        return optionStr;
    },
    // 创建遮挡下拉框的iframe面板
    createIframe: function () {
        var iframe = document.createElement("iframe");
        iframe.setAttribute("frameborder", "0");
        iframe.setAttribute("scrolling", "no");
        document.body.appendChild(iframe);
        this.iframeObj = iframe;
    },
    // 设定遮挡下拉框的iframe面板的style
    setIframeStyle: function () {
        this.iframeObj.style.width = this.width + "px";
        this.iframeObj.style.height = this.optionDivHeight + "px";
        this.iframeObj.style.top = this.iframeTop;
        this.iframeObj.style.left = this.iframeLeft;
        this.iframeObj.style.display = "inline";
        this.iframeObj.style.zIndex = 500;
        this.iframeObj.style.position = "absolute";
    },
    // 隐藏遮挡下拉框的iframe面板
    displayIframe: function () {
        if (typeof (this.iframeObj) != 'undefined') {
            this.iframeObj.style.display = "none";
        }
    },
    // 焦点离开下拉框范围时 隐藏下来框
    displaySelectIframe: function () {
        var inputObj = this.getInputObj();
        var pareNodeObj = this.returnParentNode(inputObj);
        var nextNodeObj = JBF.getNextElement(pareNodeObj);
        if (typeof (this.iframeObj) != 'undefined') {
            if (nextNodeObj.className.indexOf('selectedPanelHidden') < 0) {
                this.displayIframe();
                nextNodeObj.className += " selectedPanelHidden";
            }
        }
    },
    displaySelectPanel: function (opPanel, ev) {
        if (typeof (opPanel) == "object" && JBF.getNextElement(opPanel)) {
            var nextNode = JBF.getNextElement(opPanel);// 下一个兄弟节点
            if (typeof (this.iframeObj) == 'undefined') {
                this.createIframe();
            }
            var nextChildNode = JBF.elChildForClassName(nextNode,
                "selectedSubPanel");
            nextChildNode.innerHTML = this.getOptionStr();
            nextNode.style.left = JBF.getAbsX(opPanel) + "px";
            if (nextNode.className.indexOf('selectedPanelHidden') > 0) {
                nextNode.className = nextNode.className.replace(
                    "selectedPanelHidden", "");
                this.iframeLeft = JBF.getAbsX(opPanel) + "px";
                this.iframeTop = JBF.getAbsY(nextNode) + "px";
                this.setIframeStyle();

            } else {
                this.displayIframe();
                nextNode.className += " selectedPanelHidden";
            }
            this.getInputFocus();
            var inputObj = this.getInputObj();
            this.tagObj = inputObj;

        }
        ev.cancelBubble = true;
    },
    selectValue: function (opPanel) {
        var ev = arguments.callee.caller.arguments[0] || window.event;
        var selectObj = JBF.getEventTarget(ev);
        var textParentNode = JBF.getPreElement(opPanel);// 上个兄弟节点
        if (null != textParentNode) {
            var preNode = JBF.elChildForClassName(textParentNode, "selectTxt");
            preNode.value = selectObj.innerHTML;
            this.selectOptValue = selectObj.attributes["value"].value;
            this.selectTextValue = preNode.value;
            preNode.focus();
            preNode.select();
            opPanel.className += " selectedPanelHidden";
            this.displayIframe();
            this.fireDataChangeEvent();// 触发听众
            // this.callBackMethod(this.selectOptValue,preNode.value);
        }
    },
    // 模糊查询
    inputValue: function (inputObj) {
        if (this.getEventKeyCode() != 40 && this.getEventKeyCode() != 38
            && this.getEventKeyCode() != 13) {
            this.keywordsQuery(inputObj);
        } else {
            // 按下键
            this.keyCodeDown();
            // 按上键
            this.keyCodeUp();
            // 按回车键
            this.keyCodeEnter();
        }
    },
    // 获取模糊查询返回的结果div
    returnSechResDiv: function (className, option) {
        return "<div class='" + className + "'><a href='javascript:void(0)' value="
            + option["cfgBizTypeByBizCodeId.id"] + " style='height:"
            + this.optionHeight + "px'>"
            + option["cfgBizTypeByBizCodeId.code"] + "-"
            + option["cfgBizTypeByBizCodeId.name"] + "</a></div>";
    },
    // 获取当前节点的父节点
    returnParentNode: function (inputObj) {
        return inputObj.parentNode;
    },
    // 获取当前节点的下个节点
    returnCurNextNode: function (curNode) {
        return JBF.getNextElement(curNode);
    },
    // 当前节点的前一个兄弟节点
    returnCurPreNode: function (curNode) {
        return JBF.getPreElement(curNode);
    },
    // 获取当前节点的子节点
    returnCurChildNode: function (curNode) {
        return JBF.elChildForClassName(curNode, "selectedSubPanel");
    },
    // 文本框模糊查询
    keywordsQuery: function (inputObj) {
        var inputValue = inputObj.value;
        var tempDiv = "";
        if (this.dataObj) {
            for (var i = 0; i < this.dataObj.length; i++) {
                var className = "option";
                var optionValue = this.dataObj[i];
                var optionStr = optionValue["cfgBizTypeByBizCodeId.code"] + "-"
                    + optionValue["cfgBizTypeByBizCodeId.name"] + "-" + optionValue["cfgBizTypeByBizCodeId.pyszm"];
                if (optionStr.toLowerCase().indexOf(inputValue.toLowerCase()) >= 0) {
                    tempDiv += this.returnSechResDiv(className, optionValue);
                }
            }
            // 获取当前节点的父节点
            var curNodeParentNode = this.returnParentNode(inputObj);
            // 获取当前节点的下一个兄弟节点
            var curNextNode = this.returnCurNextNode(curNodeParentNode);
            curNextNode.className = "selectedPanel";
            // 当前节点的子节点
            var curChildNode = this.returnCurChildNode(curNextNode);
            curChildNode.innerHTML = tempDiv;
            this.tagObj = inputObj;
        }
    },
    // 按向上键
    keyCodeUp: function () {
        if (this.getEventKeyCode() == 38) {
            if (this.tagObj.tagName == 'DIV') {
                var preNode = this.returnCurPreNode(this.tagObj);
                if (preNode == null) {
                    return;
                }
                this.tagObj.className = 'option';
                preNode.className = 'optionEven';
                this.tagObj = preNode;
            }
        }
    },
    //
    keyCodeDown: function () {
        if (this.getEventKeyCode() == 40) {
            // 先判断鼠标是否在input文本框内
            var curNode;
            if (this.tagObj.tagName == 'INPUT') {
                // 获取当前节点的父节点
                var curNodeParentNode = this.returnParentNode(this.tagObj);
                // 获取当前节点的下一个兄弟节点
                var curNextNode = this.returnCurNextNode(curNodeParentNode);
                // 当前节点的子节点
                var curChildNode = this.returnCurChildNode(curNextNode);
                curNode = curChildNode.childNodes[0];
                if (typeof (curNode) == 'undefined') {
                    return;
                }
                curNode.className = 'optionEven';
                this.tagObj = curNode;
                return;
            }
            if (this.tagObj.tagName == 'DIV') {
                var curnextNode = this.returnCurNextNode(this.tagObj);
                if (curnextNode == null) {
                    return;
                }
                curnextNode.className = 'optionEven';
                this.tagObj.className = 'option';
                this.tagObj = curnextNode;
                return;
            }
            // else {
            // alert(3)
            // curNode = this.mouseOverEventObj;
            // var nextNode = this.returnCurNextNode(curNode);
            // nextNode.className = 'auto-div';
            // curNode.className = 'option a';
            // }
        }
    },
    keyCodeEnter: function () {
        if (this.getEventKeyCode() == 13) {
            var curChildNode = this.tagObj.childNodes[0];
            if (typeof (curChildNode) == "undefined") {
                return;
            }
            var selectObjValue = curChildNode.innerHTML;
            var curParentNode = this.returnParentNode(this.tagObj);
            var curParentParentNode = this.returnParentNode(curParentNode);
            var curPreNode = this.returnCurPreNode(curParentParentNode);

            if (null != curPreNode) {
                var preChildNode = JBF.elChildForClassName(curPreNode,
                    "selectTxt");
                preChildNode.value = selectObjValue;
                this.selectOptValue = curChildNode.attributes["value"].value;
                this.selectTextValue = preChildNode.value;
                preChildNode.focus();
                preChildNode.select();
                curParentParentNode.className += " selectedPanelHidden";
                this.displayIframe();
                this.fireDataChangeEvent();
                // this.callBackMethod(this.selectOptValue,preChildNode.value);
            }
        }
    },
    // 获取下来框的 option值
    getText: function () {
        return this.selectTextValue;
    },
    getValue: function () {
        return this.selectOptValue;
    },
    getTextByValue: function (keyValue) {
        var textValue = "";
        if (this.dataObj) {
            for (var i = 0; i < this.dataObj.length; i++) {
                var option = this.dataObj[i];
                if (option.value == keyValue) {
                    textValue = option.text;
                }
            }
        }
        return textValue;
    },
    // 有value值回填text到文本框
    fillTextValue: function (keyValue) {
        var textValue = this.getTextByValue(keyValue);
        var inputObj = this.getInputObj();
        inputObj.value = textValue;
        this.selectOptValue = keyValue;
        this.selectTextValue = textValue;
    },
    getInputFocus: function (dataObj) {
        var inputObj = this.getInputObj();
        inputObj.focus();
    },
    // 获取文本框对象
    getInputObj: function () {
        return JBF.el(this.objName + "inputId");
    },
    //
    getEventKeyCode: function () {
        return JBF.getKeyValue(event);
    }
};
﻿/**
 *行名行号录入组件
 *@pDataUupdateUrl:更新数据的URL
 *@pType:录入的数据的类型：BankCodeBankName:行名行号，1:交换行号
 *  尚路彦
 */
function BkNameBkCode(pDataUpdateUrl, pDataPartUrl, pType, pId, pAreaComp, pUseOcx) {
    this.dataUpdateUrl = pDataUpdateUrl;
    this.type = pType;
    this.inputBankTextId = "input_bank_text" + pId;
    this.nameDivId = "name_div" + pId;
    this.transferFlagId = "transferFlag" + pId;
    this.transferDivId = "transferDiv" + pId;
    this.transferBkNameId = "transferBkName" + pId;
    this.inBankNameId = "inBankName" + pId;
    this.areaComp = pAreaComp;
    this.dataPartUrl = pDataPartUrl;
    this.banklist = [];
    this.index = 0;
    this.id = pId;
    this.AixInput = null;
    this.lastSearch = "";
    this.isSelect = false;
    this.useOcx = pUseOcx;
    this.maxShowSize = 50;
    this.inputBankText = null;
}

BkNameBkCode.prototype.getInputBankText = function () {
    if (document.getElementById(this.inputBankTextId) != null) {
        return document.getElementById(this.inputBankTextId);
    } else {
        return this.inputBankText;
    }
};
BkNameBkCode.prototype.getNameDiv = function () {
    return document.getElementById(this.nameDivId);
};
BkNameBkCode.prototype.getTransferFlag = function () {
    return document.getElementById(this.transferFlagId);
};
BkNameBkCode.prototype.getTransferDiv = function () {
    return document.getElementById(this.transferDivId);
};
BkNameBkCode.prototype.getTransferBkName = function () {
    return document.getElementById(this.transferBkNameId);
};
BkNameBkCode.prototype.getAreaComp = function () {
    return this.areaComp;
};
BkNameBkCode.prototype.getInBankName = function () {
    return document.getElementById(this.inBankNameId);
};
BkNameBkCode.prototype.init = function () {
    this.AixInput = document.getElementById("AixInput");
    this.AixInput.SetTempDirectory('c:/COST');
    //创建行名列表展示框,初始化时隐藏
    var bankNameDiv = document.createElement("div");
    bankNameDiv.id = this.nameDivId;
    bankNameDiv.style.overflow = "auto";
    bankNameDiv.style.position = "absolute";
    //bankNameDiv.style.display = "none";
    document.body.appendChild(bankNameDiv);


    var tableObject = document.createElement("table");
    this.getAreaComp().appendChild(tableObject);

    var tbody = document.createElement("tbody");
    tableObject.appendChild(tbody);

    var trBkInput = document.createElement("tr");
    var tdBkInput = document.createElement("td");
    trBkInput.appendChild(tdBkInput);
    //tableObject.appendChild(trBkInput);
    tbody.appendChild(trBkInput);

    var input_Obj = document.createElement("input");
    input_Obj.id = this.inputBankTextId;
    //input_Obj.name=this.inputBankTextId;
    input_Obj.setAttribute("type", "text");
    input_Obj.onkeyup = this.onSearchData();
    input_Obj.setAttribute("onkeyup", this.id + ".onSearchData()()");
    tdBkInput.appendChild(input_Obj);
    this.inputBankText = input_Obj;

    var input_bkName_Obj = document.createElement("input");
    input_bkName_Obj.id = this.inBankNameId;
    input_bkName_Obj.setAttribute("type", "text");

    var inputBkName = document.createElement("lable");
    inputBkName.innerText = "行名";

    var tdBkNameInput = document.createElement("td");
    tdBkNameInput.appendChild(inputBkName);
    tdBkNameInput.appendChild(input_bkName_Obj);
    trBkInput.appendChild(tdBkNameInput);

    if (this.type == 'BankCodeBankName') {//如果行名行号录入，创建转汇录入字段
        var trTransferInput = document.createElement("tr");
        var trans_Flag_Obj = document.createElement("input");

        trans_Flag_Obj.setAttribute("type", "checkbox");
        trans_Flag_Obj.onclick = this.onTransferFlagChanged();
        trans_Flag_Obj.setAttribute("onclick", this.id + ".onTransferFlagChanged()()");
        trans_Flag_Obj.id = this.transferFlagId;
        trans_Flag_Obj.value = "1";


        var trans_flag_lable = document.createElement("lable");
        trans_flag_lable.innerText = "转汇";

        var tdTransFlagInput = document.createElement("td");
        trTransferInput.appendChild(tdTransFlagInput);
        tdTransFlagInput.appendChild(trans_flag_lable);
        tdTransFlagInput.appendChild(trans_Flag_Obj);

        var trans_div = document.createElement("div");
        trans_div.id = this.transferDivId;
        trans_div.style.display = "none";

        var trans_bk_name = document.createElement("input");
        trans_bk_name.setAttribute("type", "text");
        trans_bk_name.id = this.transferBkNameId;
        var trans_bkname_lable = document.createElement("lable");
        trans_bkname_lable.innerText = "转汇行名";
        var tdTransBkNameInput = document.createElement("td");
        trans_div.appendChild(trans_bkname_lable);
        trans_div.appendChild(trans_bk_name);


        tdTransBkNameInput.appendChild(trans_div);
        trTransferInput.appendChild(tdTransBkNameInput);

        //tableObject.appendChild(trTransferInput);
        tbody.appendChild(trTransferInput);
    }
};
BkNameBkCode.prototype.setAttribute = function (name, value) {
    this.getInputBankText().setAttribute(name, value);
};
BkNameBkCode.prototype.getValue = function () {
    var value = '';
    if (this.type == 'BankCodeBankName') {
        value = this.getInBankName().value + "\t" + this.getInputBankText().value + "\t" + this.getTransferFlag().value + "\t" + this.getTransferBkName();
    } else {
        value = this.getInBankName().value + "\t" + this.getInputBankText().value;
    }
    return value;
};
BkNameBkCode.prototype.getAttribute = function (name) {
    this.getInputBankText().getAttribute(name);
};
BkNameBkCode.prototype.toHtml = function () {
    var html = this.getAreaComp().innerHTML;
    this.getAreaComp().innerHTML = "";
    return html;
};
BkNameBkCode.prototype.changeTransferFlag = function () {
    if (this.getTransferFlag().checked == true) {
        this.getTransferDiv().style.display = "";
    } else {
        this.getTransferDiv().style.display = "none";
    }
};
BkNameBkCode.prototype.onTransferFlagChanged = function () {
    var obj = this;
    return function () {
        if (obj.getTransferFlag().checked == true) {
            obj.getTransferDiv().style.display = "";
        } else {
            obj.getTransferDiv().style.display = "none";
        }
    };
};
BkNameBkCode.prototype.keyPress = function () {
    var pObj = this;
    document.onkeydown = function () {
        var detail = document.getElementById("data_detail");

        if (detail != null) {
            if (event.keyCode == 40) {
                pObj.index++;
                if (pObj.index > 20) i = 20;
                var retry = 0;
                while (retry++ < 3) {
                    try {
                        if (pObj.index != 0) {
                            document.getElementById("id" + (pObj.index - 1)).style.backgroundColor = "#FFCCFF";
                        }
                        document.getElementById("id" + pObj.index).style.backgroundColor = "#D9EDF6";
                        document.getElementById("id" + pObj.index).scrollIntoView();
                        break;
                    } catch (e) {
                        pObj.index--;
                        if (pObj.index < 0) pObj.index = 1;
                    }
                }
            }

            if (event.keyCode == 38) {
                pObj.index--;
                if (pObj.index < 0) pObj.index = 0;
                var retry = 0;
                while (retry++ < 3) {
                    try {
                        document.getElementById("id" + (pObj.index + 1)).style.backgroundColor = "#FFCCFF";
                        document.getElementById("id" + pObj.index).style.backgroundColor = "#D9EDF6";
                        document.getElementById("id" + pObj.index).scrollIntoView();
                        break;
                    } catch (e) {
                        pObj.index++;
                    }
                }
            }
            if (event.keyCode == 27) {
                if (detail != null) {
                    pObj.getNameDiv().removeChild(document.getElementById("data_detail"));
                }
            }
            if (event.keyCode == 13) {
                //if(event.srcElement.tagName==this.inputBankTextId){
                pObj.enterEvent();
                //}
            }
        }
    };
};
/**
 * 删除弹出窗口
 */
BkNameBkCode.prototype.deleteInfo = function () {
    var detail_obj = document.getElementById("data_detail");
    if (detail_obj != null) {
        this.getNameDiv().removeChild(document.getElementById("data_detail"));
    }
    //allowSubmitFlag=true;
    this.isSelect = false;
};
BkNameBkCode.prototype.showSearchResult = function (obj) {
    this.banklist = obj;
    this.deleteInfo();
    var result_length = this.banklist.length - 1;
    if (result_length < 1) {
        this.getTransferBkName().value = '';
        this.getInBankName().value = '';
        return false;
    }
    var height = (Number(25 * result_length) < 400) ? String(25 * result_length) : "400";
    var de_str = "<div id ='data_detail' ><tr><td bgcolor='#FFFFFF'><div style='overflow-y:auto;z-index:99999999999;overflow-x:auto;width=400;height=" + height + "' ><table STYLE='table-layout:fixed' bgcolor='#FFCCFF' >";
    var searchCount = 0;
    for (var t = 0; t < result_length; t++) {
        if (this.banklist[t]) {
            searchCount++;
            de_str = de_str.concat("<tr id = id" + t + " onmouseover = '" + this.id + ".onmouseover_color(this);' " +
                "onmouseout = \"" + this.id + ".onmouseout_color(this);\" onclick='" + this.id + ".onmouseclick_color(this," + t + ",\"" + this.inputBankTextId + "\");'><td >");
            de_str = de_str.concat(trimBlank(this.banklist[t].split('\t')[1]) + "&nbsp;" + trimBlank(this.banklist[t].split('\t')[2]));
            de_str = de_str.concat("</td></tr>");
        }
    }
    var tempNotice = '';
    if (searchCount >= 10) {
        tempNotice = '<tr height="30" width="100%"><td><span style="width:100%;color:#ff6d16;background:#FFCCFF"> 以上仅列出' + this.maxShowSize + '条符合的记录，请继续输入关键字查询</span><td></tr>';
    }
    this.index = 0;
    de_str = de_str.concat("</table><td></tr>" + tempNotice + "</div>");
    this.getNameDiv().innerHTML = de_str;
    var tt = this.getInputBankText();
    this.getNameDiv().style.top = JBF.getAbsY(tt) - this.getNameDiv().clientHeight;
    this.getNameDiv().style.left = JBF.getAbsX(tt);
    this.getNameDiv().style.zIndex = 9999999;
    document.getElementById("id0").style.backgroundColor = "#D9EDF6";
    this.keyPress();
};
BkNameBkCode.prototype.enterEvent = function () {
    if (document.getElementById("data_detail") != null) {
        if (trimBlank(this.banklist[this.index].split('\t')[1]).length != 0) {
            this.getInputBankText().value = trimBlank(this.banklist[this.index].split('\t')[1]);
            this.getInBankName().value = trimBlank(this.banklist[this.index].split('\t')[2]);
            this.getInputBankText().focus();
        }
        this.getNameDiv().removeChild(document.getElementById("data_detail"));
    }

};
BkNameBkCode.prototype.onSearchData = function () {

    var obj = this;
    return function () {
        if (window.event && window.event.keyCode == 13) {
            obj.enterEvent();
        }
        var search = obj.getInputBankText().value;
        if (event == null || (event.keyCode != 13 && event.keyCode != 27 && event.keyCode != 38 && event.keyCode != 40)) {
            var retBank = "";
            try {
                if (obj.useOcx == true) {
                    try {
                        //设置本地临时目录
                        if (obj.AixInput.UpdateData(obj.dataUpdateUrl, obj.type) != 1) {
                            return;
                        }
                        ;
                        retBank = obj.AixInput.GetBanks(search, obj.type, obj.maxShowSize);
                    } catch (e) {
                        retBank = obj.retrieveFromBkEnd(dataPartUrl + "&search=" + encodeURIComponent(search));
                    }
                } else {
                    retBank = obj.retrieveFromBkEnd(dataPartUrl + "&search=" + encodeURIComponent(search));
                }
            } catch (e) {
            }
            var result_length = retBank.split('\n').length - 1;
            if (result_length < 1) {
                obj.getInputBankText().value = obj.lastSearch;
            } else {
                obj.showSearchResult(retBank.split('\n'));
                obj.lastSearch = search;
            }
        }
    };
};

BkNameBkCode.prototype.retrieveFromBkEnd = function (url, search) {
    var req;
    if (window.ActiveXObject) {
        req = new ActiveXObject("Microsoft.XMLHTTP");
        if (req) {
            var sendUrl = url + "&search=" + encodeURIComponent(search) + "&date=" + (new Date());
            req.open("GET", sendUrl, false);
            req.send(null);
            return req.responseText;

        }
    } else {
        alert("不支持");
    }
};

BkNameBkCode.prototype.onmouseover_color = function (obj) {
    obj.style.backgroundColor = '#D9EDFF';
};
BkNameBkCode.prototype.onmouseout_color = function (obj) {
    if (obj.x != "1") obj.style.backgroundColor = '#FFCCFF';
};
BkNameBkCode.prototype.onmouseclick_color = function (obj, index, nm) {
    if (obj.x != "1")
        obj.style.backgroundColor = "#86C3D6";
    else {
        obj.x = "0";
        obj.style.backgroundColor = '#FFCCFF';
    }
    if (trimBlank(this.banklist[index].split('\t')[2]).length != 0) {
        this.getInputBankText().value = trimBlank(this.banklist[index].split('\t')[1]);
        this.getInBankName().value = trimBlank(this.banklist[index].split('\t')[2]);
        this.getInputBankText().focus();
        this.isSelect = true;
    }
    this.getNameDiv().removeChild(document.getElementById("data_detail"));

};


// 去左空格;
function ltrim(s) {
    return s.replace(/^\s*/, "");
}

function trimBlank(value) {
    if (value == "undefined" || value == null) {
        return '';
    }
    return trim(value);
}

// 去右空格;
function rtrim(s) {
    return s.replace(/\s*$/, "");
}

// 左右空格;
function trim(s) {
    return rtrim(ltrim(s));
}
﻿/**
 *省市县录入组件
 *@pDataUupdateUrl:更新数据的URL
 *@pType:录入的数据的类型：BankCodeBankName:行名行号，1:交换行号
 *  尚路彦
 */
function ChinaTerritory(pDataUpdateUrl, pDataPartUrl, pType, pId, pAreaComp, pUseOcx) {
    this.dataUpdateUrl = pDataUpdateUrl + "?type" + pType;
    this.type = pType;
    this.inputBankTextId = "input_bank_text" + pId;
    this.nameDivId = "name_div" + pId;

    this.inBankNameId = "inBankName" + pId;
    this.areaComp = pAreaComp;
    this.dataPartUrl = pDataPartUrl;
    this.banklist = [];
    this.index = 0;
    this.id = pId;
    this.AixInput = null;
    this.lastSearch = "";
    this.isSelect = false;
    this.useOcx = pUseOcx;
    this.maxShowSize = 25;
    this.inputBankText = null;
}

ChinaTerritory.prototype.getInputBankText = function () {
    if (document.getElementById(this.inputBankTextId) != null) {
        return document.getElementById(this.inputBankTextId);
    } else {
        return this.inputBankText;
    }
};
ChinaTerritory.prototype.getNameDiv = function () {
    return document.getElementById(this.nameDivId);
};

ChinaTerritory.prototype.getAreaComp = function () {
    return this.areaComp;
};
ChinaTerritory.prototype.getInBankName = function () {
    return document.getElementById(this.inBankNameId);
};
ChinaTerritory.prototype.init = function () {
    this.AixInput = document.getElementById("AixInput");
    this.AixInput.SetTempDirectory('c:/COST');
    //创建行名列表展示框,初始化时隐藏
    var bankNameDiv = document.createElement("div");
    bankNameDiv.id = this.nameDivId;
    bankNameDiv.name = this.nameDivId;
    bankNameDiv.setAttribute("name", this.nameDivId);
    bankNameDiv.style.overflow = "auto";
    bankNameDiv.style.position = "absolute";
    document.body.appendChild(bankNameDiv);

    var input_Obj = document.createElement("input");
    input_Obj.id = this.inputBankTextId;
    //input_Obj.name=this.inputBankTextId;
    input_Obj.setAttribute("type", "text");
    input_Obj.onkeyup = this.onSearchData();
    input_Obj.setAttribute("onkeyup", this.id + ".onSearchData()()");

    input_Obj.onfocusout = this.onInputFinish();
    input_Obj.setAttribute("onfocusout", this.id + ".onInputFinish()()");

    this.inputBankText = input_Obj;

    var input_bkName_Obj = document.createElement("input");
    input_bkName_Obj.id = this.inBankNameId;
    input_bkName_Obj.setAttribute("type", "hidden");

    this.getAreaComp().appendChild(this.inputBankText);
    this.getAreaComp().appendChild(input_bkName_Obj);
};
ChinaTerritory.prototype.setAttribute = function (name, value) {
    if (this.getInputBankText() != null) {
        this.getInputBankText().setAttribute(name, value);
    } else {
        this.inputBankText.setAttribute(name, value);
    }
};
ChinaTerritory.prototype.getValue = function () {
    return this.getInBankName().value + "#" + this.getInputBankText().value;
};
ChinaTerritory.prototype.getAttribute = function (name) {
    this.getInputBankText().getAttribute(name);
};
ChinaTerritory.prototype.toHtml = function () {
    var html = this.getAreaComp().innerHTML;
    this.getAreaComp().innerHTML = "";
    return html;
};
ChinaTerritory.prototype.onInputFinish = function () {
    var obj = this;
    return function () {
        if (document.activeElement.id != obj.inBankNameId && document.activeElement.id != "data_detail_inner" && document.activeElement.id != "data_detail") {
            //obj.enterEvent();
        }
    };
};
ChinaTerritory.prototype.keyPress = function () {
    var pObj = this;
    var detail = document.getElementById("data_detail");
    var detail_inner = document.getElementById("data_detail_inner");
    if (detail != null) {
        if (event.keyCode == 40) {
            pObj.index++;
            if (pObj.index > 20) i = 20;
            var retry = 0;
            while (retry++ < 3) {
                try {
                    if (pObj.index != 0) {
                        document.getElementById("id" + (pObj.index - 1)).style.backgroundColor = "#FFCCFF";
                    }
                    document.getElementById("id" + pObj.index).style.backgroundColor = "#D9EDF6";
                    detail_inner.scrollTop += 20;
//							   document.getElementById("id"+pObj.index).scrollIntoView();
                    break;
                } catch (e) {
                    pObj.index--;
                    if (pObj.index < 0) pObj.index = 1;
                }
            }
        }

        if (event.keyCode == 38) {
            pObj.index--;
            if (pObj.index < 0) pObj.index = 0;
            var retry = 0;
            while (retry++ < 3) {
                try {
                    document.getElementById("id" + (pObj.index + 1)).style.backgroundColor = "#FFCCFF";
                    document.getElementById("id" + pObj.index).style.backgroundColor = "#D9EDF6";
                    detail_inner.scrollTop -= 20;
//					    document.getElementById("id"+pObj.index).scrollIntoView();
                    break;
                } catch (e) {
                    pObj.index++;
                }
            }
        }
        if (event.keyCode == 27) {
            if (detail != null) {
                pObj.getNameDiv().removeChild(document.getElementById("data_detail"));
            }
        }
        if (event.keyCode == 13) {
            //if(event.srcElement.tagName==this.inputBankTextId){
            pObj.enterEvent();
            dataInputOperator.formManager.isAddressFlag = false;
            //}
        }
    }
//			 };
};
/**
 * 删除弹出窗口
 */
ChinaTerritory.prototype.deleteInfo = function () {
    var detail_obj = document.getElementById("data_detail");
    if (detail_obj != null) {
        this.getNameDiv().removeChild(document.getElementById("data_detail"));
    }
    //allowSubmitFlag=true;
    this.isSelect = false;
};
ChinaTerritory.prototype.showSearchResult = function (obj) {
    this.banklist = obj;
    this.deleteInfo();
    var result_length = this.banklist.length - 1;
    if (result_length < 1) {
        this.getInBankName().value = '';
        return false;
    }
    var height = (Number(25 * result_length) < 250) ? String(25 * result_length) : "200";
    var de_str = "<div id ='data_detail' ><tr><td bgcolor='#FFFFFF'><div id='data_detail_inner' style='overflow-y:auto;z-index:99999999999;overflow-x:auto;width=250;height=" + height + "' ><table STYLE='table-layout:fixed' bgcolor='#FFCCFF' >";
    var searchCount = 0;
    for (var t = 0; t < result_length; t++) {
        if (this.banklist[t]) {
            searchCount++;
            de_str = de_str.concat("<tr id = id" + t + " onmouseover = '" + this.id + ".onmouseover_color(this);' " +
                "onmouseout = \"" + this.id + ".onmouseout_color(this);\" onclick='" + this.id + ".onmouseclick_color(this," + t + ",\"" + this.inputBankTextId + "\");'><td >");
            de_str = de_str.concat(trimBlank(this.banklist[t].split('\t')[2]));
            de_str = de_str.concat("</td></tr>");
        }
    }
    var tempNotice = '';
    if (searchCount >= 10) {
        tempNotice = '<tr height="30" width="100%"><td><span style="width:100%;color:#ff6d16;background:#FFCCFF"> 以上仅列出' + this.maxShowSize + '条符合的记录，请继续输入关键字查询</span><td></tr>';
    }
    this.index = 0;
    de_str = de_str.concat("</table><td></tr>" + tempNotice + "</div>");
    this.getNameDiv().innerHTML = de_str;
    var tt = this.getInputBankText();

    var curNode = tt;
    var minusHeight = 0;
    while (true) {
        if (curNode.parentNode != null) {
            if (curNode.parentNode.tagName == 'DIV' || curNode.parentNode.tagName == "SPAN") {
                minusHeight = minusHeight + curNode.parentNode.scrollTop;
            }
            curNode = curNode.parentNode;
        } else {
            break;
        }
    }
    this.getNameDiv().style.top = JBF.getAbsY(tt) - this.getNameDiv().clientHeight - minusHeight;
    this.getNameDiv().style.left = JBF.getAbsX(tt);

    this.getNameDiv().style.zIndex = 9999999;
    document.getElementById("id0").style.backgroundColor = "#D9EDF6";
//	    this.keyPress();
    dataInputOperator.formManager.isAddressFlag = true;
};
ChinaTerritory.prototype.enterEvent = function () {
    if (document.getElementById("data_detail") != null) {
        if (trimBlank(this.banklist[this.index].split('\t')[1]).length != 0) {
            this.getInputBankText().value = trimBlank(this.banklist[this.index].split('\t')[2]);
            this.getInBankName().value = trimBlank(this.banklist[this.index].split('\t')[1]);
            this.getInputBankText().focus();
        }
        this.getNameDiv().removeChild(document.getElementById("data_detail"));
    }

};

ChinaTerritory.prototype.onSearchData = function () {

    var obj = this;
    return function () {
        if (window.event != null && window.event.keyCode == 13) {
            obj.enterEvent();
        }
        var search = obj.getInputBankText().value;
        if (event == null || (event.keyCode != 13 && event.keyCode != 27 && event.keyCode != 38 && event.keyCode != 40)) {
            var retBank = "";
            try {
                if (obj.useOcx == true) {
                    try {
                        //设置本地临时目录
                        if (obj.AixInput.UpdateData(obj.dataUpdateUrl, obj.type) != 1) {
                            return;
                        }
                        ;
                        retBank = obj.AixInput.GetBanks(search, obj.type, obj.maxShowSize);
                    } catch (e) {
                        retBank = obj.retrieveFromBkEnd(dataPartUrl + "&search=" + encodeURIComponent(search));
                    }
                } else {
                    retBank = obj.retrieveFromBkEnd(dataPartUrl + "&search=" + encodeURIComponent(search));
                }
            } catch (e) {
            }
            var result_length = retBank.split('\n').length - 1;
            if (result_length < 1) {
                obj.getInputBankText().value = obj.lastSearch;
            } else {
                obj.showSearchResult(retBank.split('\n'));
                obj.lastSearch = search;
            }
        }
    };
};

ChinaTerritory.prototype.retrieveFromBkEnd = function (url, search) {
    var req;
    if (window.ActiveXObject) {
        req = new ActiveXObject("Microsoft.XMLHTTP");
        if (req) {
            var sendUrl = url + "&search=" + encodeURIComponent(search) + "&date=" + (new Date());
            req.open("GET", sendUrl, false);
            req.send(null);
            return req.responseText;

        }
    } else {
        alert("不支持");
    }
};

ChinaTerritory.prototype.onmouseover_color = function (obj) {
    obj.style.backgroundColor = '#D9EDFF';
};
ChinaTerritory.prototype.onmouseout_color = function (obj) {
    if (obj.x != "1") obj.style.backgroundColor = '#FFCCFF';
};
ChinaTerritory.prototype.onmouseclick_color = function (obj, index, nm) {
    dataInputOperator.formManager.isAddressFlag = false;
    if (obj.x != "1")
        obj.style.backgroundColor = "#86C3D6";
    else {
        obj.x = "0";
        obj.style.backgroundColor = '#FFCCFF';
    }
    if (trimBlank(this.banklist[index].split('\t')[2]).length != 0) {
        this.getInputBankText().value = trimBlank(this.banklist[index].split('\t')[2]);
        this.getInBankName().value = trimBlank(this.banklist[index].split('\t')[1]);
        this.getInputBankText().focus();
        this.isSelect = true;
    }
    this.getNameDiv().removeChild(document.getElementById("data_detail"));

};


// 去左空格;
function ltrim(s) {
    return s.replace(/^\s*/, "");
}

function trimBlank(value) {
    if (value == "undefined" || value == null) {
        return '';
    }
    return trim(value);
}

// 去右空格;
function rtrim(s) {
    return s.replace(/\s*$/, "");
}

// 左右空格;
function trim(s) {
    return rtrim(ltrim(s));
}

/**
 * 作者：曹金博 描述：跨行数据补录脚本 时间：2009-11-24
 * 吴渊修改（trimBlank方法为appcoscheck中定义）
 */
var cord_list = [];
var index = 0;
var isUserActive = '1';
var dataMixBatch = function () {
    this.isSelect = false;
    this.inputId = "";
    return {
        getInputValues: function () {

        },
        /**
         * 初始化输入框的焦点
         */
        init: function () {
            document.getElementById("input_bank_text").focus();
        },
        /**
         * 行样式控制


         */
        reTableCss: function reTableCss() {
            var thisTrs = document.getElementById('action_table').document.getElementsByTagName('tr');
            for (i = 4; i < thisTrs.length - 1; i++) {
                if (thisTrs[i].firstChild.firstChild.checked) {
                    thisTrs[i].style.backgroundColor = '#D7DA00';
                } else {
                    thisTrs[i].style.backgroundColor = (i % 2 == 0) ? '' : '#eeeeee';
                    thisTrs[i].onmouseover = function () {
                        thisTrs[i].style.backgroundColor = '#ccccff';
                    }
                }
                alert(i);
            }
        },
        setSelection: function () {
            document.getElementById("input_bank_text").value = document.selection.createRange().text;
            // document.getElementById("input_bank_text").focus();
        },
        /**
         * 行样式执行


         */
        choice: function choice(obj) {
            this.reTableCss();
        },
        /**
         * 关闭明细窗口
         */
        goBatchQuery: function goBatchQuery() {
            window.close();
        },
        /**
         * 行样式
         */
        onmouseover_color: function (obj) {
            obj.style.backgroundColor = '#D9EDFF';
        },
        /**
         * 行样式
         */
        onmouseout_color: function (obj) {
            if (obj.x != "1") obj.style.backgroundColor = '#FFCCFF';
        },
        /**
         * 选择查询结果数据
         */
        onmouseclick_color: function (obj, index, nm) {
            dataInputOperator.formManager.isBankInput = false;
            if (obj.x != "1")
                obj.style.backgroundColor = "#86C3D6";
            else {
                obj.x = "0";
                obj.style.backgroundColor = '#FFCCFF';
            }
            if (trimBlank(cord_list[index].split('\t')[2]).length != 0) {
                var bankObj = document.getElementById(nm);
                bankObj.value = trimBlank(cord_list[index].split('\t')[2]);
                bankObj.tValue = bankObj.value;
                var input_id = nm.split("_")[1];
                document.getElementById(input_id + "Exception").innerHTML = "&nbsp;行号：" + (cord_list[index].split('\t')[1]);
                bankObj.focus();
                this.isSelect = true;
            }
            i = 0;
            document.getElementById("name_div").removeChild(document.getElementById("data_detail"));
            allowSubmitFlag = true;
        },
        /**
         * getTask页面快捷键操作(数据查询、数据提交)
         */
        inputOnkeyDown: function () {
            this.detailInfo();
        },

        /**
         * 校验查询条件
         */
        validateInput: function () {
            var vali_bool = false;
            var input_bank_text = document.getElementById("input_bank_text") == null ? "" : document.getElementById("input_bank_text").value;
            if (input_bank_text.length == 0) {
                vali_bool = true;
                this.deleteInfo();
            }

            return vali_bool;
        },
        validateNull: function () {
            var vali_bool = false;
            var input_bank_text = document.getElementById("input_bank_text") == null ? "" : document.getElementById("input_bank_text").value;
            if (input_bank_text.length == 0)
                vali_bool = true;
            return vali_bool;
        },
        /**
         * 删除弹出窗口
         */
        deleteInfo: function () {
            var detail_obj = document.getElementById("data_detail");
            if (detail_obj != null) {
                i = 0;
                document.getElementById("name_div").removeChild(document.getElementById("data_detail"));
            }
            allowSubmitFlag = true;
            this.isSelect = false;
        },

        hiddenInfo: function () {
            var detail_obj = document.getElementById("data_detail");
            if (detail_obj != null)
                detail_obj.innerHTML = "";
            this.isSelect = false;
        },
        /**
         * 弹出查询数据
         */
        detailInfo: function (obj, nm) {
            dataMixBatch.inputId = nm;
            cord_list = obj;
            this.deleteInfo();
            var result_length = cord_list.length - 1;
            if (result_length < 1) {
                document.getElementById('changeBankName').value = '';
                document.getElementById('inBankName').value = '';
                return false;
            }
            var height = (Number(25 * result_length) < 400) ? String(20 * result_length) : "150";
            var de_str = "<div id ='data_detail' ><tr><td bgcolor='#FFFFFF'><div id='sc_div' style='overflow-y:auto;z-index:99999999999;overflow-x:auto;width=400;height=" + height + "' ><table STYLE='table-layout:fixed' bgcolor='#FFCCFF' >";
            var searchCount = 0;
            for (var t = 0; t < result_length; t++) {
                if (cord_list[t]) {
                    searchCount++;

                    de_str = de_str.concat("<tr id = id" + t + " onmouseover = 'javascript:dataMixBatch.onmouseover_color(this);' " +
                        "onmouseout = 'javascript:dataMixBatch.onmouseout_color(this);' onclick='javascript:dataMixBatch.onmouseclick_color(this," + t + ",\"" + nm + "\");'><td >");
                    //de_str = de_str.concat("&nbsp;"+cord_list[i].split('\t')[2]).concat("&nbsp;&nbsp;&nbsp;").concat(cord_list[i].split('\t')[3]);
                    de_str = de_str.concat(trimBlank(cord_list[t].split('\t')[1]) + "&nbsp;" + trimBlank(cord_list[t].split('\t')[2]));
                    de_str = de_str.concat("</td></tr>");
                }
            }
            var tempNotice = '';
            if (searchCount >= 10) {
                tempNotice = '<tr height="30" width="100%"><td><span style="width:100%;color:#ff6d16;background:#FFCCFF"> 以上仅列出50条符合的记录，请继续输入关键字查询</span><td></tr>';
            } else {
                tempNotice = '<tr height="30" width="100%"><td><span style="width:100%;color:#ff6d16;background:#FFCCFF"> 以上仅列出' + searchCount + '条符合的记录，请继续输入关键字查询</span><td></tr>';
            }
            index = 0;
            de_str = de_str.concat("</table><td></tr>" + tempNotice + "</div>");
            document.getElementById("name_div").innerHTML = de_str;
            ///
            var tt = document.getElementById(nm);
            document.getElementById('name_div').style.top = JBF.getAbsY(tt) - document.getElementById('name_div').clientHeight;
            document.getElementById('name_div').style.left = JBF.getAbsX(tt);
            document.getElementById('name_div').style.zIndex = 9999999;
            document.getElementById("id0").style.backgroundColor = "#D9EDF6";
//					    this.keyPress(nm);
            dataInputOperator.formManager.isBankInput = true;
        },


        /**
         * 查询数据快捷键操作
         */
        keyPress: function (nm) {
            nm = dataMixBatch.inputId;
            var detail = document.getElementById("data_detail");
            var sc_div = document.getElementById("sc_div");
            if (detail != null) {
                if (event.keyCode == 40) {
                    index++;
                    if (index > 20) i = 20;
                    var retry = 0;
                    while (retry++ < 3) {
                        try {
                            if (index != 0) {
                                document.getElementById("id" + (index - 1)).style.backgroundColor = "#FFCCFF";
                            }
                            document.getElementById("id" + index).style.backgroundColor = "#D9EDF6";
                            sc_div.scrollTop += 20;
//								   document.getElementById("id"+index).scrollIntoView();
                            break;
                        } catch (e) {
                            index--;
                            if (index < 0) index = 1;
                        }
                    }
                }

                if (event.keyCode == 38) {
                    index--;
                    if (index < 0) index = 0;
                    var retry = 0;
                    while (retry++ < 3) {
                        try {
                            document.getElementById("id" + (index + 1)).style.backgroundColor = "#FFCCFF";
                            document.getElementById("id" + index).style.backgroundColor = "#D9EDF6";
                            sc_div.scrollTop -= 20;
                            //document.getElementById("id"+index).scrollIntoView();
                            break;
                        } catch (e) {
                            index++;
                        }
                    }
                }
                if (event.keyCode == 27) {
                    if (detail != null) {
                        i = 0;
                        document.getElementById("name_div").removeChild(document.getElementById("data_detail"));
                    }
                }
                if (event.keyCode == 13) {
                    if (detail != null) {
                        enterEvent();
                        dataInputOperator.formManager.isBankInput = false;
                    }
                }
            }
        }
    };

}();

function retrieveFromBkEnd(url, search) {
    var req;
    if (window.ActiveXObject) {
        req = new ActiveXObject("Microsoft.XMLHTTP");
        if (req) {
            var sendUrl = url + "&search=" + encodeURIComponent(search) + "&date=" + (new Date());
            req.open("GET", sendUrl, false);
            req.send(null);
            return req.responseText;

        }
    } else {
        alert("不支持");
    }
}

function initAll() {
    var obj = document.getElementById("AixInput");
    var host = window.location.host;
    var path = window.location.pathname.split("/")[1];
    obj.UpdateData("http://" + host + "/" + "tos" + "/bkNameBkCodeAction!getData.do", "type11");
}


var g_lastSearch = "";

function lookup(type, nm) {
    if (window.event.keyCode == 13) {
        enterEvent();
    } else {
        var search = document.getElementById(nm).value;
        searchData(type, nm, search);
    }
}

function onTransferFlagChanged() {
    if (document.getElementById("transferFlag").checked == true) {
        document.getElementById("transferDiv").style.display = "";
    } else {
        document.getElementById("transferDiv").style.display = "none";
    }
}

function lookup(type, nm, bankType, crHouse) {
    var search = document.getElementById(nm).value;
    //search=bankType+" "+crHouse+" "+search;
    searchData(type, nm, search);
}

function searchData(type, nm, search) {
    if (event == null || (event.keyCode != 13 && event.keyCode != 27 && event.keyCode != 38 && event.keyCode != 40)) {
        //if(useControl.checked){
        var obj = document.getElementById("AixInput");
        var host = window.location.host;
        //var path ='appcos';
        if (window.location.pathname.split("/")[0] == '') {
            path = window.location.pathname.split("/")[1];
        } else {
            path = window.location.pathname.split("/")[0]
        }
        var retBank = "";
        try {
            if (isUserActive == '1') {
                try {
                    //设置本地临时目录
                    obj.SetTempDirectory('c:/COST');
                    if (obj.UpdateData("http://" + host + "/" + "tos" + "/bkNameBkCodeAction!getData.do?type=" + type, type) != 1) {
                        return;
                    }
                    ;
                    retBank = obj.GetBanks(search, type, 50);
                    isUserActive = '1';
                    //parent.isUserActive='1';
                    //如果控件查询数为0，或者控件查询出的数据第一条为undefine就使用retrieveSynURL查询，避免控件问题导致无法使用


                } catch (e) {
                    retBank = retrieveFromBkEnd("http://" + host + "/" + "tos" + "/bkNameBkCodeAction!getPart.do?type=" + type + "&search=" + encodeURIComponent(search));
                    //parent.isUserActive='0';
                }
            } else {
                retBank = retrieveFromBkEnd("http://" + host + "/" + "tos" + "/bkNameBkCodeAction!getPart.do?type=" + type + "&search=" + encodeURIComponent(search));
                //parent.isUserActive='0';
            }
        } catch (e) {
        }
        var result_length = retBank.split('\n').length - 1;
        if (result_length < 1) {
            document.getElementById(nm).value = g_lastSearch;
        } else {
            dataMixBatch.detailInfo(retBank.split('\n'), nm);
            g_lastSearch = search;
        }
    }
}

function enterEvent() {
    var inputId = dataMixBatch.inputId;
    if (document.getElementById("data_detail") != null) {
        if (trimBlank(cord_list[index].split('\t')[1]).length != 0) {
            var bankObj = document.getElementById(inputId);
            bankObj.value = trimBlank(cord_list[index].split('\t')[2]);
            bankObj.tValue = bankObj.value;
            var input_id = inputId.split("_")[1];
            document.getElementById(input_id + "Exception").innerHTML = "&nbsp;行号：" + trimBlank(cord_list[index].split('\t')[1]);
            document.getElementById("bankCode").value = trimBlank(cord_list[index].split('\t')[1]);
            bankObj.focus();
        }
        document.getElementById("name_div").removeChild(document.getElementById("data_detail"));
    }

}

function cleanLocal() {
    var obj = document.getElementById("AixInput");
    obj.UpdateData("", "清理");
}

// 去左空格;
function ltrim(s) {
    return s.replace(/^\s*/, "");
}

function trimBlank(value) {
    if (value == "undefined" || value == null) {
        return '';
    }
    return trim(value);
}

// 去右空格;
function rtrim(s) {
    return s.replace(/\s*$/, "");
}

// 左右空格;
function trim(s) {
    return rtrim(ltrim(s));
}

/*
	A simple class for displaying file information and progress
	Note: This is a demonstration only and not part of SWFUpload.
	Note: Some have had problems adapting this class in IE7. It may not be suitable for your application.
*/

// Constructor
// file is a SWFUpload file object
// targetID is the HTML element id attribute that the FileProgress HTML structure will be added to.
// Instantiating a new FileProgress object with an existing file will reuse/update the existing DOM elements
function FileProgress(file, targetID) {
    this.fileProgressID = file.id;

    this.opacity = 100;
    this.height = 0;

    this.fileProgressWrapper = document.getElementById(this.fileProgressID);
    if (!this.fileProgressWrapper) {
        var wrapperWidth = targetID.progressWidth;
        var progressNameWidth = wrapperWidth - 30;
        var progressBarStatusWidth = wrapperWidth - 20;

        this.fileProgressWrapper = document.createElement("div");
        this.fileProgressWrapper.className = "progressWrapper";
        this.fileProgressWrapper.id = this.fileProgressID;

        this.fileProgressWrapper.style.width = wrapperWidth + "px";//动态设置外部宽度

        this.fileProgressElement = document.createElement("div");
        this.fileProgressElement.className = "progressContainer";

        var progressCancel = document.createElement("a");
        progressCancel.className = "progressCancel";
        progressCancel.href = "#";
        progressCancel.style.visibility = "hidden";
        progressCancel.appendChild(document.createTextNode(" "));

        var progressText = document.createElement("div");
        progressText.className = "progressName";
        progressText.style.width = progressNameWidth + "px"; //动态设置文本宽度

        progressText.appendChild(document.createTextNode(file.name));

        var progressBar = document.createElement("div");
        progressBar.className = "progressBarInProgress";

        var progressStatus = document.createElement("div");
        progressStatus.className = "progressBarStatus";
        progressStatus.style.width = progressBarStatusWidth + "px";//动态设置进程宽度
        progressStatus.innerHTML = "&nbsp;";

        this.fileProgressElement.appendChild(progressCancel);
        this.fileProgressElement.appendChild(progressText);
        this.fileProgressElement.appendChild(progressStatus);
        this.fileProgressElement.appendChild(progressBar);

        this.fileProgressWrapper.appendChild(this.fileProgressElement);

        document.getElementById(targetID.progressTarget).appendChild(this.fileProgressWrapper);
    } else {
        this.fileProgressElement = this.fileProgressWrapper.firstChild;
        this.reset();
    }

    this.height = this.fileProgressWrapper.offsetHeight;
    this.setTimer(null);


}

FileProgress.prototype.setTimer = function (timer) {
    this.fileProgressElement["FP_TIMER"] = timer;
};
FileProgress.prototype.getTimer = function (timer) {
    return this.fileProgressElement["FP_TIMER"] || null;
};

FileProgress.prototype.reset = function () {
    this.fileProgressElement.className = "progressContainer";

    this.fileProgressElement.childNodes[2].innerHTML = "&nbsp;";
    this.fileProgressElement.childNodes[2].className = "progressBarStatus";

    this.fileProgressElement.childNodes[3].className = "progressBarInProgress";
    this.fileProgressElement.childNodes[3].style.width = "0%";

    this.appear();
};

FileProgress.prototype.setProgress = function (percentage) {
    this.fileProgressElement.className = "progressContainer green";
    this.fileProgressElement.childNodes[3].className = "progressBarInProgress";
    this.fileProgressElement.childNodes[3].style.width = percentage + "%";

    this.appear();
};
FileProgress.prototype.setComplete = function () {
    this.fileProgressElement.className = "progressContainer blue";
    this.fileProgressElement.childNodes[3].className = "progressBarComplete";
    this.fileProgressElement.childNodes[3].style.width = "";

    var oSelf = this;
    this.setTimer(setTimeout(function () {
        oSelf.disappear();
    }, 10000));
};
FileProgress.prototype.setError = function () {
    this.fileProgressElement.className = "progressContainer red";
    this.fileProgressElement.childNodes[3].className = "progressBarError";
    this.fileProgressElement.childNodes[3].style.width = "";

    var oSelf = this;
    this.setTimer(setTimeout(function () {
        oSelf.disappear();
    }, 5000));
};
FileProgress.prototype.setCancelled = function () {
    this.fileProgressElement.className = "progressContainer";
    this.fileProgressElement.childNodes[3].className = "progressBarError";
    this.fileProgressElement.childNodes[3].style.width = "";

    var oSelf = this;
    this.setTimer(setTimeout(function () {
        oSelf.disappear();
    }, 2000));
};
FileProgress.prototype.setStatus = function (status) {
    this.fileProgressElement.childNodes[2].innerHTML = status;
};

// Show/Hide the cancel button
FileProgress.prototype.toggleCancel = function (show, swfUploadInstance) {
    this.fileProgressElement.childNodes[0].style.visibility = show ? "visible" : "hidden";
    if (swfUploadInstance) {
        var fileID = this.fileProgressID;
        this.fileProgressElement.childNodes[0].onclick = function () {
            swfUploadInstance.cancelUpload(fileID);
            return false;
        };
    }
};

FileProgress.prototype.appear = function () {
    if (this.getTimer() !== null) {
        clearTimeout(this.getTimer());
        this.setTimer(null);
    }

    if (this.fileProgressWrapper.filters) {
        try {
            this.fileProgressWrapper.filters.item("DXImageTransform.Microsoft.Alpha").opacity = 100;
        } catch (e) {
            // If it is not set initially, the browser will throw an error.  This will set it if it is not set yet.
            this.fileProgressWrapper.style.filter = "progid:DXImageTransform.Microsoft.Alpha(opacity=100)";
        }
    } else {
        this.fileProgressWrapper.style.opacity = 1;
    }

    this.fileProgressWrapper.style.height = "";

    this.height = this.fileProgressWrapper.offsetHeight;
    this.opacity = 100;
    this.fileProgressWrapper.style.display = "";

};

// Fades out and clips away the FileProgress box.
FileProgress.prototype.disappear = function () {

    var reduceOpacityBy = 15;
    var reduceHeightBy = 4;
    var rate = 30;	// 15 fps

    if (this.opacity > 0) {
        this.opacity -= reduceOpacityBy;
        if (this.opacity < 0) {
            this.opacity = 0;
        }

        if (this.fileProgressWrapper.filters) {
            try {
                this.fileProgressWrapper.filters.item("DXImageTransform.Microsoft.Alpha").opacity = this.opacity;
            } catch (e) {
                // If it is not set initially, the browser will throw an error.  This will set it if it is not set yet.
                this.fileProgressWrapper.style.filter = "progid:DXImageTransform.Microsoft.Alpha(opacity=" + this.opacity + ")";
            }
        } else {
            this.fileProgressWrapper.style.opacity = this.opacity / 100;
        }
    }

    if (this.height > 0) {
        this.height -= reduceHeightBy;
        if (this.height < 0) {
            this.height = 0;
        }

        this.fileProgressWrapper.style.height = this.height + "px";
    }

    if (this.height > 0 || this.opacity > 0) {
        var oSelf = this;
        this.setTimer(setTimeout(function () {
            oSelf.disappear();
        }, rate));
    } else {
        this.fileProgressWrapper.style.display = "none";
        this.setTimer(null);
    }
};
/* Demo Note:  This demo uses a FileProgress class that handles the UI for displaying the file name and percent complete.
The FileProgress class is not part of SWFUpload.
*/


/* **********************
   Event Handlers
   These are my custom event handlers to make my
   web application behave the way I went when SWFUpload
   completes different tasks.  These aren't part of the SWFUpload
   package.  They are part of my application.  Without these none
   of the actions SWFUpload makes will show up in my application.
   ********************** */
function fileQueued(file) {
    try {
        var progress = new FileProgress(file, this.customSettings);
        progress.setStatus("Pending...");
        progress.toggleCancel(true, this);

    } catch (ex) {
        this.debug(ex);
    }

}

function fileQueueError(file, errorCode, message) {
    try {
        if (errorCode === SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) {
            alert("You have attempted to queue too many files.\n" + (message === 0 ? "You have reached the upload limit." : "You may select " + (message > 1 ? "up to " + message + " files." : "one file.")));
            return;
        }

        var progress = new FileProgress(file, this.customSettings.progressTarget);
        progress.setError();
        progress.toggleCancel(false);

        switch (errorCode) {
            case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
                progress.setStatus("File is too big.");
                this.debug("Error Code: File too big, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
                break;
            case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
                progress.setStatus("Cannot upload Zero Byte files.");
                this.debug("Error Code: Zero byte file, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
                break;
            case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:
                progress.setStatus("Invalid File Type.");
                this.debug("Error Code: Invalid File Type, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
                break;
            default:
                if (file !== null) {
                    progress.setStatus("Unhandled Error");
                }
                this.debug("Error Code: " + errorCode + ", File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
                break;
        }
    } catch (ex) {
        this.debug(ex);
    }
}

function fileDialogComplete(numFilesSelected, numFilesQueued) {
    try {
        if (numFilesSelected > 0) {
            document.getElementById(this.customSettings.cancelButtonId).disabled = false;
        }

        /* I want auto start the upload and I can do that here */
        this.startUpload();
    } catch (ex) {
        this.debug(ex);
    }
}

function uploadStart(file) {
    try {
        /* I don't want to do any file validation or anything,  I'll just update the UI and
		return true to indicate that the upload should start.
		It's important to update the UI here because in Linux no uploadProgress events are called. The best
		we can do is say we are uploading.
		 */
        var progress = new FileProgress(file, this.customSettings.progressTarget);
        progress.setStatus("Uploading...");
        progress.toggleCancel(true, this);
    } catch (ex) {
    }

    return true;
}

function uploadProgress(file, bytesLoaded, bytesTotal) {
    try {
        var percent = Math.ceil((bytesLoaded / bytesTotal) * 100);

        var progress = new FileProgress(file, this.customSettings.progressTarget);
        progress.setProgress(percent);
        progress.setStatus("Uploading...");
    } catch (ex) {
        this.debug(ex);
    }
}

function uploadSuccess(file, serverData, responseReceived, fileNames) {
    try {
        if (serverData) {
            var progress = new FileProgress(file, this.customSettings.progressTarget);
            //progress.setComplete();
            var msg = JBF.strToObj(serverData);
            if (msg.errorMessage) {
                progress.setStatus("上传文件失败：" + msg.errorMessage);
                return;
            }

            if (fileNames) {
                JBF.el(fileNames).value += (msg.fileFileName[0] + ",");
            }
            progress.setStatus("上传成功！<a target='_blank' href='" + msg.saveFiles[0] + "'>查看文件</a>");
            progress.toggleCancel(false);
            if (this.customSettings.upLoadSuccessCall) {
                if ((typeof (this.customSettings.upLoadSuccessCall)).toUpperCase() == "STRING") {
                    var fun = eval(this.customSettings.upLoadSuccessCall.replace("(", "").replace(")", ""));
                    fun(msg);
                } else if ((typeof (this.customSettings.upLoadSuccessCall)).toUpperCase() == "FUNCTION") {
                    this.customSettings.upLoadSuccessCall(msg);
                }
            }
        }
    } catch (ex) {
        progress.setStatus("上传文件异常");
        this.debug(ex);
    }
}

function uploadError(file, errorCode, message) {
    try {
        var progress = new FileProgress(file, this.customSettings.progressTarget);
        progress.setError();
        progress.toggleCancel(false);

        switch (errorCode) {
            case SWFUpload.UPLOAD_ERROR.HTTP_ERROR:
                progress.setStatus("Upload Error: " + message);
                this.debug("Error Code: HTTP Error, File name: " + file.name + ", Message: " + message);
                break;
            case SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED:
                progress.setStatus("Upload Failed.");
                this.debug("Error Code: Upload Failed, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
                break;
            case SWFUpload.UPLOAD_ERROR.IO_ERROR:
                progress.setStatus("Server (IO) Error");
                this.debug("Error Code: IO Error, File name: " + file.name + ", Message: " + message);
                break;
            case SWFUpload.UPLOAD_ERROR.SECURITY_ERROR:
                progress.setStatus("Security Error");
                this.debug("Error Code: Security Error, File name: " + file.name + ", Message: " + message);
                break;
            case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:
                progress.setStatus("Upload limit exceeded.");
                this.debug("Error Code: Upload Limit Exceeded, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
                break;
            case SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED:
                progress.setStatus("Failed Validation.  Upload skipped.");
                this.debug("Error Code: File Validation Failed, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
                break;
            case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:
                // If there aren't any files left (they were all cancelled) disable the cancel button
                if (this.getStats().files_queued === 0) {
                    document.getElementById(this.customSettings.cancelButtonId).disabled = true;
                }
                progress.setStatus("Cancelled");
                progress.setCancelled();
                break;
            case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:
                progress.setStatus("Stopped");
                break;
            default:
                progress.setStatus("Unhandled Error: " + errorCode);
                this.debug("Error Code: " + errorCode + ", File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
                break;
        }
    } catch (ex) {
        this.debug(ex);
    }
}

function uploadComplete(file) {
    if (this.getStats().files_queued === 0) {
        document.getElementById(this.customSettings.cancelButtonId).disabled = true;
    }
}

// This event comes from the Queue Plugin
function queueComplete(numFilesUploaded) {
    //var status = document.getElementById("divStatus");
    //status.innerHTML =  " 上传"+numFilesUploaded;
}

/**
 * SWFUpload: http://www.swfupload.org, http://swfupload.googlecode.com
 *
 * mmSWFUpload 1.0: Flash upload dialog - http://profandesign.se/swfupload/,  http://www.vinterwebb.se/
 *
 * SWFUpload is (c) 2006-2007 Lars Huring, Olov Nilz�n and Mammon Media and is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 * SWFUpload 2 is (c) 2007-2008 Jake Roberts and is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 */


/* ******************* */
/* Constructor & Init  */
/* ******************* */
var SWFUpload;

if (SWFUpload == undefined) {
    SWFUpload = function (settings) {
        this.initSWFUpload(settings);
    };
}

SWFUpload.prototype.initSWFUpload = function (settings) {
    try {
        this.customSettings = {};	// A container where developers can place their own settings associated with this instance.
        this.settings = settings;
        this.eventQueue = [];
        this.movieName = "SWFUpload_" + SWFUpload.movieCount++;
        this.movieElement = null;


        // Setup global control tracking
        SWFUpload.instances[this.movieName] = this;

        // Load the settings.  Load the Flash movie.
        this.initSettings();
        this.loadFlash();
        this.displayDebugInfo();
    } catch (ex) {
        delete SWFUpload.instances[this.movieName];
        throw ex;
    }
};

/* *************** */
/* Static Members  */
/* *************** */
SWFUpload.instances = {};
SWFUpload.movieCount = 0;
SWFUpload.version = "2.2.0 2009-03-25";
SWFUpload.QUEUE_ERROR = {
    QUEUE_LIMIT_EXCEEDED: -100,
    FILE_EXCEEDS_SIZE_LIMIT: -110,
    ZERO_BYTE_FILE: -120,
    INVALID_FILETYPE: -130
};
SWFUpload.UPLOAD_ERROR = {
    HTTP_ERROR: -200,
    MISSING_UPLOAD_URL: -210,
    IO_ERROR: -220,
    SECURITY_ERROR: -230,
    UPLOAD_LIMIT_EXCEEDED: -240,
    UPLOAD_FAILED: -250,
    SPECIFIED_FILE_ID_NOT_FOUND: -260,
    FILE_VALIDATION_FAILED: -270,
    FILE_CANCELLED: -280,
    UPLOAD_STOPPED: -290
};
SWFUpload.FILE_STATUS = {
    QUEUED: -1,
    IN_PROGRESS: -2,
    ERROR: -3,
    COMPLETE: -4,
    CANCELLED: -5
};
SWFUpload.BUTTON_ACTION = {
    SELECT_FILE: -100,
    SELECT_FILES: -110,
    START_UPLOAD: -120
};
SWFUpload.CURSOR = {
    ARROW: -1,
    HAND: -2
};
SWFUpload.WINDOW_MODE = {
    WINDOW: "window",
    TRANSPARENT: "transparent",
    OPAQUE: "opaque"
};

// Private: takes a URL, determines if it is relative and converts to an absolute URL
// using the current site. Only processes the URL if it can, otherwise returns the URL untouched
SWFUpload.completeURL = function (url) {
    if (typeof (url) !== "string" || url.match(/^https?:\/\//i) || url.match(/^\//)) {
        return url;
    }

    var currentURL = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "");

    var indexSlash = window.location.pathname.lastIndexOf("/");
    if (indexSlash <= 0) {
        path = "/";
    } else {
        path = window.location.pathname.substr(0, indexSlash) + "/";
    }

    return /*currentURL +*/ path + url;

};


/* ******************** */
/* Instance Members  */
/* ******************** */

// Private: initSettings ensures that all the
// settings are set, getting a default value if one was not assigned.
SWFUpload.prototype.initSettings = function () {
    this.ensureDefault = function (settingName, defaultValue) {
        this.settings[settingName] = (this.settings[settingName] == undefined) ? defaultValue : this.settings[settingName];
    };

    // Upload backend settings
    this.ensureDefault("upload_url", "");
    this.ensureDefault("preserve_relative_urls", false);
    this.ensureDefault("file_post_name", "file");
    this.ensureDefault("post_params", {});
    this.ensureDefault("use_query_string", false);
    this.ensureDefault("requeue_on_error", false);
    this.ensureDefault("http_success", []);
    this.ensureDefault("assume_success_timeout", 0);

    // File Settings
    this.ensureDefault("file_types", "*.*");
    this.ensureDefault("file_types_description", "All Files");
    this.ensureDefault("file_size_limit", 0);	// Default zero means "unlimited"
    this.ensureDefault("file_upload_limit", 0);
    this.ensureDefault("file_queue_limit", 0);

    // Flash Settings
    this.ensureDefault("flash_url", "swfupload.swf");
    this.ensureDefault("prevent_swf_caching", true);

    // Button Settings
    this.ensureDefault("button_image_url", "");
    this.ensureDefault("button_width", 1);
    this.ensureDefault("button_height", 1);
    this.ensureDefault("button_text", "");
    this.ensureDefault("button_text_style", "color: #000000; font-size: 16pt;");
    this.ensureDefault("button_text_top_padding", 0);
    this.ensureDefault("button_text_left_padding", 0);
    this.ensureDefault("button_action", SWFUpload.BUTTON_ACTION.SELECT_FILES);
    this.ensureDefault("button_disabled", false);
    this.ensureDefault("button_placeholder_id", "");
    this.ensureDefault("button_placeholder", null);
    this.ensureDefault("button_cursor", SWFUpload.CURSOR.ARROW);
    this.ensureDefault("button_window_mode", SWFUpload.WINDOW_MODE.WINDOW);

    // Debug Settings
    this.ensureDefault("debug", false);
    this.settings.debug_enabled = this.settings.debug;	// Here to maintain v2 API

    // Event Handlers
    this.settings.return_upload_start_handler = this.returnUploadStart;
    this.ensureDefault("swfupload_loaded_handler", null);
    this.ensureDefault("file_dialog_start_handler", null);
    this.ensureDefault("file_queued_handler", null);
    this.ensureDefault("file_queue_error_handler", null);
    this.ensureDefault("file_dialog_complete_handler", null);

    this.ensureDefault("upload_start_handler", null);
    this.ensureDefault("upload_progress_handler", null);
    this.ensureDefault("upload_error_handler", null);
    this.ensureDefault("upload_success_handler", null);
    this.ensureDefault("upload_complete_handler", null);

    this.ensureDefault("debug_handler", this.debugMessage);

    this.ensureDefault("custom_settings", {});

    // Other settings
    this.customSettings = this.settings.custom_settings;

    // Update the flash url if needed
    if (!!this.settings.prevent_swf_caching) {
        this.settings.flash_url = this.settings.flash_url + (this.settings.flash_url.indexOf("?") < 0 ? "?" : "&") + "preventswfcaching=" + new Date().getTime();
    }

    if (!this.settings.preserve_relative_urls) {
        //this.settings.flash_url = SWFUpload.completeURL(this.settings.flash_url);	// Don't need to do this one since flash doesn't look at it
        this.settings.upload_url = SWFUpload.completeURL(this.settings.upload_url);
        this.settings.button_image_url = SWFUpload.completeURL(this.settings.button_image_url);
    }

    delete this.ensureDefault;
};

// Private: loadFlash replaces the button_placeholder element with the flash movie.
SWFUpload.prototype.loadFlash = function () {
    var targetElement, tempParent;

    // Make sure an element with the ID we are going to use doesn't already exist
    if (document.getElementById(this.movieName) !== null) {
        throw "ID " + this.movieName + " is already in use. The Flash Object could not be added";
    }

    // Get the element where we will be placing the flash movie
    targetElement = document.getElementById(this.settings.button_placeholder_id) || this.settings.button_placeholder;

    if (targetElement == undefined) {
        throw "Could not find the placeholder element: " + this.settings.button_placeholder_id;
    }

    // Append the container and load the flash
    tempParent = document.createElement("div");
    tempParent.innerHTML = this.getFlashHTML();	// Using innerHTML is non-standard but the only sensible way to dynamically add Flash in IE (and maybe other browsers)
    targetElement.parentNode.replaceChild(tempParent.firstChild, targetElement);

    // Fix IE Flash/Form bug
    if (window[this.movieName] == undefined) {
        window[this.movieName] = this.getMovieElement();
    }

};

// Private: getFlashHTML generates the object tag needed to embed the flash in to the document
SWFUpload.prototype.getFlashHTML = function () {
    // Flash Satay object syntax: http://www.alistapart.com/articles/flashsatay
    return ['<object id="', this.movieName, '" type="application/x-shockwave-flash" data="', this.settings.flash_url, '" width="', this.settings.button_width, '" height="', this.settings.button_height, '" class="swfupload">',
        '<param name="wmode" value="', this.settings.button_window_mode, '" />',
        '<param name="movie" value="', this.settings.flash_url, '" />',
        '<param name="quality" value="high" />',
        '<param name="menu" value="false" />',
        '<param name="allowScriptAccess" value="always" />',
        '<param name="flashvars" value="' + this.getFlashVars() + '" />',
        '</object>'].join("");
};

// Private: getFlashVars builds the parameter string that will be passed
// to flash in the flashvars param.
SWFUpload.prototype.getFlashVars = function () {
    // Build a string from the post param object
    var paramString = this.buildParamString();
    var httpSuccessString = this.settings.http_success.join(",");

    // Build the parameter string
    return ["movieName=", encodeURIComponent(this.movieName),
        "&amp;uploadURL=", encodeURIComponent(this.settings.upload_url),
        "&amp;useQueryString=", encodeURIComponent(this.settings.use_query_string),
        "&amp;requeueOnError=", encodeURIComponent(this.settings.requeue_on_error),
        "&amp;httpSuccess=", encodeURIComponent(httpSuccessString),
        "&amp;assumeSuccessTimeout=", encodeURIComponent(this.settings.assume_success_timeout),
        "&amp;params=", encodeURIComponent(paramString),
        "&amp;filePostName=", encodeURIComponent(this.settings.file_post_name),
        "&amp;fileTypes=", encodeURIComponent(this.settings.file_types),
        "&amp;fileTypesDescription=", encodeURIComponent(this.settings.file_types_description),
        "&amp;fileSizeLimit=", encodeURIComponent(this.settings.file_size_limit),
        "&amp;fileUploadLimit=", encodeURIComponent(this.settings.file_upload_limit),
        "&amp;fileQueueLimit=", encodeURIComponent(this.settings.file_queue_limit),
        "&amp;debugEnabled=", encodeURIComponent(this.settings.debug_enabled),
        "&amp;buttonImageURL=", encodeURIComponent(this.settings.button_image_url),
        "&amp;buttonWidth=", encodeURIComponent(this.settings.button_width),
        "&amp;buttonHeight=", encodeURIComponent(this.settings.button_height),
        "&amp;buttonText=", encodeURIComponent(this.settings.button_text),
        "&amp;buttonTextTopPadding=", encodeURIComponent(this.settings.button_text_top_padding),
        "&amp;buttonTextLeftPadding=", encodeURIComponent(this.settings.button_text_left_padding),
        "&amp;buttonTextStyle=", encodeURIComponent(this.settings.button_text_style),
        "&amp;buttonAction=", encodeURIComponent(this.settings.button_action),
        "&amp;buttonDisabled=", encodeURIComponent(this.settings.button_disabled),
        "&amp;buttonCursor=", encodeURIComponent(this.settings.button_cursor)
    ].join("");
};

// Public: getMovieElement retrieves the DOM reference to the Flash element added by SWFUpload
// The element is cached after the first lookup
SWFUpload.prototype.getMovieElement = function () {
    if (this.movieElement == undefined) {
        this.movieElement = document.getElementById(this.movieName);
    }

    if (this.movieElement === null) {
        throw "Could not find Flash element";
    }

    return this.movieElement;
};

// Private: buildParamString takes the name/value pairs in the post_params setting object
// and joins them up in to a string formatted "name=value&amp;name=value"
SWFUpload.prototype.buildParamString = function () {
    var postParams = this.settings.post_params;
    var paramStringPairs = [];

    if (typeof (postParams) === "object") {
        for (var name in postParams) {
            if (postParams.hasOwnProperty(name)) {
                paramStringPairs.push(encodeURIComponent(name.toString()) + "=" + encodeURIComponent(postParams[name].toString()));
            }
        }
    }

    return paramStringPairs.join("&amp;");
};

// Public: Used to remove a SWFUpload instance from the page. This method strives to remove
// all references to the SWF, and other objects so memory is properly freed.
// Returns true if everything was destroyed. Returns a false if a failure occurs leaving SWFUpload in an inconsistant state.
// Credits: Major improvements provided by steffen
SWFUpload.prototype.destroy = function () {
    try {
        // Make sure Flash is done before we try to remove it
        this.cancelUpload(null, false);


        // Remove the SWFUpload DOM nodes
        var movieElement = null;
        movieElement = this.getMovieElement();

        if (movieElement && typeof (movieElement.CallFunction) === "unknown") { // We only want to do this in IE
            // Loop through all the movie's properties and remove all function references (DOM/JS IE 6/7 memory leak workaround)
            for (var i in movieElement) {
                try {
                    if (typeof (movieElement[i]) === "function") {
                        movieElement[i] = null;
                    }
                } catch (ex1) {
                }
            }

            // Remove the Movie Element from the page
            try {
                movieElement.parentNode.removeChild(movieElement);
            } catch (ex) {
            }
        }

        // Remove IE form fix reference
        window[this.movieName] = null;

        // Destroy other references
        SWFUpload.instances[this.movieName] = null;
        delete SWFUpload.instances[this.movieName];

        this.movieElement = null;
        this.settings = null;
        this.customSettings = null;
        this.eventQueue = null;
        this.movieName = null;


        return true;
    } catch (ex2) {
        return false;
    }
};


// Public: displayDebugInfo prints out settings and configuration
// information about this SWFUpload instance.
// This function (and any references to it) can be deleted when placing
// SWFUpload in production.
SWFUpload.prototype.displayDebugInfo = function () {
    this.debug(
        [
            "---SWFUpload Instance Info---\n",
            "Version: ", SWFUpload.version, "\n",
            "Movie Name: ", this.movieName, "\n",
            "Settings:\n",
            "\t", "upload_url:               ", this.settings.upload_url, "\n",
            "\t", "flash_url:                ", this.settings.flash_url, "\n",
            "\t", "use_query_string:         ", this.settings.use_query_string.toString(), "\n",
            "\t", "requeue_on_error:         ", this.settings.requeue_on_error.toString(), "\n",
            "\t", "http_success:             ", this.settings.http_success.join(", "), "\n",
            "\t", "assume_success_timeout:   ", this.settings.assume_success_timeout, "\n",
            "\t", "file_post_name:           ", this.settings.file_post_name, "\n",
            "\t", "post_params:              ", this.settings.post_params.toString(), "\n",
            "\t", "file_types:               ", this.settings.file_types, "\n",
            "\t", "file_types_description:   ", this.settings.file_types_description, "\n",
            "\t", "file_size_limit:          ", this.settings.file_size_limit, "\n",
            "\t", "file_upload_limit:        ", this.settings.file_upload_limit, "\n",
            "\t", "file_queue_limit:         ", this.settings.file_queue_limit, "\n",
            "\t", "debug:                    ", this.settings.debug.toString(), "\n",

            "\t", "prevent_swf_caching:      ", this.settings.prevent_swf_caching.toString(), "\n",

            "\t", "button_placeholder_id:    ", this.settings.button_placeholder_id.toString(), "\n",
            "\t", "button_placeholder:       ", (this.settings.button_placeholder ? "Set" : "Not Set"), "\n",
            "\t", "button_image_url:         ", this.settings.button_image_url.toString(), "\n",
            "\t", "button_width:             ", this.settings.button_width.toString(), "\n",
            "\t", "button_height:            ", this.settings.button_height.toString(), "\n",
            "\t", "button_text:              ", this.settings.button_text.toString(), "\n",
            "\t", "button_text_style:        ", this.settings.button_text_style.toString(), "\n",
            "\t", "button_text_top_padding:  ", this.settings.button_text_top_padding.toString(), "\n",
            "\t", "button_text_left_padding: ", this.settings.button_text_left_padding.toString(), "\n",
            "\t", "button_action:            ", this.settings.button_action.toString(), "\n",
            "\t", "button_disabled:          ", this.settings.button_disabled.toString(), "\n",

            "\t", "custom_settings:          ", this.settings.custom_settings.toString(), "\n",
            "Event Handlers:\n",
            "\t", "swfupload_loaded_handler assigned:  ", (typeof this.settings.swfupload_loaded_handler === "function").toString(), "\n",
            "\t", "file_dialog_start_handler assigned: ", (typeof this.settings.file_dialog_start_handler === "function").toString(), "\n",
            "\t", "file_queued_handler assigned:       ", (typeof this.settings.file_queued_handler === "function").toString(), "\n",
            "\t", "file_queue_error_handler assigned:  ", (typeof this.settings.file_queue_error_handler === "function").toString(), "\n",
            "\t", "upload_start_handler assigned:      ", (typeof this.settings.upload_start_handler === "function").toString(), "\n",
            "\t", "upload_progress_handler assigned:   ", (typeof this.settings.upload_progress_handler === "function").toString(), "\n",
            "\t", "upload_error_handler assigned:      ", (typeof this.settings.upload_error_handler === "function").toString(), "\n",
            "\t", "upload_success_handler assigned:    ", (typeof this.settings.upload_success_handler === "function").toString(), "\n",
            "\t", "upload_complete_handler assigned:   ", (typeof this.settings.upload_complete_handler === "function").toString(), "\n",
            "\t", "debug_handler assigned:             ", (typeof this.settings.debug_handler === "function").toString(), "\n"
        ].join("")
    );
};

/* Note: addSetting and getSetting are no longer used by SWFUpload but are included
	the maintain v2 API compatibility
*/
// Public: (Deprecated) addSetting adds a setting value. If the value given is undefined or null then the default_value is used.
SWFUpload.prototype.addSetting = function (name, value, default_value) {
    if (value == undefined) {
        return (this.settings[name] = default_value);
    } else {
        return (this.settings[name] = value);
    }
};

// Public: (Deprecated) getSetting gets a setting. Returns an empty string if the setting was not found.
SWFUpload.prototype.getSetting = function (name) {
    if (this.settings[name] != undefined) {
        return this.settings[name];
    }

    return "";
};


// Private: callFlash handles function calls made to the Flash element.
// Calls are made with a setTimeout for some functions to work around
// bugs in the ExternalInterface library.
SWFUpload.prototype.callFlash = function (functionName, argumentArray) {
    argumentArray = argumentArray || [];

    var movieElement = this.getMovieElement();
    var returnValue, returnString;

    // Flash's method if calling ExternalInterface methods (code adapted from MooTools).
    try {
        returnString = movieElement.CallFunction('<invoke name="' + functionName + '" returntype="javascript">' + __flash__argumentsToXML(argumentArray, 0) + '</invoke>');
        returnValue = eval(returnString);
    } catch (ex) {
        throw "Call to " + functionName + " failed";
    }

    // Unescape file post param values
    if (returnValue != undefined && typeof returnValue.post === "object") {
        returnValue = this.unescapeFilePostParams(returnValue);
    }

    return returnValue;
};

/* *****************************
	-- Flash control methods --
	Your UI should use these
	to operate SWFUpload
   ***************************** */

// WARNING: this function does not work in Flash Player 10
// Public: selectFile causes a File Selection Dialog window to appear.  This
// dialog only allows 1 file to be selected.
SWFUpload.prototype.selectFile = function () {
    this.callFlash("SelectFile");
};

// WARNING: this function does not work in Flash Player 10
// Public: selectFiles causes a File Selection Dialog window to appear/ This
// dialog allows the user to select any number of files
// Flash Bug Warning: Flash limits the number of selectable files based on the combined length of the file names.
// If the selection name length is too long the dialog will fail in an unpredictable manner.  There is no work-around
// for this bug.
SWFUpload.prototype.selectFiles = function () {
    this.callFlash("SelectFiles");
};


// Public: startUpload starts uploading the first file in the queue unless
// the optional parameter 'fileID' specifies the ID
SWFUpload.prototype.startUpload = function (fileID) {
    this.callFlash("StartUpload", [fileID]);
};

// Public: cancelUpload cancels any queued file.  The fileID parameter may be the file ID or index.
// If you do not specify a fileID the current uploading file or first file in the queue is cancelled.
// If you do not want the uploadError event to trigger you can specify false for the triggerErrorEvent parameter.
SWFUpload.prototype.cancelUpload = function (fileID, triggerErrorEvent) {
    if (triggerErrorEvent !== false) {
        triggerErrorEvent = true;
    }
    this.callFlash("CancelUpload", [fileID, triggerErrorEvent]);
};

// Public: stopUpload stops the current upload and requeues the file at the beginning of the queue.
// If nothing is currently uploading then nothing happens.
SWFUpload.prototype.stopUpload = function () {
    this.callFlash("StopUpload");
};

/* ************************
 * Settings methods
 *   These methods change the SWFUpload settings.
 *   SWFUpload settings should not be changed directly on the settings object
 *   since many of the settings need to be passed to Flash in order to take
 *   effect.
 * *********************** */

// Public: getStats gets the file statistics object.
SWFUpload.prototype.getStats = function () {
    return this.callFlash("GetStats");
};

// Public: setStats changes the SWFUpload statistics.  You shouldn't need to
// change the statistics but you can.  Changing the statistics does not
// affect SWFUpload accept for the successful_uploads count which is used
// by the upload_limit setting to determine how many files the user may upload.
SWFUpload.prototype.setStats = function (statsObject) {
    this.callFlash("SetStats", [statsObject]);
};

// Public: getFile retrieves a File object by ID or Index.  If the file is
// not found then 'null' is returned.
SWFUpload.prototype.getFile = function (fileID) {
    if (typeof (fileID) === "number") {
        return this.callFlash("GetFileByIndex", [fileID]);
    } else {
        return this.callFlash("GetFile", [fileID]);
    }
};

// Public: addFileParam sets a name/value pair that will be posted with the
// file specified by the Files ID.  If the name already exists then the
// exiting value will be overwritten.
SWFUpload.prototype.addFileParam = function (fileID, name, value) {
    return this.callFlash("AddFileParam", [fileID, name, value]);
};

// Public: removeFileParam removes a previously set (by addFileParam) name/value
// pair from the specified file.
SWFUpload.prototype.removeFileParam = function (fileID, name) {
    this.callFlash("RemoveFileParam", [fileID, name]);
};

// Public: setUploadUrl changes the upload_url setting.
SWFUpload.prototype.setUploadURL = function (url) {
    this.settings.upload_url = url.toString();
    this.callFlash("SetUploadURL", [url]);
};

// Public: setPostParams changes the post_params setting
SWFUpload.prototype.setPostParams = function (paramsObject) {
    this.settings.post_params = paramsObject;
    this.callFlash("SetPostParams", [paramsObject]);
};

// Public: addPostParam adds post name/value pair.  Each name can have only one value.
SWFUpload.prototype.addPostParam = function (name, value) {
    this.settings.post_params[name] = value;
    this.callFlash("SetPostParams", [this.settings.post_params]);
};

// Public: removePostParam deletes post name/value pair.
SWFUpload.prototype.removePostParam = function (name) {
    delete this.settings.post_params[name];
    this.callFlash("SetPostParams", [this.settings.post_params]);
};

// Public: setFileTypes changes the file_types setting and the file_types_description setting
SWFUpload.prototype.setFileTypes = function (types, description) {
    this.settings.file_types = types;
    this.settings.file_types_description = description;
    this.callFlash("SetFileTypes", [types, description]);
};

// Public: setFileSizeLimit changes the file_size_limit setting
SWFUpload.prototype.setFileSizeLimit = function (fileSizeLimit) {
    this.settings.file_size_limit = fileSizeLimit;
    this.callFlash("SetFileSizeLimit", [fileSizeLimit]);
};

// Public: setFileUploadLimit changes the file_upload_limit setting
SWFUpload.prototype.setFileUploadLimit = function (fileUploadLimit) {
    this.settings.file_upload_limit = fileUploadLimit;
    this.callFlash("SetFileUploadLimit", [fileUploadLimit]);
};

// Public: setFileQueueLimit changes the file_queue_limit setting
SWFUpload.prototype.setFileQueueLimit = function (fileQueueLimit) {
    this.settings.file_queue_limit = fileQueueLimit;
    this.callFlash("SetFileQueueLimit", [fileQueueLimit]);
};

// Public: setFilePostName changes the file_post_name setting
SWFUpload.prototype.setFilePostName = function (filePostName) {
    this.settings.file_post_name = filePostName;
    this.callFlash("SetFilePostName", [filePostName]);
};

// Public: setUseQueryString changes the use_query_string setting
SWFUpload.prototype.setUseQueryString = function (useQueryString) {
    this.settings.use_query_string = useQueryString;
    this.callFlash("SetUseQueryString", [useQueryString]);
};

// Public: setRequeueOnError changes the requeue_on_error setting
SWFUpload.prototype.setRequeueOnError = function (requeueOnError) {
    this.settings.requeue_on_error = requeueOnError;
    this.callFlash("SetRequeueOnError", [requeueOnError]);
};

// Public: setHTTPSuccess changes the http_success setting
SWFUpload.prototype.setHTTPSuccess = function (http_status_codes) {
    if (typeof http_status_codes === "string") {
        http_status_codes = http_status_codes.replace(" ", "").split(",");
    }

    this.settings.http_success = http_status_codes;
    this.callFlash("SetHTTPSuccess", [http_status_codes]);
};

// Public: setHTTPSuccess changes the http_success setting
SWFUpload.prototype.setAssumeSuccessTimeout = function (timeout_seconds) {
    this.settings.assume_success_timeout = timeout_seconds;
    this.callFlash("SetAssumeSuccessTimeout", [timeout_seconds]);
};

// Public: setDebugEnabled changes the debug_enabled setting
SWFUpload.prototype.setDebugEnabled = function (debugEnabled) {
    this.settings.debug_enabled = debugEnabled;
    this.callFlash("SetDebugEnabled", [debugEnabled]);
};

// Public: setButtonImageURL loads a button image sprite
SWFUpload.prototype.setButtonImageURL = function (buttonImageURL) {
    if (buttonImageURL == undefined) {
        buttonImageURL = "";
    }

    this.settings.button_image_url = buttonImageURL;
    this.callFlash("SetButtonImageURL", [buttonImageURL]);
};

// Public: setButtonDimensions resizes the Flash Movie and button
SWFUpload.prototype.setButtonDimensions = function (width, height) {
    this.settings.button_width = width;
    this.settings.button_height = height;

    var movie = this.getMovieElement();
    if (movie != undefined) {
        movie.style.width = width + "px";
        movie.style.height = height + "px";
    }

    this.callFlash("SetButtonDimensions", [width, height]);
};
// Public: setButtonText Changes the text overlaid on the button
SWFUpload.prototype.setButtonText = function (html) {
    this.settings.button_text = html;
    this.callFlash("SetButtonText", [html]);
};
// Public: setButtonTextPadding changes the top and left padding of the text overlay
SWFUpload.prototype.setButtonTextPadding = function (left, top) {
    this.settings.button_text_top_padding = top;
    this.settings.button_text_left_padding = left;
    this.callFlash("SetButtonTextPadding", [left, top]);
};

// Public: setButtonTextStyle changes the CSS used to style the HTML/Text overlaid on the button
SWFUpload.prototype.setButtonTextStyle = function (css) {
    this.settings.button_text_style = css;
    this.callFlash("SetButtonTextStyle", [css]);
};
// Public: setButtonDisabled disables/enables the button
SWFUpload.prototype.setButtonDisabled = function (isDisabled) {
    this.settings.button_disabled = isDisabled;
    this.callFlash("SetButtonDisabled", [isDisabled]);
};
// Public: setButtonAction sets the action that occurs when the button is clicked
SWFUpload.prototype.setButtonAction = function (buttonAction) {
    this.settings.button_action = buttonAction;
    this.callFlash("SetButtonAction", [buttonAction]);
};

// Public: setButtonCursor changes the mouse cursor displayed when hovering over the button
SWFUpload.prototype.setButtonCursor = function (cursor) {
    this.settings.button_cursor = cursor;
    this.callFlash("SetButtonCursor", [cursor]);
};

/* *******************************
	Flash Event Interfaces
	These functions are used by Flash to trigger the various
	events.

	All these functions a Private.

	Because the ExternalInterface library is buggy the event calls
	are added to a queue and the queue then executed by a setTimeout.
	This ensures that events are executed in a determinate order and that
	the ExternalInterface bugs are avoided.
******************************* */

SWFUpload.prototype.queueEvent = function (handlerName, argumentArray) {
    // Warning: Don't call this.debug inside here or you'll create an infinite loop

    if (argumentArray == undefined) {
        argumentArray = [];
    } else if (!(argumentArray instanceof Array)) {
        argumentArray = [argumentArray];
    }

    var self = this;
    if (typeof this.settings[handlerName] === "function") {
        // Queue the event
        this.eventQueue.push(function () {
            this.settings[handlerName].apply(this, argumentArray);
        });

        // Execute the next queued event
        setTimeout(function () {
            self.executeNextEvent();
        }, 0);

    } else if (this.settings[handlerName] !== null) {
        throw "Event handler " + handlerName + " is unknown or is not a function";
    }
};

// Private: Causes the next event in the queue to be executed.  Since events are queued using a setTimeout
// we must queue them in order to garentee that they are executed in order.
SWFUpload.prototype.executeNextEvent = function () {
    // Warning: Don't call this.debug inside here or you'll create an infinite loop
    var f = this.eventQueue ? this.eventQueue.shift() : null;
    if (typeof (f) === "function") {
        f.apply(this);
    }
};

// Private: unescapeFileParams is part of a workaround for a flash bug where objects passed through ExternalInterface cannot have
// properties that contain characters that are not valid for JavaScript identifiers. To work around this
// the Flash Component escapes the parameter names and we must unescape again before passing them along.
SWFUpload.prototype.unescapeFilePostParams = function (file) {
    var reg = /[$]([0-9a-f]{4})/i;
    var unescapedPost = {};
    var uk;

    if (file != undefined) {
        for (var k in file.post) {
            if (file.post.hasOwnProperty(k)) {
                uk = k;
                var match;
                while ((match = reg.exec(uk)) !== null) {
                    uk = uk.replace(match[0], String.fromCharCode(parseInt("0x" + match[1], 16)));
                }
                unescapedPost[uk] = file.post[k];
            }
        }

        file.post = unescapedPost;
    }

    return file;
};

// Private: Called by Flash to see if JS can call in to Flash (test if External Interface is working)
SWFUpload.prototype.testExternalInterface = function () {
    try {
        return this.callFlash("TestExternalInterface");
    } catch (ex) {
        return false;
    }
};

// Private: This event is called by Flash when it has finished loading. Don't modify this.
// Use the swfupload_loaded_handler event setting to execute custom code when SWFUpload has loaded.
SWFUpload.prototype.flashReady = function () {
    // Check that the movie element is loaded correctly with its ExternalInterface methods defined
    var movieElement = this.getMovieElement();
    if (!movieElement) {
        this.debug("Flash called back ready but the flash movie can't be found.");
        return;
    }
    this.cleanUp(movieElement);

    this.queueEvent("swfupload_loaded_handler");
};

// Private: removes Flash added fuctions to the DOM node to prevent memory leaks in IE.
// This function is called by Flash each time the ExternalInterface functions are created.
SWFUpload.prototype.cleanUp = function (movieElement) {
    // Pro-actively unhook all the Flash functions
    try {
        if (this.movieElement && typeof (movieElement.CallFunction) === "unknown") { // We only want to do this in IE
            this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)");
            for (var key in movieElement) {
                try {
                    if (typeof (movieElement[key]) === "function") {
                        movieElement[key] = null;
                    }
                } catch (ex) {
                }
            }
        }
    } catch (ex1) {

    }

    // Fix Flashes own cleanup code so if the SWFMovie was removed from the page
    // it doesn't display errors.
    window["__flash__removeCallback"] = function (instance, name) {
        try {
            if (instance) {
                instance[name] = null;
            }
        } catch (flashEx) {

        }
    };

};


/* This is a chance to do something before the browse window opens */
SWFUpload.prototype.fileDialogStart = function () {
    this.queueEvent("file_dialog_start_handler");
};


/* Called when a file is successfully added to the queue. */
SWFUpload.prototype.fileQueued = function (file) {
    file = this.unescapeFilePostParams(file);
    this.queueEvent("file_queued_handler", file);
};


/* Handle errors that occur when an attempt to queue a file fails. */
SWFUpload.prototype.fileQueueError = function (file, errorCode, message) {
    file = this.unescapeFilePostParams(file);
    this.queueEvent("file_queue_error_handler", [file, errorCode, message]);
};

/* Called after the file dialog has closed and the selected files have been queued.
	You could call startUpload here if you want the queued files to begin uploading immediately. */
SWFUpload.prototype.fileDialogComplete = function (numFilesSelected, numFilesQueued, numFilesInQueue) {
    this.queueEvent("file_dialog_complete_handler", [numFilesSelected, numFilesQueued, numFilesInQueue]);
};

SWFUpload.prototype.uploadStart = function (file) {
    file = this.unescapeFilePostParams(file);
    this.queueEvent("return_upload_start_handler", file);
};

SWFUpload.prototype.returnUploadStart = function (file) {
    var returnValue;
    if (typeof this.settings.upload_start_handler === "function") {
        file = this.unescapeFilePostParams(file);
        returnValue = this.settings.upload_start_handler.call(this, file);
    } else if (this.settings.upload_start_handler != undefined) {
        throw "upload_start_handler must be a function";
    }

    // Convert undefined to true so if nothing is returned from the upload_start_handler it is
    // interpretted as 'true'.
    if (returnValue === undefined) {
        returnValue = true;
    }

    returnValue = !!returnValue;

    this.callFlash("ReturnUploadStart", [returnValue]);
};


SWFUpload.prototype.uploadProgress = function (file, bytesComplete, bytesTotal) {
    file = this.unescapeFilePostParams(file);
    this.queueEvent("upload_progress_handler", [file, bytesComplete, bytesTotal]);
};

SWFUpload.prototype.uploadError = function (file, errorCode, message) {
    file = this.unescapeFilePostParams(file);
    this.queueEvent("upload_error_handler", [file, errorCode, message]);
};

SWFUpload.prototype.uploadSuccess = function (file, serverData, responseReceived) {
    file = this.unescapeFilePostParams(file);
    this.queueEvent("upload_success_handler", [file, serverData, responseReceived, this.customSettings["fileNames"]]);
};

SWFUpload.prototype.uploadComplete = function (file) {
    file = this.unescapeFilePostParams(file);
    this.queueEvent("upload_complete_handler", file);
};

/* Called by SWFUpload JavaScript and Flash functions when debug is enabled. By default it writes messages to the
   internal debug console.  You can override this event and have messages written where you want. */
SWFUpload.prototype.debug = function (message) {
    this.queueEvent("debug_handler", message);
};


/* **********************************
	Debug Console
	The debug console is a self contained, in page location
	for debug message to be sent.  The Debug Console adds
	itself to the body if necessary.

	The console is automatically scrolled as messages appear.

	If you are using your own debug handler or when you deploy to production and
	have debug disabled you can remove these functions to reduce the file size
	and complexity.
********************************** */

// Private: debugMessage is the default debug_handler.  If you want to print debug messages
// call the debug() function.  When overriding the function your own function should
// check to see if the debug setting is true before outputting debug information.
SWFUpload.prototype.debugMessage = function (message) {
    if (this.settings.debug) {
        var exceptionMessage, exceptionValues = [];

        // Check for an exception object and print it nicely
        if (typeof message === "object" && typeof message.name === "string" && typeof message.message === "string") {
            for (var key in message) {
                if (message.hasOwnProperty(key)) {
                    exceptionValues.push(key + ": " + message[key]);
                }
            }
            exceptionMessage = exceptionValues.join("\n") || "";
            exceptionValues = exceptionMessage.split("\n");
            exceptionMessage = "EXCEPTION: " + exceptionValues.join("\nEXCEPTION: ");
            SWFUpload.Console.writeLine(exceptionMessage);
        } else {
            SWFUpload.Console.writeLine(message);
        }
    }
};

SWFUpload.Console = {};
SWFUpload.Console.writeLine = function (message) {
    var console, documentForm;

    try {
        console = document.getElementById("SWFUpload_Console");

        if (!console) {
            documentForm = document.createElement("form");
            document.getElementsByTagName("body")[0].appendChild(documentForm);

            console = document.createElement("textarea");
            console.id = "SWFUpload_Console";
            console.style.fontFamily = "monospace";
            console.setAttribute("wrap", "off");
            console.wrap = "off";
            console.style.overflow = "auto";
            console.style.width = "700px";
            console.style.height = "350px";
            console.style.margin = "5px";
            documentForm.appendChild(console);
        }

        console.value += message + "\n";

        console.scrollTop = console.scrollHeight - console.clientHeight;
    } catch (ex) {
        alert("Exception: " + ex.name + " Message: " + ex.message);
    }
};
/*
	Queue Plug-in

	Features:
		*Adds a cancelQueue() method for cancelling the entire queue.
		*All queued files are uploaded when startUpload() is called.
		*If false is returned from uploadComplete then the queue upload is stopped.
		 If false is not returned (strict comparison) then the queue upload is continued.
		*Adds a QueueComplete event that is fired when all the queued files have finished uploading.
		 Set the event handler with the queue_complete_handler setting.

	*/

var SWFUpload;
if (typeof (SWFUpload) === "function") {
    SWFUpload.queue = {};

    SWFUpload.prototype.initSettings = (function (oldInitSettings) {
        return function () {
            if (typeof (oldInitSettings) === "function") {
                oldInitSettings.call(this);
            }

            this.queueSettings = {};

            this.queueSettings.queue_cancelled_flag = false;
            this.queueSettings.queue_upload_count = 0;

            this.queueSettings.user_upload_complete_handler = this.settings.upload_complete_handler;
            this.queueSettings.user_upload_start_handler = this.settings.upload_start_handler;
            this.settings.upload_complete_handler = SWFUpload.queue.uploadCompleteHandler;
            this.settings.upload_start_handler = SWFUpload.queue.uploadStartHandler;

            this.settings.queue_complete_handler = this.settings.queue_complete_handler || null;
        };
    })(SWFUpload.prototype.initSettings);

    SWFUpload.prototype.startUpload = function (fileID) {
        this.queueSettings.queue_cancelled_flag = false;
        this.callFlash("StartUpload", [fileID]);
    };

    SWFUpload.prototype.cancelQueue = function () {
        this.queueSettings.queue_cancelled_flag = true;
        this.stopUpload();

        var stats = this.getStats();
        while (stats.files_queued > 0) {
            this.cancelUpload();
            stats = this.getStats();
        }
    };

    SWFUpload.queue.uploadStartHandler = function (file) {
        var returnValue;
        if (typeof (this.queueSettings.user_upload_start_handler) === "function") {
            returnValue = this.queueSettings.user_upload_start_handler.call(this, file);
        }

        // To prevent upload a real "FALSE" value must be returned, otherwise default to a real "TRUE" value.
        returnValue = (returnValue === false) ? false : true;

        this.queueSettings.queue_cancelled_flag = !returnValue;

        return returnValue;
    };

    SWFUpload.queue.uploadCompleteHandler = function (file) {
        var user_upload_complete_handler = this.queueSettings.user_upload_complete_handler;
        var continueUpload;

        if (file.filestatus === SWFUpload.FILE_STATUS.COMPLETE) {
            this.queueSettings.queue_upload_count++;
        }

        if (typeof (user_upload_complete_handler) === "function") {
            continueUpload = (user_upload_complete_handler.call(this, file) === false) ? false : true;
        } else if (file.filestatus === SWFUpload.FILE_STATUS.QUEUED) {
            // If the file was stopped and re-queued don't restart the upload
            continueUpload = false;
        } else {
            continueUpload = true;
        }

        if (continueUpload) {
            var stats = this.getStats();
            if (stats.files_queued > 0 && this.queueSettings.queue_cancelled_flag === false) {
                this.startUpload();
            } else if (this.queueSettings.queue_cancelled_flag === false) {
                this.queueEvent("queue_complete_handler", [this.queueSettings.queue_upload_count]);
                this.queueSettings.queue_upload_count = 0;
            } else {
                this.queueSettings.queue_cancelled_flag = false;
                this.queueSettings.queue_upload_count = 0;
            }
        }
    };
}

function ContextMenu(left, top, width, height) {
    // ID
    this.id = "ContextMenu" + parseInt(Math.random() * 1000000);

    this.eventObj = null;
    // 菜单项数组
    this.menuItems = new Array();
    // 菜单起点ｘ坐标
    this.left = left;
    // 菜单起点ｙ坐标
    this.width = width;
    // 菜单起点ｘ坐标
    this.height = height;
    // 菜单起点ｙ坐标
    this.top = top;
    // 名称
    this.titleText = "";
    // 图像
    this.titleImg = "";
    // 背景颜色
    this.bgColor = "";

    // 变量绑定事件
    eval(this.id + "=this");

}

function MenuItem(imgUrl, text, action, enabled) {
    this.imgUrl = imgUrl;
    this.text = text;
    this.action = action;
    // alert(disabled);
    if (enabled == false) {
        this.enabled = enabled;
    } else {
        this.enabled = true;
    }
}

ContextMenu.prototype = {
    /**
     * 增加菜单项
     */
    addMenuItem: function (imgUrl, text, action, enabled) {
        this.menuItems[this.menuItems.length] = new MenuItem(imgUrl, text,
            action, enabled);
    },

    /**
     * 组装菜单项字符串
     */
    createTableContent: function () {

        var tableContentStr = "";
        for (i = 0; i < this.menuItems.length; i++) {
            if ("splitLine" == this.menuItems[i].text) {
                tableContentStr += "<tr height=5><td align='center' style='border-top:1px solid gray;border-right:1px solid gray;width:24px;'></td><td style='border-top:1px solid gray;'>"
                    + "</td></tr></tr>";
            } else {
                if (!this.menuItems[i].enabled) {
                    tableContentStr += "<tr><td align='center' style='border-right:1px solid gray;width:24px;'><img  style='filter:Gray'  src='"
                        + this.menuItems[i].imgUrl
                        + "'></img></td><td style='color:gray;filter:Gray'>&nbsp;"
                        + this.menuItems[i].text + "</td></tr></tr>";
                } else {
                    tableContentStr += "<tr onclick='"
                        + this.menuItems[i].action
                        + ";"
                        + this.id
                        + ".hidden()' onmouseover='this.className=\"contextMenu_mouseOver\"'  onmouseout='this.className=\"contextMenu_mouseOut\"'><td align='center' style='border-right:1px solid gray;width:24px;'><img src='"
                        + this.menuItems[i].imgUrl
                        + "'></img></td><td>&nbsp;"
                        + this.menuItems[i].text + "</td></tr></tr>";
                }
            }
        }
        return tableContentStr;
    },

    /**
     * 生成table
     *
     * @return
     */
    createTable: function () {
        /**
         * table
         */
        var tableStr = "<table id='"
            + this.id
            + "' class='conextMenu_table' style=\"display:none;cursor:hand;position:absolute;width:"
            + this.width + ";left:" + this.left + ";top:" + this.top
            + ";\">";

        if (this.menuItems.length > 0) {
            tableStr += this.createTableContent();
        }

        tableStr += "</table>";
        return tableStr;
    },

    /**
     * 展示菜单项
     */
    show: function () {
        var menuTable = document.getElementById(this.id);
        menuTable.style.left = event.clientX;
        menuTable.style.top = event.clientY;
        // alert(event.x);
        menuTable.style.display = "inline";
    },
    hidden: function () {
        var menuTable = document.getElementById(this.id);
        menuTable.style.display = "none";
    },

    create: function () {
        var tableObj = document.createElement("table");
        document.body.appendChild(tableObj);
        tableObj.outerHTML = this.createTable();
        var menuTable = document.getElementById(this.id);
        document.body.onclick = function () {
            //menuTable.style.display = "none";
        };
    }

}
/*

DragResize v1.0
(c) 2005-2006 Angus Turnbull, TwinHelix Designs http://www.twinhelix.com

Licensed under the CC-GNU LGPL, version 2.1 or later:
http://creativecommons.org/licenses/LGPL/2.1/
This is distributed WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

*/


if (typeof addEvent != 'function') {
    var addEvent = function (o, t, f, l) {
        var d = 'addEventListener', n = 'on' + t, rO = o, rT = t, rF = f, rL = l;
        if (o[d] && !l) return o[d](t, f, false);
        if (!o._evts) o._evts = {};
        if (!o._evts[t]) {
            o._evts[t] = o[n] ? {b: o[n]} : {};
            o[n] = new Function('e', 'var r=true,o=this,a=o._evts["' + t + '"],i;for(i in a){o._f=a[i];r=o._f(e||window.event)!=false&&r;o._f=null}return r');
            if (t != 'unload') addEvent(window, 'unload', function () {
                removeEvent(rO, rT, rF, rL)
            })
        }
        if (!f._i) f._i = addEvent._i++;
        o._evts[t][f._i] = f
    };
    addEvent._i = 1;
    var removeEvent = function (o, t, f, l) {
        var d = 'removeEventListener';
        if (o[d] && !l) return o[d](t, f, false);
        if (o._evts && o._evts[t] && f._i) delete o._evts[t][f._i]
    }
}

function cancelEvent(e, c) {
    e.returnValue = false;
    if (e.preventDefault) e.preventDefault();
    if (c) {
        e.cancelBubble = true;
        if (e.stopPropagation) e.stopPropagation()
    }
};

function DragResize(myName, config) {
    var props = {
        myName: myName,
        enabled: true,
        handles: ['tl', 'tm', 'tr', 'ml', 'mr', 'bl', 'bm', 'br'],
        isElement: null,
        isHandle: null,
        element: null,
        handle: null,
        minWidth: 10,
        minHeight: 10,
        minLeft: 0,
        maxLeft: 9999,
        minTop: 0,
        maxTop: 9999,
        zIndex: 1,
        mouseX: 0,
        mouseY: 0,
        lastMouseX: 0,
        lastMouseY: 0,
        mOffX: 0,
        mOffY: 0,
        elmX: 0,
        elmY: 0,
        elmW: 0,
        elmH: 0,
        allowBlur: true,
        ondragfocus: null,
        ondragstart: null,
        ondragmove: null,
        ondragend: null,
        ondragblur: null
    };
    for (var p in props) this[p] = (typeof config[p] == 'undefined') ? props[p] : config[p]
};DragResize.prototype.apply = function (node) {
    var obj = this;
    addEvent(node, 'mousedown', function (e) {
        obj.mouseDown(e)
    });
    addEvent(node, 'mousemove', function (e) {
        obj.mouseMove(e)
    });
    addEvent(node, 'mouseup', function (e) {
        obj.mouseUp(e)
    })
};
DragResize.prototype.select = function (newElement) {
    with (this) {
        if (!document.getElementById || !enabled) return;
        if (newElement && (newElement != element) && enabled) {
            element = newElement;
            element.style.zIndex = ++zIndex;
            if (this.resizeHandleSet) this.resizeHandleSet(element, true);
            elmX = parseInt(element.style.left);
            elmY = parseInt(element.style.top);
            elmW = element.offsetWidth;
            elmH = element.offsetHeight;
            if (ondragfocus) this.ondragfocus()
        }
    }
};
DragResize.prototype.deselect = function (delHandles) {
    with (this) {
        if (!document.getElementById || !enabled) return;
        if (delHandles) {
            if (ondragblur) this.ondragblur();
            if (this.resizeHandleSet) this.resizeHandleSet(element, false);
            element = null
        }
        handle = null;
        mOffX = 0;
        mOffY = 0
    }
};
DragResize.prototype.mouseDown = function (e) {
    with (this) {
        if (!document.getElementById || !enabled) return true;
        var elm = e.target || e.srcElement, newElement = null, newHandle = null,
            hRE = new RegExp(myName + '-([trmbl]{2})', '');
        while (elm) {
            if (elm.className) {
                if (!newHandle && (hRE.test(elm.className) || isHandle(elm))) newHandle = elm;
                if (isElement(elm)) {
                    newElement = elm;
                    break
                }
            }
            elm = elm.parentNode
        }
        if (element && (element != newElement) && allowBlur) deselect(true);
        if (newElement && (!element || (newElement == element))) {
            if (newHandle) cancelEvent(e);
            select(newElement, newHandle);
            handle = newHandle;
            if (handle && ondragstart) this.ondragstart(hRE.test(handle.className))
        }
    }
};
DragResize.prototype.mouseMove = function (e) {
    with (this) {
        if (!document.getElementById || !enabled) return true;
        mouseX = e.pageX || e.clientX + document.documentElement.scrollLeft;
        mouseY = e.pageY || e.clientY + document.documentElement.scrollTop;
        var diffX = mouseX - lastMouseX + mOffX;
        var diffY = mouseY - lastMouseY + mOffY;
        mOffX = mOffY = 0;
        lastMouseX = mouseX;
        lastMouseY = mouseY;
        if (!handle) return true;
        var isResize = false;
        if (this.resizeHandleDrag && this.resizeHandleDrag(diffX, diffY)) {
            isResize = true
        } else {
            var dX = diffX, dY = diffY;
            if (elmX + dX < minLeft) mOffX = (dX - (diffX = minLeft - elmX)); else if (elmX + elmW + dX > maxLeft) mOffX = (dX - (diffX = maxLeft - elmX - elmW));
            if (elmY + dY < minTop) mOffY = (dY - (diffY = minTop - elmY)); else if (elmY + elmH + dY > maxTop) mOffY = (dY - (diffY = maxTop - elmY - elmH));
            elmX += diffX;
            elmY += diffY
        }
        with (element.style) {
            left = elmX + 'px';
            width = elmW + 'px';
            top = elmY + 'px';
            height = elmH + 'px'
        }
        if (window.opera && document.documentElement) {
            var oDF = document.getElementById('op-drag-fix');
            if (!oDF) {
                var oDF = document.createElement('input');
                oDF.id = 'op-drag-fix';
                oDF.style.display = 'none';
                document.body.appendChild(oDF)
            }
            oDF.focus()
        }
        if (ondragmove) this.ondragmove(isResize);
        cancelEvent(e)
    }
};
DragResize.prototype.mouseUp = function (e) {
    with (this) {
        if (!document.getElementById || !enabled) return;
        var hRE = new RegExp(myName + '-([trmbl]{2})', '');
        if (handle && ondragend) this.ondragend(hRE.test(handle.className));
        deselect(false)
    }
};
DragResize.prototype.resizeHandleSet = function (elm, show) {
    with (this) {
        if (!elm._handle_tr) {
            for (var h = 0; h < handles.length; h++) {
                var hDiv = document.createElement('div');
                hDiv.className = myName + ' ' + myName + '-' + handles[h];
                elm['_handle_' + handles[h]] = elm.appendChild(hDiv)
            }
        }
        for (var h = 0; h < handles.length; h++) {
            elm['_handle_' + handles[h]].style.visibility = show ? 'inherit' : 'hidden'
        }
    }
};
DragResize.prototype.resizeHandleDrag = function (diffX, diffY) {
    with (this) {
        var hClass = handle && handle.className && handle.className.match(new RegExp(myName + '-([tmblr]{2})')) ? RegExp.$1 : '';
        var dY = diffY, dX = diffX, processed = false;
        if (hClass.indexOf('t') >= 0) {
            rs = 1;
            if (elmH - dY < minHeight) mOffY = (dY - (diffY = elmH - minHeight)); else if (elmY + dY < minTop) mOffY = (dY - (diffY = minTop - elmY));
            elmY += diffY;
            elmH -= diffY;
            processed = true
        }
        if (hClass.indexOf('b') >= 0) {
            rs = 1;
            if (elmH + dY < minHeight) mOffY = (dY - (diffY = minHeight - elmH)); else if (elmY + elmH + dY > maxTop) mOffY = (dY - (diffY = maxTop - elmY - elmH));
            elmH += diffY;
            processed = true
        }
        if (hClass.indexOf('l') >= 0) {
            rs = 1;
            if (elmW - dX < minWidth) mOffX = (dX - (diffX = elmW - minWidth)); else if (elmX + dX < minLeft) mOffX = (dX - (diffX = minLeft - elmX));
            elmX += diffX;
            elmW -= diffX;
            processed = true
        }
        if (hClass.indexOf('r') >= 0) {
            rs = 1;
            if (elmW + dX < minWidth) mOffX = (dX - (diffX = minWidth - elmW)); else if (elmX + elmW + dX > maxLeft) mOffX = (dX - (diffX = maxLeft - elmX - elmW));
            elmW += diffX;
            processed = true
        }
        return processed
    }
};

// Using DragResize is simple!
// You first declare a new DragResize() object, passing its own name and an object
// whose keys constitute optional parameters/settings:

var dragresize = new DragResize('dragresize',
    {minWidth: 0, minHeight: 0, minLeft: -1000, minTop: -1000, maxLeft: 160000, maxTop: 60000});

// Optional settings/properties of the DragResize object are:
//  enabled: Toggle whether the object is active.
//  handles[]: An array of drag handles to use (see the .JS file).
//  minWidth, minHeight: Minimum size to which elements are resized (in pixels).
//  minLeft, maxLeft, minTop, maxTop: Bounding box (in pixels).

// Next, you must define two functions, isElement and isHandle. These are passed
// a given DOM element, and must "return true" if the element in question is a
// draggable element or draggable handle. Here, I'm checking for the CSS classname
// of the elements, but you have have any combination of conditions you like:

dragresize.isElement = function (elm) {

    if (elm.className && elm.className.indexOf('drsElement') > -1 && ((!document.getElementById("canMove")) || document.getElementById("canMove").checked)) return true;
};
dragresize.isHandle = function (elm) {
    if (elm.className && elm.className.indexOf('drsMoveHandle') > -1 && ((!document.getElementById("canMove")) || document.getElementById("canMove").checked)) return true;
};

// You can define optional functions that are called as elements are dragged/resized.
// Some are passed true if the source event was a resize, or false if it's a drag.
// The focus/blur events are called as handles are added/removed from an object,
// and the others are called as users drag, move and release the object's handles.
// You might use these to examine the properties of the DragResize object to sync
// other page elements, etc.

dragresize.ondragfocus = function () {
};
dragresize.ondragstart = function (isResize) {
};
dragresize.ondragmove = function (isResize) {
};
dragresize.ondragend = function (isResize) {
    //alert(this.element.id);
    writeFile(this.element.id + "_pos.txt", this.element.style.left + "," + this.element.style.top + "," + this.element.style.width + "," + this.element.style.height);
};
dragresize.ondragblur = function () {
};

// Finally, you must apply() your DragResize object to a DOM node; all children of this
// node will then be made draggable. Here, I'm applying to the entire document.
function deleteFilePos(id) {
    deleteFile(id + "_pos.txt");
}

function readPosFromFile(id) {

    var cot = readFile(id + "_pos.txt");
    if (cot && cot.length > 1) {
        var e = document.getElementById(id);
        var ss = cot.split(",");
        e.style.left = ss[0];
        e.style.top = ss[1];
        e.style.width = ss[2];
        e.style.height = ss[3];
    }

}

function readFile(filename) {
    try {
        var fso = new ActiveXObject("Scripting.FileSystemObject");
        var f = fso.OpenTextFile(filename, 1);
        var s = "";
        while (!f.AtEndOfStream)
            s += f.ReadLine() + "\n";
        f.Close();
        return s;
    } catch (e) {
        return null;
    }
}

// 写文件
function writeFile(filename, filecontent) {
    try {
        var fso, f, s;
        fso = new ActiveXObject("Scripting.FileSystemObject");
        f = fso.OpenTextFile(filename, 2, true);
        f.WriteLine(filecontent);
        f.Close();
    } catch (e) {
        alert(e + ",出现这个错误后，可以加授信网站，降低安全级别解决！，如果授信还不行，请手工调整安全级别，启用为标记为安全的activeX控件");
    }
}

function deleteFile(filename) {
    try {
        var fso, f, s;
        fso = new ActiveXObject("Scripting.FileSystemObject");
        f = fso.GetFile(filename);
        f.Delete();
        f.Close();
    } catch (e) {
        //alert(e+",出现这个错误后，可以加授信网站，降低安全级别解决！，如果授信还不行，请手工调整安全级别，启用为标记为安全的activeX控件");
    }


}


function getInputValue(element) {
    if (element) {
        if (isString(element)) {
            var eid = document.getElementById(element);
            if (!eid) {
                element = document.getElementsByName(element)[0];
            } else {
                element = eid;
            }
        }
        if (element.tagName == "INPUT" || element.tagName == "input") {
            if (element.type == "RADIO" || element.type == "radio") {
                var rs = document.getElementsByName(element.name);
                var len212 = rs.length;
                for (var j = 0; j < len212; j++) {
                    var d = rs[j];
                    if (d.checked || d.selected) {
                        return d.value.trim();
                    }
                }
                return "";
            } else if (element.type == "CHECKBOX" || element.type == "checkbox") {
                return element.checked;
            } else {
                return element.value.trim();
            }

        } else if (element.tagName == "TEXTAREA" || element.tagName == "textarea") {
            return element.value;

        } else if (element.tagName == "SELECT" || element.tagName == "select") {
            if (element.selectedIndex != -1) {
                return element.options[element.selectedIndex].value;
            } else {
                return "";
            }
        }
    }
    return "";
}

function isString(_str) {
    return typeof _str == 'string' || _str.constructor == String;
}

function setValue(element, value) {

    if (element) {
        if (isString(element)) {
            var eid = document.getElementById(element);
            if (!eid) {
                element = document.getElementsByName(element)[0];
            } else {
                element = eid;
            }
        }
        if (element.tagName == "INPUT" || element.tagName == "input") {
            if (element.type == "RADIO" || element.type == "radio") {
                var rs = document.getElementsByName(element.name);
                var len212 = rs.length;
                for (var j = 0; j < len212; j++) {
                    var d = rs[j];
                    if (d.value == value) {
                        d.checked = true;
                        d.selected = true;
                        return;
                    }
                }
                return;
            } else if (element.type == "CHECKBOX" || element.type == "checkbox") {
                element.checked = ("true" == value || true == value);
            } else {
                element.value = value;
            }

        } else if (element.tagName == "TEXTAREA" || element.tagName == "textarea") {
            element.value = value;

        } else if (element.tagName == "SELECT" || element.tagName == "select") {
            for (var i = 0; i < element.options.length; i++) {
                if (element.options[i].value == value) {
                    element.options[i].selected = true;
                    element.selectedIndex = i;
                    break;
                }
            }
        }
    }
    return;
}

var life = 6000;
var buubble_timer;

function bubble(options) {
    var div = document.getElementById("bubble111_div");
    var img = options.img ? options.img : "bubble.png";
    if (!div) {

        div = document.createElement("div");
        div.style.cssText = "z-index:999999;display:block;filter:alpha(opacity=100);opacity:1.0;position:absolute;background:url('" + img
            + "');background-repeat: no-repeat;width:300px;height:160px;padding:10px;text-align:center;padding-top:40px;";
        div.id = "bubble111_div";
        document.body.appendChild(div);
    } else {
        div.style.cssText = "z-index:999999;display:block;filter:alpha(opacity=100);opacity:1.0;position:absolute;background:url('" + img
            + "');background-repeat: no-repeat;width:300px;height:160px;padding:10px;text-align:center;padding-top:40px;";
    }

    if (div.filters && div.filters.alpha) {
        div.filters.alpha.opacity = 100;
    } else {
        div.style.opacity = 1;
    }

    if (options) {
        if (options.html) {
            div.innerHTML = options.html;
        }
        if (options.cssText) {
            div.style.cssText = options.cssText;
        }
        if (!options.left) {
            options.left = (document.body.clientWidth || document.body.offsetWidth) / 2 - 100;
        }
        div.style.left = options.left + "px";

        if (!options.top) {
            options.top = (document.body.clientHeight || document.body.offsetHeight) / 2;
        }
        div.style.top = options.top + "px";
        if (options.width) {
            div.style.width = options.width + "px";
        }
        if (options.height) {
            div.style.height = options.height + "px";
        }
        if (options.backgroundImage) {
            div.style.backgroundImage = "url(" + options.backgroundImage + ")";
        }
        if (options.music) {
            var MUSIC1 = document.getElementById("bubble_music");
            if (!MUSIC1) {
                MUSIC1 = document.createElement("embed");
                MUSIC1.id = "bubble_music";
                MUSIC1.style.height = "1px";
                MUSIC1.style.width = "1px";
                div.appendChild(MUSIC1);
            }

            MUSIC1.src = options.music;
        }
    }
    div.style.display = "block";
    if (options.life) {
        life = options.life;
    }
    buubble_begin();

}

function buubble_begin() {

    if (buubble_timer) {
        window.clearTimeout(buubble_timer);
    }
    buubble_timer = window.setTimeout("hideBubble()", 10);
}

function ifnull(s) {
    if (s == null) {
        return "";
    }
    return s;
}

function buubble_hidehide(div) {
    div.style.display = "none";
    var MUSIC1 = document.getElementById("bubble_music");
    if (MUSIC1) {
        MUSIC1.src = "";
        try {
            MUSIC1.stop();
        } catch (e) {
        }
        MUSIC1.parentNode.removeChild(MUSIC1);
    }

}

function hideBubble() {
    var div = document.getElementById('bubble111_div');
    var ratio = (1.0 - 100.0 / life);
    if (div.filters && div.filters.alpha) {
        div.filters.alpha.opacity = div.filters.alpha.opacity * ratio;
        if (div.filters.alpha.opacity > 10) {
            buubble_begin();
        } else {
            buubble_hidehide(div);
        }
    } else {
        div.style.opacity = div.style.opacity * ratio;
        if (div.style.opacity > 0.1) {
            buubble_begin();
        } else {
            buubble_hidehide(div);
        }
    }
}
﻿var G_WebRoot = '/'
    + (window.location.pathname.indexOf('/') == 0 ? window.location.pathname.split('/')[1]
        : window.location.pathname.split('/')[0]) + '/';
String.prototype.trim = function () {
    return this.replace(/(^\s*)|(\s*$)/g, "");
};

function addClassName(obj, cn) {
    var old = obj.className || obj.getAttribute("className") || obj.getAttribute("class");
    obj.className = old + cn;
    obj.setAttribute("className", old + cn);
    obj.setAttribute("class", old + cn);
}

function setClassName(obj, cn) {
    obj.className = cn;
    obj.setAttribute("className", cn);
    obj.setAttribute("class", cn);
}

function removeClassName(obj, cn) {
    var old = obj.className || obj.getAttribute("className") || obj.getAttribute("class");
    old = old + "";
    old = old.replace(cn, "");
    obj.className = old;
    obj.setAttribute("className", old);
    obj.setAttribute("class", old);
}

var req = "";
var language = {
    eglish: {
        add: "Add",
        del: "Delete",
        modify: "Modify",
        query: "Query",
        detail: "Detail",
        refresh: "refresh",
        prevPage: "previous page",
        nextPage: "next page",
        firstPage: "first page",
        endPage: "end page",
        current: "current:",
        totalRows: "total:",
        pageSize: "pageSize:",
        confirmDelete: "confirm delete?",
        selectOneRow: "please select an item to operate"
    },
    chinese: {
        add: "新增",
        del: "删除",
        modify: "修改",
        query: "查询",
        detail: "详细信息",
        refresh: "刷新",
        prevPage: "前一页",
        nextPage: "下一页",
        firstPage: "首页",
        endPage: "尾页",
        current: "当前:",
        totalRows: "总行数:",
        pageSize: "每页:",
        confirmDelete: "真的删除?",
        selectOneRow: "请选择一条数据"
    }
};
var JBF = (function () {
    return {

        language: language.chinese,

        dateFormat: "yyyyMMdd",///"dd/MM/yyyy",
        dateTimeFormat: "yyyyMMdd HH:mm:ss",//"dd/MM/yyyy HH:mm:ss",

        getTopWin: function (win) {
            if (!win) {
                win = window;
            }
            if (win.dialogArguments) {
                return JBF.getTopWin(win.dialogArguments);
            } else {
                var top = win.top;
                if (top.parent != top) {
                    return JBF.getTopWin(top.parent);
                } else {
                    return top;
                }
            }

        },
        isString: function (str) {
            return (typeof str == 'string') || (str instanceof String);
        },
        getTopFrame: function () {
            return JBF.getTopWin().topFrame;
        },
        getCurrentUser: function () {
            return JBF.getTopFrame().top_user;
        },
        today: function () {
            var d = new Date();
            return JBF.formatDate(d, JBF.deteFormat);
        },
        getDateString: function (numOfDays) {
            var d = new Date(new Date().getTime() + numOfDays * 24 * 3600 * 1000);
            return JBF.formatDate(d, JBF.deteFormat);
        },
        formateDate2: function (date, format) {
            if (!date) {
                return "";
            }
            var day = date.getDate(), month = date.getMonth() + 1, year = date.getFullYear(), hours = date.getHours(),
                minutes = date
                    .getMinutes(), seconds = date.getSeconds();

            if (!format) {
                format = JBF.dateFormat;
            }
            if (!format) {
                format = "MM/dd/yyyy";
            }

            format = format.replace("MM", month.toString().replace(/^(\d)$/, '0$1'));

            if (format.indexOf("yyyy") > -1) {
                format = format.replace("yyyy", year.toString());
            } else if (format.indexOf("yy") > -1) {
                format = format.replace("yy", year.toString().substr(2, 2));
            }

            format = format.replace("dd", day.toString().replace(/^(\d)$/, '0$1'));

            if (format.indexOf("t") > -1) {
                if (hours > 11) {
                    format = format.replace("t", "pm");
                } else {
                    format = format.replace("t", "am");
                }
            }

            if (format.indexOf("HH") > -1) {
                format = format.replace("HH", hours.toString().replace(/^(\d)$/, '0$1'));
            }

            if (format.indexOf("hh") > -1) {
                if (hours > 12) {
                    hours -= 12;
                }

                if (hours === 0) {
                    hours = 12;
                }
                format = format.replace("hh", hours.toString().replace(/^(\d)$/, '0$1'));
            }

            if (format.indexOf("mm") > -1) {
                format = format.replace("mm", minutes.toString().replace(/^(\d)$/, '0$1'));
            }

            if (format.indexOf("ss") > -1) {
                format = format.replace("ss", seconds.toString().replace(/^(\d)$/, '0$1'));
            }

            return format;
        },
        formatDate: function (d, format) {
            if (!d) {
                return "";
            }
            if (d.length && d.substr) {
                if (!format) {
                    format = JBF.dateFormat;
                }
                if (!format) {
                    format = "yyyymmdd";
                }

                format = format.toLowerCase();
                d = d.replace("-", "").replace("-", "");
                if (d.length >= 8) {
                    return format.replace("yyyy", d.substring(0, 4)).replace("mm", d.substring(4, 6)).replace("dd",
                        d.substring(6, 8));
                }
                return d;
            } else {
                return JBF.formateDate2(d, format);
            }

        },
        jsonp: function (url, callback) {
            var script = document.createElement('script');
            script.setAttribute('src', url);
            document.getElementsByTagName("head")[0].appendChild(script);
        },

        doc: window.document,
        strIsNull: function (str) {
            if (str && typeof (str) == 'string') {
                if (str.length > 0) {
                    return true;
                }
                return false;
            }
            return false;
        },
        el: function (id) {
            if (id && typeof (id) == 'string') {
                return JBF.doc.getElementById(id);
            }
        },
        setObjValue: function (condition, srcObj, defualtValue) {
            if (condition) {
                return srcObj;
            } else {
                if (defualtValue) {
                    return defualtValue;
                }
            }
            return "";
        },
        /**
         * 通过名称，获取当前元素值
         */
        elByName: function (name) {
            if (name && typeof (name) == 'string') {
                return JBF.doc.getElementsByName(name);
            }
        },
        mockEvent: function (obj, eventName) {
            var event = null;
            if (document.all) {
                event = document.createEventObject();
                obj.fireEvent("on" + eventName, event);
            } else {
                document.createEvent("MouseEvents");
                event.initMouseEvent(eventName, true, true, document.defaultView, 0, 0, 0, 0, 0, false, false, false,
                    false, 0, null);
                obj.dispatchEvent(event);
            }
        },
        /**
         * 通过className名称获取一层子节点信息
         *
         * @param obj
         * @param className
         * @returns
         */
        elChildForClassName: function (obj, className) {
            if (obj && obj.childNodes) {
                var subNodes = obj.childNodes;
                for (var i = (subNodes.length - 1); i > -1; i--) {
                    if (subNodes[i].className && subNodes[i].className == className) {
                        return subNodes[i];
                    }
                }
            }
        },
        /**
         * 得到页面版本信息
         *
         * @returns
         */
        getBrowseVersion: function () {
            var agent = navigator.userAgent;
            if (agent.indexOf("MSIE")) {
                agent = (agent.substring(agent.indexOf("MSIE") + 4, agent.indexOf("Windows")));
                agent = Number(agent.replace(";", ""));
                return agent;
            }
            return null;
        },
        getBrowseIsIe: function () {
            var agent = navigator.userAgent;
            if (agent.indexOf("MSIE")) {
                return true;
            }
            return false;
        },
        elAllChildForClassName: function (obj, className, childs) {
            if (obj && obj.childNodes) {
                var subNodes = obj.childNodes;
                for (var i = (subNodes.length - 1); i > -1; i--) {
                    if (subNodes[i].className && subNodes[i].className == className) {
                        childs.push(subNodes[i]);
                        if (document.all) {
                            JBF.elAllChildForClassName(subNodes[i], className, childs);
                        }
                    }
                }
            }
        },
        /**
         * 得到当前事件
         */
        getEvent: function (event) {
            return event ? event : (window.event || arguments[0]);
        },
        /**
         * 得到键盘按钮的ascII值
         */
        getKeyValue: function (event) {
            if (!event) {
                return null;
            }
            if (event.keyCode) {
                return event.keyCode;
            } else {
                return event.charCode;
            }
        },

        /**
         * 得到下一个节点。兼容ie9
         */
        getNextElement: function (node) {
            var x = node.nextSibling;
            if (x) {
                while (x && x.nodeType != 1) {
                    x = x.nextSibling;
                }
                return x;
            }
            return null;
        },
        /**
         * 得到上一个节点。兼容ie9
         */
        getPreElement: function (node) {
            var x = node.previousSibling;
            if (x) {
                while (x && x.nodeType != 1) {
                    x = x.previousSibling;
                }
                return x;
            }
            return null;
        },

        /**
         * 在目标节点之后插入新节点
         *
         * @param newEl
         * @param targetEl
         * @returns
         */
        insertAfter: function (newEl, targetEl) {
            var parentEl = targetEl.parentNode;
            if (parentEl.lastChild == targetEl) {
                parentEl.appendChild(newEl);
            } else {
                parentEl.insertBefore(newEl, targetEl.nextSibling);
            }
        },

        /**
         * 输入校验
         *
         * @param obj
         * @param regex
         * @param tipText
         * @returns
         */
        inputCheck: function (obj, regex, tipText) {
            var patrn = regex;
            if (obj.value.match(patrn)) {
                removeClassName(obj, "focusedInput");//.style.borderColor = "#9cb3e2";
                var showTipDiv = JBF.el(obj.name + "_TipDiv");
                if (showTipDiv) {
                    JBF.el(obj.name + "_TipDiv").style.display = "none";
                }
                return;
            } else {
                if (obj.value == "") {
                    return;
                } else {
                    this.showTipText(obj, tipText);
                }
            }
        },

        /**
         * 显示校验未通过时提示信息
         *
         * @param obj
         * @param tipText
         * @returns
         */
        showTipText: function (obj, tipText) {
            var showTipDiv = JBF.el(obj.name + "_TipDiv");
            if (!showTipDiv) {
                showTipDiv = document.createElement("div");
                showTipDiv.setAttribute("id", obj.name + "_TipDiv");
                this.insertAfter(showTipDiv, obj);
            }
            showTipDiv.innerHTML = tipText;
            showTipDiv.className = "showTipDiv";
            showTipDiv.style.display = "block";
            showTipDiv.style.left = JBF.getAbsX(obj) + "px";
            showTipDiv.style.width = JBF.getObjWidth(obj) - 2 + "px";
            showTipDiv.style.top = JBF.getAbsY(obj) + JBF.getObjHeight(obj) + "px";
            addClassName(obj, 'focusedInput');//.style.borderColor = "#FF0000";
        },

        /**
         * 隐藏tip提示层
         */
        hiddenTipDiv: function (obj) {
            var showTipDiv = JBF.el(obj.name + "_TipDiv");
            if (showTipDiv) {
                obj.style.borderColor = "#D0DABB";
                JBF.el(obj.name + "_TipDiv").style.display = "none";
            }
        },

        /**
         * 数值录入框
         *
         * @param input
         * @returns
         */
        replaceNum: function (input) {
            var pattern = new RegExp(/[^0-9*]/g);
            this.inputCheck(input, /^[\d*]+$/, "该字段只能输入整数");
            input.value = input.value.replace(pattern, '');
        },
        replaceDate: function (input) {
            if ("长期" == input.value || "cq" == input.value || "*" == input.value) {
                return;
            }
            var pattern = new RegExp(/[^0-9]/g);
            var value = input.value.replace(pattern, '');

            // value=input.value.replace(/\D/g,''); //
            // onafterpaste="this.value=this.value.replace(/\D/g,'')">
            var key5 = 0;
            var key6 = 0;
            var year = "1900";
            var month = "12";
            if (value.length > 4) {
                key5 = value.substring(4, 5);
                year = Number(value.substring(0, 4));
                if (key5 > 1) {
                    input.value = value.substring(0, 4);
                    return;
                }
            }
            if (value.length > 5) {
                key6 = value.substring(5, 6);
                month = value.substring(4, 6);
                if (key5 == 1 && key6 > 2) {
                    input.value = value.substring(0, 5);
                    return;
                }
            }
            if (value.length > 6) {
                key7 = value.substring(6, 7);
                key6 = Number(month);
                if (key6 == 2) {
                    if (key7 > 2) {
                        input.value = value.substring(0, 6);
                        return;
                    }
                } else {
                    if (key7 > 3) {
                        input.value = value.substring(0, 6);
                        return;
                    }
                }
            }
            if (value.length > 7) {
                key7 = value.substring(6, 7);
                key8 = value.substring(7, 8);
                key6 = Number(month);
                if (key6 == 2) {
                    if (key7 > 1) {
                        if (year % 4 != 0 && key8 > 8) {// 来进行判断年的类型
                            input.value = value.substring(0, 7);
                            return;
                        }
                    }
                } else {
                    if (key7 > 2) {
                        if (key6 == 1 || key6 == 3 || key6 == 5 || key6 == 7 || key6 == 8 || key6 == 10 || key6 == 12) {
                            if (key8 > 1) {
                                input.value = value.substring(0, 7);
                                return;
                            }
                        } else {
                            if (key8 > 0) {
                                input.value = value.substring(0, 7);
                                return;
                            }
                        }// 如果输入的是3，则个位只允许输入0或1、
                    }
                }
            }
            if (value.length > 8) {
                input.value = value.substring(0, 8);
            } else {
                input.value = value;
            }
        },
        /**
         * 货币录入框
         *
         * @param input
         * @param numCount
         * @returns
         */
        replaceMoney: function (obj, numCount) {
            var formatMoneyString = function formatMoneyString(sString) {
                if (!sString) {
                    return "0.00";
                }
                var szRet = "";
                var v = sString.replace(/(^\s*)|(\s*$)/g, ""); // 去除前后空格
                if (v.length != "") {
                    // 添加小数点
                    var index = v.indexOf('.');
                    var szresult = "";
                    if (index == -1) {
                        if (v.length == 0) {
                            szresult = "";
                        } else if (v.length == 1) {
                            szresult = "0.0" + v;
                        } else if (v.length == 2) {
                            szresult = "0." + v;
                        } else {
                            szresult = v.substring(0, v.length - 2) + "." + v.substring(v.length - 2, v.length);
                        }
                    } else if (index == v.length - 1) {
                        szresult = v + "00";
                    } else if (index == v.length - 2) {
                        szresult = v + "0";
                    } else {
                        szresult = v;
                    }
                    index = szresult.indexOf(".");
                    var tempdecimalpart = szresult.substring(index, index + 3);
                    var temp = szresult.substring(0, index);
                    index = temp.length % 3;
                    var tempintegerpart = temp.substring(0, index);
                    for (; index < temp.length; index += 3) {
                        if (tempintegerpart == "") {
                            tempintegerpart = tempintegerpart + temp.substring(index, index + 3);
                        } else {
                            tempintegerpart = tempintegerpart + "," + temp.substring(index, index + 3);
                        }
                    }
                    szRet = tempintegerpart + tempdecimalpart;
                }
                return szRet;
            };
            var keyCode = JBF.getKeyValue(JBF.getEvent());
            if (keyCode == 9 || keyCode == 13) {
                return true;
            }
            var v = obj.value;
            v = v.replace(/(^\s*)|(\s*$)/g, "").replace(/(,)/g, "");
            var pattern = new RegExp(/[^(0-9|,|.)]/g);
            v = v.replace(pattern, "");
            if ((keyCode >= 96 && keyCode <= 105) || keyCode == 111 || (keyCode >= 48 && keyCode <= 57)
                || keyCode == 13 || keyCode == 9 || keyCode == 8) {
                var indexDot = v.indexOf(".");
                v = v.substring(0, indexDot) + v.substring(indexDot + 1);
                while (v.length > 3 && v.substring(0, 1) == '0') {
                    v = v.substring(1);
                }
                if (v != "") {
                    showmsg = formatMoneyString(v);
                    obj.value = showmsg;
                }
            } else {
                obj.value = showmsg;
            }
        },
        getNumber: function (numValue) {
            return JBF.getDecimal(numValue, 0);
        },
        getDecimal: function (decValue, numCount) {
            if (decValue) {
                var value = decValue.toString().replace(/\$|\,/g, '');
                var isNegative = false;
                isNegative = (decValue == (decValue = Math.abs(decValue))) == false;
                var splitLen = 3;
                var returnValue = "";
                var num = "";// 存放小数
                if (value.indexOf(".") > -1) {
                    num = value.substring(value.indexOf("."));// 用来约束小数位个数
                    if (numCount && num.length > (numCount + 1)) {
                        decValue = decValue.substring(0, decValue.length - 1);
                        return;
                    }
                    value = value.substr(0, value.indexOf("."));
                }
                while (value.length > splitLen) {// 重复加,
                    returnValue = ("," + value.substr(value.length - splitLen, splitLen)) + returnValue;
                    value = value.substr(0, value.length - splitLen);
                }
                if (value.length > 0) {
                    returnValue = value + returnValue;
                }
                if (isNegative) {
                    return "-" + returnValue + num;
                }
                return returnValue + num;// 重整后送还input的value
            } else {
                return 0;
            }
        },
        getDate: function (date) {
            var pattern = new RegExp(/[^0-9]/g);
            if (date) {
                date = date.replace(pattern, '');
                return date.substring(0, 8);
            } else {
                return "";
            }
        },

        getTimestamp: function (date) {
            return date.replace("T", " ");
        },
        formatMoney: function (cash) {
            while (cash.charAt(0) == '0') {
                cash = cash.substr(1);
            }
            if (cash == "")
                return "";
            if (cash.substring(0, 1) == ".")
                cash = "0" + cash;
            if (cash.indexOf('.') == cash.length)
                cash = cash + "00";
            else if (cash.indexOf('.') == cash.length - 1)
                cash = cash + "0";
            else if (cash.indexOf('.') < 0)
                cash = cash + ".00";

            var dotIndex = cash.indexOf('.');
            var integerCash = cash.substring(0, dotIndex);
            var decimalCash = cash.substring(dotIndex);
            return this.addComma(integerCash) + decimalCash;
        },
        /**
         * * 判断输入变量是否是浮点数 *
         *
         * @param {String}
         *            要检查的变量值 *
         * @return {bool} 是否为浮点数
         */
        isFloat: function (s) {
            var isFloat = RegExp(/^([0-9]+(\.+))[0-9]+$/);
            return (isFloat.test(s));
        },
        addComma: function (str) {

            if (str.length > 3) {
                var mod = str.length % 3;
                var output = (mod > 0 ? (str.substring(0, mod)) : '');
                for (var i = 0; i < Math.floor(str.length / 3); i++) {
                    if ((mod == 0) && (i == 0))
                        output += str.substring(mod + 3 * i, mod + 3 * i + 3);
                    else
                        output += ',' + str.substring(mod + 3 * i, mod + 3 * i + 3);
                }
                return (output);
            } else
                return str;
        },
        getFormatValue: function (value, type) {
            switch (type) {
                case "date":
                    value = JBF.getDate(value);
                    break;
                case "timestamp":
                    value = JBF.getTimestamp(value);
                    break;
                case "number":
                    value = JBF.getNumber(value);
                    break;
                case "decimal":
                    value = JBF.getDecimal(value, 2);
                    break;
                case "money":
                    value = JBF.formatMoney(value);
                default:
                    break;
            }
            return value;
        },
        /**
         * 得到执行事件的对象
         */
        getEventTarget: function (ev) {
            if (ev.srcElement) {
                return ev.srcElement;
            } else {
                return ev.target;
            }
        },
        /**
         * 得到屏幕高度
         */
        getScreenHeight: function () {
            var pageHeight = window.innerHeight;
            if (typeof pageHeight != "number") {
                if (document.compatMode == "CSS1Compat") {
                    pageHeight = document.documentElement.clientHeight;
                } else {
                    pageHeight = document.body.clientHeight;
                }
            }
            return pageHeight;
        },
        /**
         * 得到屏幕宽度
         */
        getScreenWidth: function () {
            var pageWidth = window.innerWidth;
            if (typeof pageWidth != "number") {
                if (document.compatMode == "CSS1Compat") {
                    pageWidth = document.documentElement.clientWidth;
                } else {
                    pageWidth = document.body.width;
                }
            }
            return pageWidth;
        },
        /**
         * 得到点击是的鼠标x位置
         */
        pointerX: function (event) {
            return event.pageX || (event.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft));
        },
        /**
         * 得到点击是的鼠标y位置
         */
        pointerY: function (event) {
            return event.pageY || (event.clientY + (document.documentElement.scrollTop || document.body.scrollTop));
        },
        /**
         *
         * @returns
         */
        getObjHeight: function (obj) {
            if (document.all) {
                return obj.offsetHeight;
            }
            return obj.clientHeight;
        },
        getObjWidth: function (obj) {
            if (document.all) {
                return obj.offsetWidth;
            }
            return obj.clientWidth;
        },
        getAbsX: function (obj) {
            o = obj;
            oLeft = o.offsetLeft;
            while (o.offsetParent != null) {
                oParent = o.offsetParent;
                oLeft += oParent.offsetLeft;
                o = oParent;
            }
            return oLeft;
        },
        getMouseX: function (event) {
            var ev = JBF.getEvent(event);
            if (ev.screenX) {
                return ev.screenX;
            }
            return 0;
        },
        getMouseY: function (event) {
            var ev = JBF.getEvent(event);
            if (ev.screenY) {
                return ev.screenY;
            }
            return 0;
        },
        getX: function (ev) {
            if (window.event) {
                return event.x;
            } else {
                return ev.pageX;
            }
        },
        getY: function (ev) {
            if (window.event) {
                return event.y;
            } else {
                return ev.pageY;
            }
        },
        getAbsY: function (obj) {
            o = obj;
            oTop = o.offsetTop;
            while (o.offsetParent != null) {
                oParent = o.offsetParent;
                oTop += oParent.offsetTop; // Add parent top position
                o = oParent;
            }
            return oTop;
        },
        /**
         * 对来获取对像中的所有再有滚动条的高度
         *
         * @param obj
         * @returns
         */
        getScrollTop: function (obj) {
            var sh = 0;
            (function (obj) {
                if (obj.scrollTop) {
                    sh += obj.scrollTop;
                }
                var parentNode = obj.parentNode;
                if (parentNode && parentNode.nodeName != "BODY") {
                    arguments.callee(obj.parentNode);
                }
            })(obj);
            return sh;
        },
        getStyleNum: function (obj) {
            if (obj) {
                obj = obj.replace("px", "").replace("PX", "");
                try {
                    return Number(obj);
                } catch (e) {
                    return 0;
                }
            }
            return 0;
        },
        /**
         * 根据不同的类型，获取不同的值，type
         */
        getValue: function (name, type) {
            if (name) {
                var cty = JBF.el(name);
                if (cty) {
                    if (cty.nodeName == "INPUT" || cty.nodeName == "SELECT") {
                        if (cty.type == "checkbox" || cty.type == "radio") {
                            return JBF.getSubValues(JBF.elByName(name));
                        } else if (type == "date") {
                            var value = cty.value.replace(/[ ]/g, "");
                            if (value && value.length == 8) {
                                return value;// value.substring(0, 4) + "-" +
                                // value.substring(4, 6) + "-" +
                                // value.substring(6, 8);
                            } else {
                                if (value.length > 0 && value.length <= 8) {
                                    alert("日期格式不合法！");
                                    value = "";
                                }
                                return "";
                            }
                        } else if (type == "money") {
                            var value = cty.value.replace(/[ ]/g, "");
                            return value.replace(/\$|\,/g, "");
                        } else {
                            var value = cty.value.replace(/[ ]/g, "");
                            return value;
                        }
                    } else if (cty.nodeName == "DIV" || cty.nodeName == "TEXTAREA") {
                        return cty.innerHTML;
                    } else {
                        return JBF.getSubValues(JBF.elByName(name));
                    }
                }
            }
            return "";
        },
        setValue: function (name, type, value) {
            if (name) {
                var cty = JBF.el(name);
                if (cty) {
                    if (cty.nodeName == "INPUT") {
                        if (cty.type == "checkbox") {
                            var values = value.split(",");
                            JBF.setCheckValue(JBF.elByName(name), values, "check");
                        } else if (cty.type == "radio") {
                            JBF.setCheckValue(JBF.elByName(name), value, "radio");
                        } else {
                            cty.value = value;
                        }
                    } else if (cty.nodeName == "SELECT") {
                        JBF.setOptionValue(cty, value);
                    } else if (cty.nodeName == "DIV" || cty.nodeName == "TEXTAREA") {
                        cty.innerHTML = value;
                    }
                }
            }
        },
        /**
         * 得到check/radio组合的值，以数组形式返回
         */
        getSubValues: function (cty) {
            var str = "";
            if (cty) {
                for (var i = 0; i < cty.length; i++) {
                    if (cty[i].checked) {
                        str += cty[i].value + ",";
                    }
                }
                if (str.length > 0) {
                    str = str.substr(0, str.length - 1);
                }
            }
            return str;
        },
        /**
         * 取父窗口中的url参数
         */
        getParentUrlParams: function (params, paramName) {
            if (params == null) {
                params = window;
            }
            if (params.location || ("" + params).indexOf("object Window") != -1) {
                params = params.location.href;
            }
            var idx11 = params.indexOf('?');
            if (idx11 != -1) {
                params = params.substr(idx11 + 1);
            }
            selectIndex = null;
            if (params && params.length > 0) {
                params = params.replace("?", "");// 取参数，并且在参数中找选择的id号，如果有id号是修改,如果没有id号为新增
                var par = params.split("&");
                for (var i = 0; i < par.length; i++) {
                    var subPar = par[i].split("=");
                    if (subPar[0] == paramName) {
                        selectIndex = subPar[1];
                        i = par.length;
                    }
                }
            }
            return selectIndex;
        },
        /**
         * 设置select控件的值
         */
        setOptionValue: function (opt, value) {
            if (opt) {
                var opts = opt.options;
                for (var i = 0; i < opts.length; i++) {
                    if (opts[i].value == value) {
                        opts[i].selected = true;
                        return;
                    }
                }
            }
        },

        /**
         * 设置check或radio控件的值
         */
        setCheckValue: function (opt, values, type) {
            if (opt) {
                if (type == "radio") {
                    for (var i = 0; i < opt.length; i++) {
                        var check = opt[i];
                        if (check.value == values) {
                            check.checked = true;
                            i = opt.length;
                        }
                    }
                } else if (type == "check") {
                    for (var i = 0; i < opt.length; i++) {
                        var check = opt[i];
                        for (var j = 0; j < values.length; j++) {
                            if (check.value == values[j]) {
                                check.checked = true;
                                j = values.length;
                            }
                        }
                    }
                }
            }
        },
        /**
         * 增加事件
         */
        addEvent: function (obj, eventName, fn) {
            if (obj.attachEvent) {
                obj.attachEvent('on' + eventName, fn);
            } else if (obj.addEventListener) {
                obj.addEventListener(eventName, fn, false);
            } else {
                obj["on" + eventName] = fn;
            }
        },
        removeEvent: function (obj, eventName, fn) {
            if (obj.removeEventListener) {
                obj.removeEventListener(eventName, fn, false);
            } else if (obj.detachEvent) {
                obj.detachEvent('on' + eventName, fn);
            }
        },
        /**
         * 字符串转换成对象
         */
        strToObj: function (s) {
            if (s && typeof (s) == 'string') {
                try {
                    return eval('(' + s + ')');
                } catch (e) {
                    return {};
                }
            }
        },
        /**
         * 新建一按钮
         */
        newButton: function (obj) {
            var onClickStr = "";
            if (!JBF.strIsNull(obj.showName)) {
                obj.showName = "默认按钮";
            }
            if (!JBF.strIsNull(obj.icon)) {
                obj.icon = "add";
            }
            if (obj.method) {
                onClickStr = "onclick='" + obj.method + "'";
            }
            var buttonStr = "<input class='JBFButton' type='button' id='" + obj.id + "' value='" + obj.showName
                + "' style=''"
                + " onmouseover='this.style.color = \"#000000\"' "
                + " onmouseout='this.style.color = \"\"' " + onClickStr
                + "/>";
            var basicStr = "<div class='basic-button-panel'"
                + onClickStr
                + " ><div class='basic-button-left'></div><div class='basic-button-middle'><div class='basic-button-text'><a href='javascript:void(0)'>"
                + obj.showName + "</a></div></div><div class='basic-button-right'></div></div>";
            // var buttonStr="<span class='btnLeft' "+onClickStr+"><span
            // class='btnRight'><div class='btnText'><a
            // href='#'>"+obj.showName+"</a></div></span></span>";
            if (typeof (obj.click) == "function") {
                // JBF.onEvent("click",button,obj.click);
            }
            return {
                write: function () {
                    JBF.doc.write(buttonStr);
                },
                append: function () {
                    if (typeof (obj.appendObj) == 'object' && null != obj.appendObj) {
                        // obj.appendObj.innerHTML+= buttonStr;
                        obj.appendObj.innerHTML += buttonStr;
                    }
                },
                value: function (type) {
                    if (type) {
                        if (type == "icon") {
                            return buttonStr;
                        } else if (type == "basic") {
                            return basicStr;
                        }
                    }
                    return buttonStr;
                }
            };
        },
        getButtonsHTML: function (objs, type) {
            var buttonHTML = "";
            if (objs && objs.length > 0) {
                for (var i = 0; i < objs.length; i++) {
                    buttonHTML += JBF.newButton(objs[i]).value(type);
                }
            }
            return buttonHTML;
        },
        getCopyButtonsHTML: function (objs, type) {
            var buttonHTML = "";
            if (objs && objs.length > 0) {
                for (var i = 0; i < objs.length; i++) {
                    if (objs[i].copy) {
                        buttonHTML += JBF.newButton(objs[i]).value(type);
                    }
                }
            }
            return buttonHTML;
        },
        getUrl: function () {
            // var host=window.location.host;
            var workName = window.location.pathname;
            if (workName.length > 0 && workName.substring(0, 1) == "/") {
                workName = workName.substring(1);
            }
            if (workName.indexOf("/") > -1) {
                workName = workName.substring(0, workName.indexOf("/"));
            }
            var url = "/" + workName + "/";
            return url;
        },
        getWorkName: function () {
            var workName = window.location.pathname;
            if (workName) {
                if (workName.substring(0, 1) == "/") {
                    return workName.split("/")[1];
                }
            }
        },
        /**
         * 根据节点名称获取了节点
         */
        getSubNodesByNodeName: function (nodeName, parentNode) {
            var returnNodes = new Array();
            var nodes = new Array();
            JBF.getAllSubNodes(nodes, parentNode);
            if (nodes.length > 0) {
                for (var i = 0; i < nodes.length; i++) {
                    if (nodes[i].nodeName == nodeName) {
                        returnNodes.push(nodes[i]);
                    }
                }
            }
            return returnNodes;
        },
        getParentNodeByClassName: function (className, childNode) {
            var parentNode = childNode.parentNode;
            if (parentNode.nodeName != "BODY") {
                if (parentNode.className == className) {
                    return parentNode;
                } else {
                    return JBF.getParentNodeByClassName(className, parentNode);
                }
            }
            if (parentNode.nodeName == "BODY") {
                return null;
            }
        },
        getParentNodeByNodeName: function (nodeName, childNode) {
            var parentNode = childNode.parentNode;
            if (parentNode.nodeName != "BODY") {
                if (parentNode.nodeName == nodeName) {
                    return parentNode;
                } else {
                    return JBF.getParentNodeByNodeName(nodeName, parentNode);
                }
            }
            if (parentNode.nodeName == "BODY") {
                return null;
            }
        },
        getAllSubNodes: function (childs, parentNode) {
            if (parentNode && parentNode.childNodes.length > 0) {
                for (var i = 0; i < parentNode.childNodes.length; i++) {
                    var subNode = parentNode.childNodes[i];
                    childs.push(subNode);
                    if (document.all) {
                        JBF.getAllSubNodes(childs, subNode);
                    }
                }
            }
        },
        initDatas: function (msg) {
            var columns = new Array();
            var groups = new Array;
            var maps = msg["viewDefMap"];
            if (maps) {
                if (maps.viewGroups) {
                    for (var i = 0; i < maps.viewGroups.length; i++) {// 分组信息
                        var group = maps.viewGroups[i];
                        var groupName = group["name"];
                        var isShrink = group["isShrink"];
                        var groupSpans = new Array();
                        for (var j = 0; j < group.viewItems.length; j++) {// 每组下的视图信息（columns）
                            var viewItem = group.viewItems[j];
                            if (maps.viewMode != 0) {
                                viewItem.display = viewItem.showName;
                            }
                            columns.push(viewItem);
                            if (viewItem.type == "option" || viewItem.type == "radio" || viewItem.type == "check") {
                                // viewItem.value=JBF.strToObj(viewItem.value);
                                viewItem.options = JBF.strToObj(viewItem.value);
                                // alert("1111111viewItem.options"+viewItem.options);
                            }
                            groupSpans.push(viewItem.name);
                        }
                        groups.push({
                            "groupName": groupName,
                            "spans": groupSpans,
                            "type": "column",
                            "isShrink": isShrink
                        });
                    }
                    maps.viewGroups = null;
                    if (maps.viewMode == "0" || groups.length > 1) {
                        maps.groups = groups;
                        maps.datas = columns;
                    } else {
                        maps.columns = columns;
                    }
                }
            }
            return maps;
        },
        createAjaxDivAndShow: function () {
            var div = JBF.el("ajaxFlushLoadingImage");
            if (div) {
                if (div.style.display && div.style.display == "none") {
                    div.style.display = "inline";
                }
            } else {
                var divPanel = document.createElement("div");
                divPanel.setAttribute("id", "ajaxFlushLoadingImage");
                divPanel.className = "ajaxLoading";
                divPanel.style.display = "inline";
                var divHeight = JBF.getScreenHeight();
                var innerHTML = "<div style='margin:auto;width:64px;margin-top:" + (divHeight / 2 - 64)
                    + "px;'><img width='64px' height='64px' src='" + JBF.getUrl()
                    + "JBFCommon/css/loading.gif' />载入数据.....</div>";
                divPanel.style.height = divHeight;
                divPanel.innerHTML = innerHTML;
                document.body.appendChild(divPanel);
            }
        },
        hideAjaxDiv: function () {
            var div = JBF.el("ajaxFlushLoadingImage");
            if (div) {
                div.style.display = "none";
            }
        },
        ajaxFlush: function () {
        },
        /*
		 * url请求的url params参数对像 fun回调方法 exceptionFun异常回调方法
		 * ajaxStatus:同步异步状态,true:异步，false:同步
		 */
        ajax: function (url, params, fun, exceptionFun, ajaxStatus) {
            var paramStr = params;
            if (typeof (params) == "object") {
                paramStr = JBF.toUrlString(params);
                paramStr = paramStr.substring(1);
            }
            if (!(url.indexOf(G_WebRoot) > -1)) {
                url = G_WebRoot + url;
            }
            if (typeof (ajaxStatus) == "BOOLEAR") {
                if (ajaxStatus) {
                    JBF.ajaxAsynchronism(url, params, fun, exceptionFun);
                } else {
                    this.ajaxSynchronous(url, paramStr, fun, exceptionFun);
                }
            } else {
                this.ajaxSynchronous(url, paramStr, fun, exceptionFun);
            }
        },
        /**
         * 数据异步请求
         *
         * @param url
         * @param params
         * @param fun
         * @param exceptionFun
         * @returns
         */
        ajaxAsynchronism: function (url, params, fun, exceptionFun) {
            JBF.createAjaxDivAndShow();
            var msg = null;
            try {
                JBF.retrieveSynURL(url, params, true, function (req) {// 异步
                    msg = JBF.strToObj(req.responseText);
                    req = null;
                    JBF.ajaxCallFun(msg, fun, exceptionFun);
                });
            } catch (e) {
            } finally {
                JBF.hideAjaxDiv();
            }

        },
        /**
         * 数据同步操作
         *
         * @param url
         * @param params
         * @param fun
         * @param exceptionFun
         * @returns
         */
        ajaxSynchronous: function (url, params, fun, exceptionFun) {
            var msg = null;
            JBF.retrieveSynURL(url, params, false, function (req) {// false:同步
                msg = JBF.strToObj(req.responseText);
                req = null;
            });
            this.ajaxCallFun(msg, fun, exceptionFun);
        },
        ajaxCallFun: function (msg, fun, exceptionFun) {
            if (msg && msg.errorMessage) {
                if (msg.code == "10000") {
                    window.top.location.href = (G_WebRoot + "index.html");
                } else if (msg.code == "20000") {
                    alert(msg.errorMessage);
                    try {
                        if (exceptionFun) {
                            if (typeof (exceptionFun) == "function") {
                                exceptionFun();
                            } else if (typeof (exceptionFun) == "string") {
                                eval(exceptionFun + "()");
                            }
                        }
                    } catch (e) {
                        alert("回调方法格式错误");
                    }
                } else {
                    alert(msg.errorMessage);
                }
                return;
            } else if (fun && typeof fun == "function") {
                fun(msg);
            } else if (msg.successMessage) {
                alert(msg.successMessage);
            } else {
                alert(msg.message);
            }
            msg = null;
        },
        retrieveSynURL: function (url, data, callStatus, callFun) {

            if (window.ActiveXObject) {
                req = new ActiveXObject("Microsoft.XMLHTTP");
            } else if (window.XMLHttpRequest) {
                req = new XMLHttpRequest();
            }
            if (req) {
                try {
                    req.open("POST", url, callStatus);// 现在是同步操作(false=同步
                    // true=异步)
                    req.onreadystatechange = JBF.doHttpReadyStateChange(req, callFun);
                    req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    req.setRequestHeader("X-Requested-With", "ajax-request");
                    ;
                    req.send(data);
                } catch (e) {
                    if (window.location.href.indexOf("test") != -1 && url[1] != ':' && url[2] != ':'
                        && url.indexOf("file:") != 0) {// 测试代码不提醒
                        alert("Problem Communicating with Server\n" + e);
                    }
                }
            }
        },
        doHttpReadyStateChange: function (req, callFun) {
            return function () {
                if (req.readyState == 4) {
                    if (req.status == "200") {
                        callFun(req);
                    } else if (req.status == "404") {
                        alert("url重定向错误,服务可能已关闭！ \\n错误url");
                    } else if (req.status == "500") {
                        alert("系统内部错误");
                    }
                }
            };
        },
        to16: function (value) {
            var ten = parseInt(value / 16);
            var ge = value % 16;
            return JBF.conver16(ten) + "" + JBF.conver16(ge);
        },
        conver16: function (value) {
            switch (value - 10) {
                case 0:
                    return "A";
                case 1:
                    return "B";
                case 2:
                    return "C";
                case 3:
                    return "D";
                case 4:
                    return "E";
                case 5:
                    return "F";
                default:
                    return value;
            }
        },

        lastIndexStr: function (str, lastChar) {
            while (str.indexOf(lastChar) > -1) {
                str = str.substring(str.indexOf(lastChar) + 1);
            }
            return str;
        },
        getFileName: function (str) {
            var fileName = JBF.lastIndexStr(str, "/");
            return fileName.substring(fileName, fileName.indexOf("."));
        },
        getCookieByName: function () {
            var cookieStr = document.cookie;
            var name = JBF.getFileName(window.location.pathname);
            if (cookieStr.length > 0) {
                var cookies = cookieStr.split(";");
                for (var i = 0; i < cookies.length; i++) {
                    cooks = cookies[i].split("=");
                    var aa = cooks[0].replace(/^\s+|\s+$/g, "");
                    if (aa == name && cooks.length > 1) {
                        return cooks[1];
                    }
                }
            }
        },
        /**
         * 以天为单位
         *
         * @param time
         * @param cookies
         * @returns
         */
        saveCookie: function (cookName, time, cookies) {
            var name = JBF.getFileName(window.location.pathname);
            var date = new Date();
            // 将date设置为10天以后的时间
            date.setTime(date.getTime() + time * 24 * 3600 * 1000);
            // 将userId和userName两个cookie设置为10天后过期
            document.cookie = name + "=" + cookies + ";expires=" + date.toGMTString();
        },
        showColorPanel: function () {
            JBF.closeColorPanel();
            var ev = arguments.callee.caller.arguments[0] || window.event;
            var obj = ev.srcElement || ev.target;
            configColorPanel = new ColorPanel("configColorPanel", obj);
            if (window.colorDiv) {
                window.colorDiv.style.display = "inline";
            } else {
                window.colorDiv = document.createElement("div");
                window.colorDiv.setAttribute("id", "colorPanelDiv1234567890");
                window.colorDiv.style.position = "absolute";
                document.body.appendChild(window.colorDiv);
            }
            window.colorDiv.style.left = JBF.getAbsX(obj) + obj.offsetWidth;
            window.colorDiv.style.top = JBF.getAbsY(obj) - 50;
            window.colorDiv.style.height = "150px";
            window.colorDiv.innerHTML = configColorPanel.show(obj.value);
        },
        closeColorPanel: function () {
            if (window.colorDiv) {
                window.colorDiv.style.display = "none";
                window.event.cancelBubble = true;
            }
        },
        toFormData: function (obj) {
            if (!obj) {
                return "";
            }
            var s = new Array();
            for (var key in obj) {
                var value = obj[key];
                if (value) {
                    if (value.constructor == Array) {

                    } else if (value.constructor == Object) {

                    } else {
                        s.push(key + "=" + encodeURIComponent(value));
                    }
                }
            }
            return s.join("&");
        },
        serialize: function (obj, name) {
            return encodeURI(serialize1(obj, name));

            function serialize1(obj, name) {
                if (obj) {
                    switch (obj.constructor) {
                        case Array:// 类型是数组 返回 name[0]=obj[0]&name[1]=obj[1]&...
                            var s = "";
                            for (var i = 0; i < obj.length; i++) {
                                var subName = name + "[" + i + "]";
                                s = s + serialize1(obj[i], subName);
                            }
                            return s;
                        case Object:// 类型是对象 name.param1=obj.param1&...
                            var s = "";
                            for (var p in obj) {
                                var subName = name + "." + p;
                                s = s + serialize1(obj[p], subName);
                            }
                            return s;
                        default:// 类型是string 返回 name=obj&
                            return "&" + name + "=" + obj;
                    }
                } else {
                    return "";
                }
            }
        },
        /**
         * 获取URL中的参数
         *
         * @param name
         *            参数名称
         * @returns
         */
        getURLParameter: function (name) {
            var search = document.location.search;
            var pattern = new RegExp("[?&]" + name + "\=([^&]+)", "g");
            var matcher = pattern.exec(search);
            var items = null;
            if (null != matcher) {
                try {
                    items = decodeURIComponent(decodeURIComponent(matcher[1]));
                } catch (e) {
                    try {
                        items = decodeURIComponent(matcher[1]);
                    } catch (e) {
                        items = matcher[1];
                    }
                }
            }
            return items;
        },
        // javascript对象转 JSON 数据对象。
        toJSONString: function (txtOrObj) {
            var data = txtOrObj;
            if (typeof data == 'string')
                try {
                    data = eval('(' + data + ')');
                } catch (e) {
                    return "";
                }
            ;
            var draw = new Array();
            // var last=false;
            var isLast = true;

            // var indent=0;
            function notify(name, value, isLast, formObj) {
                if (value && value.constructor == Array) {
                    draw.push((formObj ? ('"' + name + '":') : '') + '[');
                    for (var i = 0; i < value.length; i++)
                        notify(i, value[i], i == value.length - 1, false);
                    draw.push(']' + (isLast ? '' : (',')));
                } else if (value && typeof value == 'object') {
                    draw.push((formObj ? ('"' + name + '":') : '') + '{');
                    var len = 0, i = 0;
                    for (var key in value)
                        len++;
                    for (var key in value)
                        notify(key, value[key], ++i == len, true);
                    draw.push('}' + (isLast ? '' : (',')));
                } else {
                    if (typeof value == 'string')
                        value = '"' + value + '"';
                    draw.push((formObj ? ('"' + name + '":') : '') + value + (isLast ? '' : ','));
                }
                ;
            }
            ;
            notify('', data, isLast, false);
            return draw.join('');
        },
        /**
         * 将对像转换成url参数
         *
         * @param obj1
         * @returns
         */
        toUrlString: function (obj1) {
            var urlStr = "";
            (function (obj, str) {
                if (typeof (obj) == "object") {
                    for (var attName in obj) {
                        var subObj = obj[attName];
                        var prefix = str;
                        if (typeof (subObj) == "object" && subObj.constructor == Array) {
                            for (var i = 0; i < subObj.length; i++) {
                                prefix = str + ("." + attName) + "[" + i + "]";
                                arguments.callee(subObj[i], prefix);
                            }
                        } else if (typeof (subObj) == "object") {
                            prefix += ("." + attName);
                            arguments.callee(subObj, prefix);
                        } else {
                            if (prefix.substring(0, 1) == ".") {
                                prefix = prefix.substring(1);
                            }
                            urlStr += "&" + prefix + "." + attName + "=" + encodeURIComponent(obj[attName]);
                        }
                    }
                }
            })(obj1, "");
            return urlStr;
        },

        setFocusStyle: function (obj, isShowTip, tipText) {
            if (!obj) {
                return;
            }
            var node = this.getParentNodeByNodeName("TD", obj);
            if (obj.getAttribute("parentTable") && obj.getAttribute("parentTable") != "") {
                node = this.getParentNodeByNodeName("TD", this.getParentNodeByNodeName("DIV", obj));
            }
            if (!node) {
                return;
            }
            var preNode = node.previousSibling;
            //preNode.style.backgroundColor = 'skyblue';
            var newObj = obj;
            if (obj.type == "radio") {
                node = this.getParentNodeByNodeName("SPAN", obj);
                addClassName(node, 'focusedInput');//.style.border =  '1px solid #ff0000';
                newObj = node;
            } else {
                addClassName(obj, 'focusedInput');//.style.border = '1px solid #ff0000';
                newObj = obj;
            }
            if (isShowTip && newObj && tipText) {
                JBF.createFocusTip(obj, tipText);
            }
        },
        createFocusTip: function (element, showText) {
            focusTipName = "focusTipInput";
            var tipDiv = JBF.el(focusTipName);
            if (!tipDiv) {
                tipDiv = document.createElement("div");
                tipDiv.setAttribute("name", focusTipName);
                tipDiv.setAttribute("id", focusTipName);
            } else {
                tipDiv.style.display = "inline";
            }
            tipDiv.innerHTML = "<div class='topSpan'></div><div class='contentSpan'><div class='innerSpan'><div class='text'>"
                + showText + "</div></div></div>";
            tipDiv.className = "tipFrame";
            tipDiv.style.left = (JBF.getAbsX(element) + 20) + "px";
            tipDiv.style.top = (JBF.getAbsY(element) + JBF.getObjHeight(element) - JBF.getScrollTop(element)) + "px";
            document.body.appendChild(tipDiv);
        },
        setBlurStyle: function (obj) {
            var node = this.getParentNodeByNodeName("TD", obj);
            if (obj.getAttribute("parentTable") && obj.getAttribute("parentTable") != "") {
                node = this.getParentNodeByNodeName("TD", this.getParentNodeByNodeName("DIV", obj));
            }
            if (!node) {
                return;
            }
            var preNode = node.previousSibling;
            preNode.style.backgroundColor = '';
            if (obj.type == "radio") {
                node = this.getParentNodeByNodeName("SPAN", obj);
                removeClassName(node, "focusedInput");//.style.border = '1px solid #9cb3e2';
            } else {
                removeClassName(obj, "focusedInput");//.style.border = '1px solid #9cb3e2';
            }
            var tipDiv = JBF.el("focusTipInput");
            if (tipDiv) {
                tipDiv.style.display = "none";
            }
        },

        /**
         * 文本域长度限制 el 文本域对象 len 最长输入数字
         */
        limitTextareaLength: function (el, len) {
            if (el && el.value) {
                var maxLength = el.value.replace(/[^\x00-\xff]/g, 'AA').length;
                if (maxLength > len) {
                    el.value = el.value.substring(0, len);
                }
            }
        },
        getLodop: function (oOBJECT, oEMBED) {
            /*******************************************************************
             * 本函数根据浏览器类型决定采用哪个对象作为控件实例： IE系列、IE内核系列的浏览器采用oOBJECT，
             * 其它浏览器(Firefox系列、Chrome系列、Opera系列、Safari系列等)采用oEMBED。
             ******************************************************************/
            var strHtml1 = "<br><font color='#FF00FF'>打印控件未安装!点击这里<a href='" + G_WebRoot
                + "JBFCommon/lodop/install_lodop.exe'>执行安装</a>,安装后请刷新页面或重新进入。</font>";
            var strHtml2 = "<br><font color='#FF00FF'>打印控件需要升级!点击这里<a href='" + G_WebRoot
                + "JBFCommon/lodop/install_lodop.exe'>执行升级</a>,升级后请重新进入。</font>";
            var strHtml3 = "<br><br><font color='#FF00FF'>(注：如曾安装过Lodop旧版附件npActiveXPLugin,请在【工具】->【附加组件】->【扩展】中先卸载它)</font>";
            var LODOP = oEMBED;
            try {
                if (navigator.appVersion.indexOf("MSIE") >= 0)
                    LODOP = oOBJECT;

                if ((LODOP == null) || (typeof (LODOP.VERSION) == "undefined")) {
                    if (navigator.userAgent.indexOf('Firefox') >= 0)
                        document.documentElement.innerHTML = strHtml3 + document.documentElement.innerHTML;
                    if (navigator.appVersion.indexOf("MSIE") >= 0)
                        document.write(strHtml1);
                    else
                        document.documentElement.innerHTML = strHtml1 + document.documentElement.innerHTML;
                } else if (LODOP.VERSION < "6.0.1.5") {
                    if (navigator.appVersion.indexOf("MSIE") >= 0)
                        document.write(strHtml2);
                    else
                        document.documentElement.innerHTML = strHtml2 + document.documentElement.innerHTML;
                }
                // *****如下空白位置适合调用统一功能:*********

                LODOP.SET_LICENSES("京北方科技股份有限公司", "048576668687089907689190562356", "", "");

                // *******************************************
                return LODOP;
            } catch (err) {
                document.documentElement.innerHTML = "Error:" + strHtml1 + document.documentElement.innerHTML;
                return LODOP;
            }
        },

        isLodopInstalled: function () { // 判断系统是否安装打印控件
            try {
                var LODOP = JBF.getLodop(document.getElementById('LODOP'), document.getElementById('LODOP_EM'));
                if ((LODOP != null) && (typeof (LODOP.VERSION) != "undefined"))
                    alert("本机已成功安装过Lodop控件!");
            } catch (err) {
                alert("Error:本机未安装!");
            }
        },
        selectPrinter: function () {// 选择打印机
            var LODOP = JBF.getLodop(document.getElementById('LODOP'), document.getElementById('LODOP_EM'));
            LODOP.SELECT_PRINTER();
        },

        downLoadPrintOcx: function () {// 下载安装打印程序
            location.href = G_WebRoot + "JBFCommon/lodop/install_lodop.exe";
        },
        toExcel: function (divName, fileName) {
            var div = document.getElementById(divName);
            if (!div) {
                alert(divName + "不存在");
                return false;
            }
            var LODOP = JBF.getLodop(document.getElementById('LODOP'), document.getElementById('LODOP_EM'));
            LODOP.PRINT_INIT("");
            LODOP.ADD_PRINT_TABLE(100, 20, 500, 60, div.innerHTML);
            // LODOP.SET_SAVE_MODE("QUICK_SAVE",true);//快速生成（无表格样式,数据量较大时或许用到）
            LODOP.SAVE_TO_FILE(fileName);
        },

        bubble: function (message, left, top) {
            bubble({
                html: message,
                life: 10000,
                left: left,
                top: top,
                img: G_WebRoot + "JBFCommon/js/bubble/bubble.png"
            });

        },
        openWinByUrl: function (url, width, height, isScroll) {
            var scroll = "";
            if (!isScroll) {
                scroll = "scroll=no; ";
            }
            var openWinStyle = " status=no;" + scroll + "resizable=no;";// 用于简单的增删改查操作
            var defaultStyle = "";
            if (width && height) {
                defaultStyle = "dialogWidth=" + width + "px;dialogHeight=" + height + "px";
            } else {
                defaultStyle = "dialogWidth=" + (window.screen.availWidth) + "px;dialogHeight="
                    + (window.screen.availHeight) + "px";
            }
            // window.open(url);
            var returnValue = window.showModalDialog(url, window, defaultStyle + openWinStyle);
            return returnValue;
        }
    };

})();

JBF.G_WebRoot = '/'
    + (window.location.pathname.indexOf('/') == 0 ? window.location.pathname.split('/')[1]
        : window.location.pathname.split('/')[0]) + '/';

function Enum() {

}

Enum.prototype.values = function () {
    return this.vs;
};
Enum.prototype.getNameByKey = function (code) {
    var vs = this.values();
    for (var i = 0; i < vs.length; i++) {
        if (vs[i].getCode() == code) {
            return vs[i].getName();
        }
    }
    return "未知";
};

function EnumItem(code, name) {

    this.code = code;
    this.name = name;
    this.value = code;
    this.id = code;
    this.showText = name;
}

EnumItem.prototype.getCode = function () {
    return this.code;
};
EnumItem.prototype.getName = function () {
    return this.name;
};

var Enums = (function () {
    return {
        transferEnumToOptions: function (enumObj, addNullOption, defaultValue) {
            enumObj = enumObj.vs;
            var options = new Array;
            var seq = 0;
            if (addNullOption) {
                options[0] = {};
                options[0].showText = "";
                options[0].value = "";
                seq = 1;
            }
            if (enumObj && enumObj.length) {
                for (var i = 0; i < enumObj.length; i++) {
                    options[i + seq] = {};
                    options[i + seq].showText = enumObj[i].getCode() + "-" + enumObj[i].getName();
                    options[i + seq].value = enumObj[i].getCode();
                    if (defaultValue && defaultValue == options[i + seq].value) {
                        options[i + seq].checked = 'true';
                    }
                }
            }
            return options;
        },
        transferEnumToJson: function (enumObj) {
            enumObj = enumObj.vs;
            var options = new Array;
            if (enumObj && enumObj.length) {
                for (var i = 0; i < enumObj.length; i++) {
                    options[i] = {};
                    options[i].showText = enumObj[i].getCode() + "-" + enumObj[i].getName();
                    options[i].value = enumObj[i].getCode();
                }
            }
            return options;
        }

    };
})();

function isFunction(x) {
    return Object.prototype.toString.call(x) == '[object Function]';
}

function readFile(filename) {
    var fso = new ActiveXObject("Scripting.FileSystemObject");
    var f = fso.OpenTextFile(filename, 1);
    var s = "";
    while (!f.AtEndOfStream)
        s += f.ReadLine() + "\n";
    f.Close();
    return s;
}

// 写文件
function writeFile(filename, filecontent) {
    var fso, f, s;
    fso = new ActiveXObject("Scripting.FileSystemObject");
    f = fso.OpenTextFile(filename, 8, true);
    f.WriteLine(filecontent);
    f.Close();
}

if (!window.showModalDialog) {
    window.showModalDialog = function (url, arg, option) {
        var newWin = window.open(url);
        if (newWin) {
            newWin.dialogArguments = arg;
        }
    };
}

/** 工具栏及查询块* */
var defaultFormButtons = {
    datas: [{
        showName: JBF.language.query,
        icon: 'search',
        method: "table.query()"
    }, {
        showName: JBF.language.add,
        icon: 'add',
        method: "table.add()"
    }, {
        showName: JBF.language.del,
        icon: 'delete',
        method: "table.del()"
    }, {
        showName: JBF.language.modify,
        icon: 'modify',
        method: "table.modify()"
    }, {
        showName: JBF.language.detail,
        icon: 'detail',
        method: "table.view()"
    }, {
        showName: 'Excel',
        icon: 'detail',
        method: "table.toExcel()"
    }]
};

var defaultTableButtons = defaultFormButtons;
//! moment.js
//! version : 2.2.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function (a) {
    function b(a, b) {
        return function (c) {
            return i(a.call(this, c), b)
        }
    }

    function c(a, b) {
        return function (c) {
            return this.lang().ordinal(a.call(this, c), b)
        }
    }

    function d() {
    }

    function e(a) {
        g(this, a)
    }

    function f(a) {
        var b = a.years || a.year || a.y || 0, c = a.months || a.month || a.M || 0, d = a.weeks || a.week || a.w || 0,
            e = a.days || a.day || a.d || 0, f = a.hours || a.hour || a.h || 0, g = a.minutes || a.minute || a.m || 0,
            h = a.seconds || a.second || a.s || 0, i = a.milliseconds || a.millisecond || a.ms || 0;
        this._input = a, this._milliseconds = +i + 1e3 * h + 6e4 * g + 36e5 * f, this._days = +e + 7 * d, this._months = +c + 12 * b, this._data = {}, this._bubble()
    }

    function g(a, b) {
        for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c]);
        return a
    }

    function h(a) {
        return 0 > a ? Math.ceil(a) : Math.floor(a)
    }

    function i(a, b) {
        for (var c = a + ""; c.length < b;) c = "0" + c;
        return c
    }

    function j(a, b, c, d) {
        var e, f, g = b._milliseconds, h = b._days, i = b._months;
        g && a._d.setTime(+a._d + g * c), (h || i) && (e = a.minute(), f = a.hour()), h && a.date(a.date() + h * c), i && a.month(a.month() + i * c), g && !d && L.updateOffset(a), (h || i) && (a.minute(e), a.hour(f))
    }

    function k(a) {
        return "[object Array]" === Object.prototype.toString.call(a)
    }

    function l(a, b) {
        var c, d = Math.min(a.length, b.length), e = Math.abs(a.length - b.length), f = 0;
        for (c = 0; d > c; c++) ~~a[c] !== ~~b[c] && f++;
        return f + e
    }

    function m(a) {
        return a ? ib[a] || a.toLowerCase().replace(/(.)s$/, "$1") : a
    }

    function n(a, b) {
        return b.abbr = a, P[a] || (P[a] = new d), P[a].set(b), P[a]
    }

    function o(a) {
        delete P[a]
    }

    function p(a) {
        if (!a) return L.fn._lang;
        if (!P[a] && Q) try {
            require("./lang/" + a)
        } catch (b) {
            return L.fn._lang
        }
        return P[a] || L.fn._lang
    }

    function q(a) {
        return a.match(/\[.*\]/) ? a.replace(/^\[|\]$/g, "") : a.replace(/\\/g, "")
    }

    function r(a) {
        var b, c, d = a.match(T);
        for (b = 0, c = d.length; c > b; b++) d[b] = mb[d[b]] ? mb[d[b]] : q(d[b]);
        return function (e) {
            var f = "";
            for (b = 0; c > b; b++) f += d[b] instanceof Function ? d[b].call(e, a) : d[b];
            return f
        }
    }

    function s(a, b) {
        return b = t(b, a.lang()), jb[b] || (jb[b] = r(b)), jb[b](a)
    }

    function t(a, b) {
        function c(a) {
            return b.longDateFormat(a) || a
        }

        for (var d = 5; d-- && (U.lastIndex = 0, U.test(a));) a = a.replace(U, c);
        return a
    }

    function u(a, b) {
        switch (a) {
            case"DDDD":
                return X;
            case"YYYY":
                return Y;
            case"YYYYY":
                return Z;
            case"S":
            case"SS":
            case"SSS":
            case"DDD":
                return W;
            case"MMM":
            case"MMMM":
            case"dd":
            case"ddd":
            case"dddd":
                return $;
            case"a":
            case"A":
                return p(b._l)._meridiemParse;
            case"X":
                return bb;
            case"Z":
            case"ZZ":
                return _;
            case"T":
                return ab;
            case"MM":
            case"DD":
            case"YY":
            case"HH":
            case"hh":
            case"mm":
            case"ss":
            case"M":
            case"D":
            case"d":
            case"H":
            case"h":
            case"m":
            case"s":
                return V;
            default:
                return new RegExp(a.replace("\\", ""))
        }
    }

    function v(a) {
        var b = (_.exec(a) || [])[0], c = (b + "").match(fb) || ["-", 0, 0], d = +(60 * c[1]) + ~~c[2];
        return "+" === c[0] ? -d : d
    }

    function w(a, b, c) {
        var d, e = c._a;
        switch (a) {
            case"M":
            case"MM":
                null != b && (e[1] = ~~b - 1);
                break;
            case"MMM":
            case"MMMM":
                d = p(c._l).monthsParse(b), null != d ? e[1] = d : c._isValid = !1;
                break;
            case"D":
            case"DD":
                null != b && (e[2] = ~~b);
                break;
            case"DDD":
            case"DDDD":
                null != b && (e[1] = 0, e[2] = ~~b);
                break;
            case"YY":
                e[0] = ~~b + (~~b > 68 ? 1900 : 2e3);
                break;
            case"YYYY":
            case"YYYYY":
                e[0] = ~~b;
                break;
            case"a":
            case"A":
                c._isPm = p(c._l).isPM(b);
                break;
            case"H":
            case"HH":
            case"h":
            case"hh":
                e[3] = ~~b;
                break;
            case"m":
            case"mm":
                e[4] = ~~b;
                break;
            case"s":
            case"ss":
                e[5] = ~~b;
                break;
            case"S":
            case"SS":
            case"SSS":
                e[6] = ~~(1e3 * ("0." + b));
                break;
            case"X":
                c._d = new Date(1e3 * parseFloat(b));
                break;
            case"Z":
            case"ZZ":
                c._useUTC = !0, c._tzm = v(b)
        }
        null == b && (c._isValid = !1)
    }

    function x(a) {
        var b, c, d, e = [];
        if (!a._d) {
            for (d = z(a), b = 0; 3 > b && null == a._a[b]; ++b) a._a[b] = e[b] = d[b];
            for (; 7 > b; b++) a._a[b] = e[b] = null == a._a[b] ? 2 === b ? 1 : 0 : a._a[b];
            e[3] += ~~((a._tzm || 0) / 60), e[4] += ~~((a._tzm || 0) % 60), c = new Date(0), a._useUTC ? (c.setUTCFullYear(e[0], e[1], e[2]), c.setUTCHours(e[3], e[4], e[5], e[6])) : (c.setFullYear(e[0], e[1], e[2]), c.setHours(e[3], e[4], e[5], e[6])), a._d = c
        }
    }

    function y(a) {
        var b = a._i;
        a._d || (a._a = [b.years || b.year || b.y, b.months || b.month || b.M, b.days || b.day || b.d, b.hours || b.hour || b.h, b.minutes || b.minute || b.m, b.seconds || b.second || b.s, b.milliseconds || b.millisecond || b.ms], x(a))
    }

    function z(a) {
        var b = new Date;
        return a._useUTC ? [b.getUTCFullYear(), b.getUTCMonth(), b.getUTCDate()] : [b.getFullYear(), b.getMonth(), b.getDate()]
    }

    function A(a) {
        var b, c, d, e = p(a._l), f = "" + a._i;
        for (d = t(a._f, e).match(T), a._a = [], b = 0; b < d.length; b++) c = (u(d[b], a).exec(f) || [])[0], c && (f = f.slice(f.indexOf(c) + c.length)), mb[d[b]] && w(d[b], c, a);
        f && (a._il = f), a._isPm && a._a[3] < 12 && (a._a[3] += 12), a._isPm === !1 && 12 === a._a[3] && (a._a[3] = 0), x(a)
    }

    function B(a) {
        var b, c, d, f, h, i = 99;
        for (f = 0; f < a._f.length; f++) b = g({}, a), b._f = a._f[f], A(b), c = new e(b), h = l(b._a, c.toArray()), c._il && (h += c._il.length), i > h && (i = h, d = c);
        g(a, d)
    }

    function C(a) {
        var b, c = a._i, d = cb.exec(c);
        if (d) {
            for (a._f = "YYYY-MM-DD" + (d[2] || " "), b = 0; 4 > b; b++) if (eb[b][1].exec(c)) {
                a._f += eb[b][0];
                break
            }
            _.exec(c) && (a._f += " Z"), A(a)
        } else a._d = new Date(c)
    }

    function D(b) {
        var c = b._i, d = R.exec(c);
        c === a ? b._d = new Date : d ? b._d = new Date(+d[1]) : "string" == typeof c ? C(b) : k(c) ? (b._a = c.slice(0), x(b)) : c instanceof Date ? b._d = new Date(+c) : "object" == typeof c ? y(b) : b._d = new Date(c)
    }

    function E(a, b, c, d, e) {
        return e.relativeTime(b || 1, !!c, a, d)
    }

    function F(a, b, c) {
        var d = O(Math.abs(a) / 1e3), e = O(d / 60), f = O(e / 60), g = O(f / 24), h = O(g / 365),
            i = 45 > d && ["s", d] || 1 === e && ["m"] || 45 > e && ["mm", e] || 1 === f && ["h"] || 22 > f && ["hh", f] || 1 === g && ["d"] || 25 >= g && ["dd", g] || 45 >= g && ["M"] || 345 > g && ["MM", O(g / 30)] || 1 === h && ["y"] || ["yy", h];
        return i[2] = b, i[3] = a > 0, i[4] = c, E.apply({}, i)
    }

    function G(a, b, c) {
        var d, e = c - b, f = c - a.day();
        return f > e && (f -= 7), e - 7 > f && (f += 7), d = L(a).add("d", f), {
            week: Math.ceil(d.dayOfYear() / 7),
            year: d.year()
        }
    }

    function H(a) {
        var b = a._i, c = a._f;
        return null === b || "" === b ? null : ("string" == typeof b && (a._i = b = p().preparse(b)), L.isMoment(b) ? (a = g({}, b), a._d = new Date(+b._d)) : c ? k(c) ? B(a) : A(a) : D(a), new e(a))
    }

    function I(a, b) {
        L.fn[a] = L.fn[a + "s"] = function (a) {
            var c = this._isUTC ? "UTC" : "";
            return null != a ? (this._d["set" + c + b](a), L.updateOffset(this), this) : this._d["get" + c + b]()
        }
    }

    function J(a) {
        L.duration.fn[a] = function () {
            return this._data[a]
        }
    }

    function K(a, b) {
        L.duration.fn["as" + a] = function () {
            return +this / b
        }
    }

    for (var L, M, N = "2.2.1", O = Math.round, P = {}, Q = "undefined" != typeof module && module.exports, R = /^\/?Date\((\-?\d+)/i, S = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)\:(\d+)\.?(\d{3})?/, T = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g, U = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g, V = /\d\d?/, W = /\d{1,3}/, X = /\d{3}/, Y = /\d{1,4}/, Z = /[+\-]?\d{1,6}/, $ = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, _ = /Z|[\+\-]\d\d:?\d\d/i, ab = /T/i, bb = /[\+\-]?\d+(\.\d{1,3})?/, cb = /^\s*\d{4}-\d\d-\d\d((T| )(\d\d(:\d\d(:\d\d(\.\d\d?\d?)?)?)?)?([\+\-]\d\d:?\d\d)?)?/, db = "YYYY-MM-DDTHH:mm:ssZ", eb = [["HH:mm:ss.S", /(T| )\d\d:\d\d:\d\d\.\d{1,3}/], ["HH:mm:ss", /(T| )\d\d:\d\d:\d\d/], ["HH:mm", /(T| )\d\d:\d\d/], ["HH", /(T| )\d\d/]], fb = /([\+\-]|\d\d)/gi, gb = "Date|Hours|Minutes|Seconds|Milliseconds".split("|"), hb = {
        Milliseconds: 1,
        Seconds: 1e3,
        Minutes: 6e4,
        Hours: 36e5,
        Days: 864e5,
        Months: 2592e6,
        Years: 31536e6
    }, ib = {
        ms: "millisecond",
        s: "second",
        m: "minute",
        h: "hour",
        d: "day",
        w: "week",
        W: "isoweek",
        M: "month",
        y: "year"
    }, jb = {}, kb = "DDD w W M D d".split(" "), lb = "M D H h m s w W".split(" "), mb = {
        M: function () {
            return this.month() + 1
        }, MMM: function (a) {
            return this.lang().monthsShort(this, a)
        }, MMMM: function (a) {
            return this.lang().months(this, a)
        }, D: function () {
            return this.date()
        }, DDD: function () {
            return this.dayOfYear()
        }, d: function () {
            return this.day()
        }, dd: function (a) {
            return this.lang().weekdaysMin(this, a)
        }, ddd: function (a) {
            return this.lang().weekdaysShort(this, a)
        }, dddd: function (a) {
            return this.lang().weekdays(this, a)
        }, w: function () {
            return this.week()
        }, W: function () {
            return this.isoWeek()
        }, YY: function () {
            return i(this.year() % 100, 2)
        }, YYYY: function () {
            return i(this.year(), 4)
        }, YYYYY: function () {
            return i(this.year(), 5)
        }, gg: function () {
            return i(this.weekYear() % 100, 2)
        }, gggg: function () {
            return this.weekYear()
        }, ggggg: function () {
            return i(this.weekYear(), 5)
        }, GG: function () {
            return i(this.isoWeekYear() % 100, 2)
        }, GGGG: function () {
            return this.isoWeekYear()
        }, GGGGG: function () {
            return i(this.isoWeekYear(), 5)
        }, e: function () {
            return this.weekday()
        }, E: function () {
            return this.isoWeekday()
        }, a: function () {
            return this.lang().meridiem(this.hours(), this.minutes(), !0)
        }, A: function () {
            return this.lang().meridiem(this.hours(), this.minutes(), !1)
        }, H: function () {
            return this.hours()
        }, h: function () {
            return this.hours() % 12 || 12
        }, m: function () {
            return this.minutes()
        }, s: function () {
            return this.seconds()
        }, S: function () {
            return ~~(this.milliseconds() / 100)
        }, SS: function () {
            return i(~~(this.milliseconds() / 10), 2)
        }, SSS: function () {
            return i(this.milliseconds(), 3)
        }, Z: function () {
            var a = -this.zone(), b = "+";
            return 0 > a && (a = -a, b = "-"), b + i(~~(a / 60), 2) + ":" + i(~~a % 60, 2)
        }, ZZ: function () {
            var a = -this.zone(), b = "+";
            return 0 > a && (a = -a, b = "-"), b + i(~~(10 * a / 6), 4)
        }, z: function () {
            return this.zoneAbbr()
        }, zz: function () {
            return this.zoneName()
        }, X: function () {
            return this.unix()
        }
    }; kb.length;) M = kb.pop(), mb[M + "o"] = c(mb[M], M);
    for (; lb.length;) M = lb.pop(), mb[M + M] = b(mb[M], 2);
    for (mb.DDDD = b(mb.DDD, 3), g(d.prototype, {
        set: function (a) {
            var b, c;
            for (c in a) b = a[c], "function" == typeof b ? this[c] = b : this["_" + c] = b
        },
        _months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        months: function (a) {
            return this._months[a.month()]
        },
        _monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        monthsShort: function (a) {
            return this._monthsShort[a.month()]
        },
        monthsParse: function (a) {
            var b, c, d;
            for (this._monthsParse || (this._monthsParse = []), b = 0; 12 > b; b++) if (this._monthsParse[b] || (c = L.utc([2e3, b]), d = "^" + this.months(c, "") + "|^" + this.monthsShort(c, ""), this._monthsParse[b] = new RegExp(d.replace(".", ""), "i")), this._monthsParse[b].test(a)) return b
        },
        _weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdays: function (a) {
            return this._weekdays[a.day()]
        },
        _weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysShort: function (a) {
            return this._weekdaysShort[a.day()]
        },
        _weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        weekdaysMin: function (a) {
            return this._weekdaysMin[a.day()]
        },
        weekdaysParse: function (a) {
            var b, c, d;
            for (this._weekdaysParse || (this._weekdaysParse = []), b = 0; 7 > b; b++) if (this._weekdaysParse[b] || (c = L([2e3, 1]).day(b), d = "^" + this.weekdays(c, "") + "|^" + this.weekdaysShort(c, "") + "|^" + this.weekdaysMin(c, ""), this._weekdaysParse[b] = new RegExp(d.replace(".", ""), "i")), this._weekdaysParse[b].test(a)) return b
        },
        _longDateFormat: {
            LT: "h:mm A",
            L: "MM/DD/YYYY",
            LL: "MMMM D YYYY",
            LLL: "MMMM D YYYY LT",
            LLLL: "dddd, MMMM D YYYY LT"
        },
        longDateFormat: function (a) {
            var b = this._longDateFormat[a];
            return !b && this._longDateFormat[a.toUpperCase()] && (b = this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (a) {
                return a.slice(1)
            }), this._longDateFormat[a] = b), b
        },
        isPM: function (a) {
            return "p" === (a + "").toLowerCase().charAt(0)
        },
        _meridiemParse: /[ap]\.?m?\.?/i,
        meridiem: function (a, b, c) {
            return a > 11 ? c ? "pm" : "PM" : c ? "am" : "AM"
        },
        _calendar: {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L"
        },
        calendar: function (a, b) {
            var c = this._calendar[a];
            return "function" == typeof c ? c.apply(b) : c
        },
        _relativeTime: {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years"
        },
        relativeTime: function (a, b, c, d) {
            var e = this._relativeTime[c];
            return "function" == typeof e ? e(a, b, c, d) : e.replace(/%d/i, a)
        },
        pastFuture: function (a, b) {
            var c = this._relativeTime[a > 0 ? "future" : "past"];
            return "function" == typeof c ? c(b) : c.replace(/%s/i, b)
        },
        ordinal: function (a) {
            return this._ordinal.replace("%d", a)
        },
        _ordinal: "%d",
        preparse: function (a) {
            return a
        },
        postformat: function (a) {
            return a
        },
        week: function (a) {
            return G(a, this._week.dow, this._week.doy).week
        },
        _week: {dow: 0, doy: 6}
    }), L = function (a, b, c) {
        return H({_i: a, _f: b, _l: c, _isUTC: !1})
    }, L.utc = function (a, b, c) {
        return H({_useUTC: !0, _isUTC: !0, _l: c, _i: a, _f: b}).utc()
    }, L.unix = function (a) {
        return L(1e3 * a)
    }, L.duration = function (a, b) {
        var c, d, e = L.isDuration(a), g = "number" == typeof a, h = e ? a._input : g ? {} : a, i = S.exec(a);
        return g ? b ? h[b] = a : h.milliseconds = a : i && (c = "-" === i[1] ? -1 : 1, h = {
            y: 0,
            d: ~~i[2] * c,
            h: ~~i[3] * c,
            m: ~~i[4] * c,
            s: ~~i[5] * c,
            ms: ~~i[6] * c
        }), d = new f(h), e && a.hasOwnProperty("_lang") && (d._lang = a._lang), d
    }, L.version = N, L.defaultFormat = db, L.updateOffset = function () {
    }, L.lang = function (a, b) {
        return a ? (a = a.toLowerCase(), a = a.replace("_", "-"), b ? n(a, b) : null === b ? (o(a), a = "en") : P[a] || p(a), L.duration.fn._lang = L.fn._lang = p(a), void 0) : L.fn._lang._abbr
    }, L.langData = function (a) {
        return a && a._lang && a._lang._abbr && (a = a._lang._abbr), p(a)
    }, L.isMoment = function (a) {
        return a instanceof e
    }, L.isDuration = function (a) {
        return a instanceof f
    }, g(L.fn = e.prototype, {
        clone: function () {
            return L(this)
        }, valueOf: function () {
            return +this._d + 6e4 * (this._offset || 0)
        }, unix: function () {
            return Math.floor(+this / 1e3)
        }, toString: function () {
            return this.format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")
        }, toDate: function () {
            return this._offset ? new Date(+this) : this._d
        }, toISOString: function () {
            return s(L(this).utc(), "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")
        }, toArray: function () {
            var a = this;
            return [a.year(), a.month(), a.date(), a.hours(), a.minutes(), a.seconds(), a.milliseconds()]
        }, isValid: function () {
            return null == this._isValid && (this._isValid = this._a ? !l(this._a, (this._isUTC ? L.utc(this._a) : L(this._a)).toArray()) : !isNaN(this._d.getTime())), !!this._isValid
        }, invalidAt: function () {
            var a, b = this._a, c = (this._isUTC ? L.utc(this._a) : L(this._a)).toArray();
            for (a = 6; a >= 0 && b[a] === c[a]; --a) ;
            return a
        }, utc: function () {
            return this.zone(0)
        }, local: function () {
            return this.zone(0), this._isUTC = !1, this
        }, format: function (a) {
            var b = s(this, a || L.defaultFormat);
            return this.lang().postformat(b)
        }, add: function (a, b) {
            var c;
            return c = "string" == typeof a ? L.duration(+b, a) : L.duration(a, b), j(this, c, 1), this
        }, subtract: function (a, b) {
            var c;
            return c = "string" == typeof a ? L.duration(+b, a) : L.duration(a, b), j(this, c, -1), this
        }, diff: function (a, b, c) {
            var d, e, f = this._isUTC ? L(a).zone(this._offset || 0) : L(a).local(), g = 6e4 * (this.zone() - f.zone());
            return b = m(b), "year" === b || "month" === b ? (d = 432e5 * (this.daysInMonth() + f.daysInMonth()), e = 12 * (this.year() - f.year()) + (this.month() - f.month()), e += (this - L(this).startOf("month") - (f - L(f).startOf("month"))) / d, e -= 6e4 * (this.zone() - L(this).startOf("month").zone() - (f.zone() - L(f).startOf("month").zone())) / d, "year" === b && (e /= 12)) : (d = this - f, e = "second" === b ? d / 1e3 : "minute" === b ? d / 6e4 : "hour" === b ? d / 36e5 : "day" === b ? (d - g) / 864e5 : "week" === b ? (d - g) / 6048e5 : d), c ? e : h(e)
        }, from: function (a, b) {
            return L.duration(this.diff(a)).lang(this.lang()._abbr).humanize(!b)
        }, fromNow: function (a) {
            return this.from(L(), a)
        }, calendar: function () {
            var a = this.diff(L().zone(this.zone()).startOf("day"), "days", !0),
                b = -6 > a ? "sameElse" : -1 > a ? "lastWeek" : 0 > a ? "lastDay" : 1 > a ? "sameDay" : 2 > a ? "nextDay" : 7 > a ? "nextWeek" : "sameElse";
            return this.format(this.lang().calendar(b, this))
        }, isLeapYear: function () {
            var a = this.year();
            return 0 === a % 4 && 0 !== a % 100 || 0 === a % 400
        }, isDST: function () {
            return this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone()
        }, day: function (a) {
            var b = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            return null != a ? "string" == typeof a && (a = this.lang().weekdaysParse(a), "number" != typeof a) ? this : this.add({d: a - b}) : b
        }, month: function (a) {
            var b, c = this._isUTC ? "UTC" : "";
            return null != a ? "string" == typeof a && (a = this.lang().monthsParse(a), "number" != typeof a) ? this : (b = this.date(), this.date(1), this._d["set" + c + "Month"](a), this.date(Math.min(b, this.daysInMonth())), L.updateOffset(this), this) : this._d["get" + c + "Month"]()
        }, startOf: function (a) {
            switch (a = m(a)) {
                case"year":
                    this.month(0);
                case"month":
                    this.date(1);
                case"week":
                case"isoweek":
                case"day":
                    this.hours(0);
                case"hour":
                    this.minutes(0);
                case"minute":
                    this.seconds(0);
                case"second":
                    this.milliseconds(0)
            }
            return "week" === a ? this.weekday(0) : "isoweek" === a && this.isoWeekday(1), this
        }, endOf: function (a) {
            return a = m(a), this.startOf(a).add("isoweek" === a ? "week" : a, 1).subtract("ms", 1)
        }, isAfter: function (a, b) {
            return b = "undefined" != typeof b ? b : "millisecond", +this.clone().startOf(b) > +L(a).startOf(b)
        }, isBefore: function (a, b) {
            return b = "undefined" != typeof b ? b : "millisecond", +this.clone().startOf(b) < +L(a).startOf(b)
        }, isSame: function (a, b) {
            return b = "undefined" != typeof b ? b : "millisecond", +this.clone().startOf(b) === +L(a).startOf(b)
        }, min: function (a) {
            return a = L.apply(null, arguments), this > a ? this : a
        }, max: function (a) {
            return a = L.apply(null, arguments), a > this ? this : a
        }, zone: function (a) {
            var b = this._offset || 0;
            return null == a ? this._isUTC ? b : this._d.getTimezoneOffset() : ("string" == typeof a && (a = v(a)), Math.abs(a) < 16 && (a = 60 * a), this._offset = a, this._isUTC = !0, b !== a && j(this, L.duration(b - a, "m"), 1, !0), this)
        }, zoneAbbr: function () {
            return this._isUTC ? "UTC" : ""
        }, zoneName: function () {
            return this._isUTC ? "Coordinated Universal Time" : ""
        }, hasAlignedHourOffset: function (a) {
            return a = a ? L(a).zone() : 0, 0 === (this.zone() - a) % 60
        }, daysInMonth: function () {
            return L.utc([this.year(), this.month() + 1, 0]).date()
        }, dayOfYear: function (a) {
            var b = O((L(this).startOf("day") - L(this).startOf("year")) / 864e5) + 1;
            return null == a ? b : this.add("d", a - b)
        }, weekYear: function (a) {
            var b = G(this, this.lang()._week.dow, this.lang()._week.doy).year;
            return null == a ? b : this.add("y", a - b)
        }, isoWeekYear: function (a) {
            var b = G(this, 1, 4).year;
            return null == a ? b : this.add("y", a - b)
        }, week: function (a) {
            var b = this.lang().week(this);
            return null == a ? b : this.add("d", 7 * (a - b))
        }, isoWeek: function (a) {
            var b = G(this, 1, 4).week;
            return null == a ? b : this.add("d", 7 * (a - b))
        }, weekday: function (a) {
            var b = (this._d.getDay() + 7 - this.lang()._week.dow) % 7;
            return null == a ? b : this.add("d", a - b)
        }, isoWeekday: function (a) {
            return null == a ? this.day() || 7 : this.day(this.day() % 7 ? a : a - 7)
        }, get: function (a) {
            return a = m(a), this[a.toLowerCase()]()
        }, set: function (a, b) {
            a = m(a), this[a.toLowerCase()](b)
        }, lang: function (b) {
            return b === a ? this._lang : (this._lang = p(b), this)
        }
    }), M = 0; M < gb.length; M++) I(gb[M].toLowerCase().replace(/s$/, ""), gb[M]);
    I("year", "FullYear"), L.fn.days = L.fn.day, L.fn.months = L.fn.month, L.fn.weeks = L.fn.week, L.fn.isoWeeks = L.fn.isoWeek, L.fn.toJSON = L.fn.toISOString, g(L.duration.fn = f.prototype, {
        _bubble: function () {
            var a, b, c, d, e = this._milliseconds, f = this._days, g = this._months, i = this._data;
            i.milliseconds = e % 1e3, a = h(e / 1e3), i.seconds = a % 60, b = h(a / 60), i.minutes = b % 60, c = h(b / 60), i.hours = c % 24, f += h(c / 24), i.days = f % 30, g += h(f / 30), i.months = g % 12, d = h(g / 12), i.years = d
        }, weeks: function () {
            return h(this.days() / 7)
        }, valueOf: function () {
            return this._milliseconds + 864e5 * this._days + 2592e6 * (this._months % 12) + 31536e6 * ~~(this._months / 12)
        }, humanize: function (a) {
            var b = +this, c = F(b, !a, this.lang());
            return a && (c = this.lang().pastFuture(b, c)), this.lang().postformat(c)
        }, add: function (a, b) {
            var c = L.duration(a, b);
            return this._milliseconds += c._milliseconds, this._days += c._days, this._months += c._months, this._bubble(), this
        }, subtract: function (a, b) {
            var c = L.duration(a, b);
            return this._milliseconds -= c._milliseconds, this._days -= c._days, this._months -= c._months, this._bubble(), this
        }, get: function (a) {
            return a = m(a), this[a.toLowerCase() + "s"]()
        }, as: function (a) {
            return a = m(a), this["as" + a.charAt(0).toUpperCase() + a.slice(1) + "s"]()
        }, lang: L.fn.lang
    });
    for (M in hb) hb.hasOwnProperty(M) && (K(M, hb[M]), J(M.toLowerCase()));
    K("Weeks", 6048e5), L.duration.fn.asMonths = function () {
        return (+this - 31536e6 * this.years()) / 2592e6 + 12 * this.years()
    }, L.lang("en", {
        ordinal: function (a) {
            var b = a % 10, c = 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";
            return a + c
        }
    }), Q && (module.exports = L), "undefined" == typeof ender && (this.moment = L), "function" == typeof define && define.amd && define("moment", [], function () {
        return L
    })
}).call(this);
/*!
 * Pikaday
 *
 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/dbushell/Pikaday
 */

(function (root, factory) {
    'use strict';

    var moment;
    if (typeof exports === 'object') {
        // CommonJS module
        // Load moment.js as an optional dependency
        try {
            moment = require('moment');
        } catch (e) {
        }
        module.exports = factory(moment);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(function (req) {
            // Load moment.js as an optional dependency
            var id = 'moment';
            moment = req.defined && req.defined(id) ? req(id) : undefined;
            return factory(moment);
        });
    } else {
        root.Pikaday = factory(root.moment);
    }
}(this, function (moment) {
    'use strict';

    /**
     * feature detection and helper functions
     */
    var hasMoment = typeof moment === 'function',

        hasEventListeners = !!window.addEventListener,

        document = window.document,

        sto = window.setTimeout,

        addEvent = function (el, e, callback, capture) {
            if (hasEventListeners) {
                el.addEventListener(e, callback, !!capture);
            } else {
                el.attachEvent('on' + e, callback);
            }
        },

        removeEvent = function (el, e, callback, capture) {
            if (hasEventListeners) {
                el.removeEventListener(e, callback, !!capture);
            } else {
                el.detachEvent('on' + e, callback);
            }
        },

        fireEvent = function (el, eventName, data) {
            var ev;

            if (document.createEvent) {
                ev = document.createEvent('HTMLEvents');
                ev.initEvent(eventName, true, false);
                ev = extend(ev, data);
                el.dispatchEvent(ev);
            } else if (document.createEventObject) {
                ev = document.createEventObject();
                ev = extend(ev, data);
                el.fireEvent('on' + eventName, ev);
            }
        },

        trim = function (str) {
            return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
        },

        hasClass = function (el, cn) {
            return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
        },

        addClass = function (el, cn) {
            if (!hasClass(el, cn)) {
                el.className = (el.className === '') ? cn : el.className + ' ' + cn;
            }
        },

        removeClass = function (el, cn) {
            el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
        },

        isArray = function (obj) {
            return (/Array/).test(Object.prototype.toString.call(obj));
        },

        isDate = function (obj) {
            return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
        },

        isLeapYear = function (year) {
            // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        },

        getDaysInMonth = function (year, month) {
            return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
        },

        setToStartOfDay = function (date) {
            if (isDate(date)) date.setHours(0, 0, 0, 0);
        },

        compareDates = function (a, b) {
            // weak date comparison (use setToStartOfDay(date) to ensure correct result)
            return a.getTime() === b.getTime();
        },

        extend = function (to, from, overwrite) {
            var prop, hasProp;
            for (prop in from) {
                hasProp = to[prop] && (to[prop] !== undefined);
                if (hasProp && typeof from[prop] === 'object' && from[prop].nodeName === undefined) {
                    if (isDate(from[prop])) {
                        if (overwrite) {
                            to[prop] = new Date(from[prop].getTime());
                        }
                    } else if (isArray(from[prop])) {
                        if (overwrite) {
                            to[prop] = from[prop].slice(0);
                        }
                    } else {
                        to[prop] = extend({}, from[prop], overwrite);
                    }
                } else if (overwrite || !hasProp) {
                    to[prop] = from[prop];
                }
            }
            return to;
        },

        adjustCalendar = function (calendar) {
            if (calendar.month < 0) {
                calendar.year -= Math.ceil(Math.abs(calendar.month) / 12);
                calendar.month += 12;
            }
            if (calendar.month > 11) {
                calendar.year += Math.floor(Math.abs(calendar.month) / 12);
                calendar.month -= 12;
            }
            return calendar;
        },

        /**
         * defaults and localisation
         */
        defaults = {

            // bind the picker to a form field
            field: null,

            // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
            bound: undefined,

            // position of the datepicker, relative to the field (default to bottom & left)
            // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
            position: 'bottom left',

            // the default output format for `.toString()` and `field` value
            format: 'YYYY-MM-DD',

            // the initial date to view when first opened
            defaultDate: null,

            // make the `defaultDate` the initial selected value
            setDefaultDate: false,

            // first day of week (0: Sunday, 1: Monday etc)
            firstDay: 0,

            // the minimum/earliest date that can be selected
            minDate: null,
            // the maximum/latest date that can be selected
            maxDate: null,

            // number of years either side, or array of upper/lower range
            yearRange: 10,

            // used internally (don't config outside)
            minYear: 0,
            maxYear: 9999,
            minMonth: undefined,
            maxMonth: undefined,

            isRTL: false,

            // Additional text to append to the year in the calendar title
            yearSuffix: '',

            // Render the month after year in the calendar title
            showMonthAfterYear: false,

            // how many months are visible
            numberOfMonths: 1,

            // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
            // only used for the first display or when a selected date is not visible
            mainCalendar: 'left',

            // Specify a DOM element to render the calendar in
            container: undefined,

            // internationalization
            i18n: {
                previousMonth: 'Previous Month',
                nextMonth: 'Next Month',
                months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
            },

            // callback function
            onSelect: null,
            onOpen: null,
            onClose: null,
            onDraw: null
        },


        /**
         * templating functions to abstract HTML rendering
         */
        renderDayName = function (opts, day, abbr) {
            day += opts.firstDay;
            while (day >= 7) {
                day -= 7;
            }
            return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
        },

        renderDay = function (d, m, y, isSelected, isToday, isDisabled, isEmpty) {
            if (isEmpty) {
                return '<td class="is-empty"></td>';
            }
            var arr = [];
            if (isDisabled) {
                arr.push('is-disabled');
            }
            if (isToday) {
                arr.push('is-today');
            }
            if (isSelected) {
                arr.push('is-selected');
            }
            return '<td data-day="' + d + '" class="' + arr.join(' ') + '">' +
                '<button class="pika-button pika-day" type="button" ' +
                'data-pika-year="' + y + '" data-pika-month="' + m + '" data-pika-day="' + d + '">' +
                d +
                '</button>' +
                '</td>';
        },

        renderRow = function (days, isRTL) {
            return '<tr>' + (isRTL ? days.reverse() : days).join('') + '</tr>';
        },

        renderBody = function (rows) {
            return '<tbody>' + rows.join('') + '</tbody>';
        },

        renderHead = function (opts) {
            var i, arr = [];
            for (i = 0; i < 7; i++) {
                arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
            }
            return '<thead>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</thead>';
        },

        renderTitle = function (instance, c, year, month, refYear) {
            var i, j, arr,
                opts = instance._o,
                isMinYear = year === opts.minYear,
                isMaxYear = year === opts.maxYear,
                html = '<div class="pika-title">',
                monthHtml,
                yearHtml,
                prev = true,
                next = true;

            for (arr = [], i = 0; i < 12; i++) {
                arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
                    (i === month ? ' selected' : '') +
                    ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? 'disabled' : '') + '>' +
                    opts.i18n.months[i] + '</option>');
            }
            monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month">' + arr.join('') + '</select></div>';

            if (isArray(opts.yearRange)) {
                i = opts.yearRange[0];
                j = opts.yearRange[1] + 1;
            } else {
                i = year - opts.yearRange;
                j = 1 + year + opts.yearRange;
            }

            for (arr = []; i < j && i <= opts.maxYear; i++) {
                if (i >= opts.minYear) {
                    arr.push('<option value="' + i + '"' + (i === year ? ' selected' : '') + '>' + (i) + '</option>');
                }
            }
            yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year">' + arr.join('') + '</select></div>';

            if (opts.showMonthAfterYear) {
                html += yearHtml + monthHtml;
            } else {
                html += monthHtml + yearHtml;
            }

            if (isMinYear && (month === 0 || opts.minMonth >= month)) {
                prev = false;
            }

            if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
                next = false;
            }

            if (c === 0) {
                html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
            }
            if (c === (instance._o.numberOfMonths - 1)) {
                html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
            }

            return html += '</div>';
        },

        renderTable = function (opts, data) {
            return '<table cellpadding="0" cellspacing="0" class="pika-table">' + renderHead(opts) + renderBody(data) + '</table>';
        },


        /**
         * Pikaday constructor
         */
        Pikaday = function (options) {
            var self = this,
                opts = self.config(options);

            self._onMouseDown = function (e) {
                if (!self._v) {
                    return;
                }
                e = e || window.event;
                var target = e.target || e.srcElement;
                if (!target) {
                    return;
                }

                if (!hasClass(target, 'is-disabled')) {
                    if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty')) {
                        self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
                        if (opts.bound) {
                            sto(function () {
                                self.hide();
                                if (opts.field) {
                                    opts.field.blur();
                                }
                            }, 100);
                        }
                        return;
                    } else if (hasClass(target, 'pika-prev')) {
                        self.prevMonth();
                    } else if (hasClass(target, 'pika-next')) {
                        self.nextMonth();
                    }
                }
                if (!hasClass(target, 'pika-select')) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    } else {
                        e.returnValue = false;
                        return false;
                    }
                } else {
                    self._c = true;
                }
            };

            self._onChange = function (e) {
                e = e || window.event;
                var target = e.target || e.srcElement;
                if (!target) {
                    return;
                }
                if (hasClass(target, 'pika-select-month')) {
                    self.gotoMonth(target.value);
                } else if (hasClass(target, 'pika-select-year')) {
                    self.gotoYear(target.value);
                }
            };

            self._onInputChange = function (e) {
                var date;

                if (e.firedBy === self) {
                    return;
                }
                if (hasMoment) {
                    date = moment(opts.field.value, opts.format);
                    date = (date && date.isValid()) ? date.toDate() : null;
                } else {
                    date = new Date(Date.parse(opts.field.value));
                }
                self.setDate(isDate(date) ? date : null);
                if (!self._v) {
                    self.show();
                }
            };

            self._onInputFocus = function () {
                self.show();
            };

            self._onInputClick = function () {
                self.show();
            };

            self._onInputBlur = function () {
                if (!self._c) {
                    self._b = sto(function () {
                        self.hide();
                    }, 50);
                }
                self._c = false;
            };

            self._onClick = function (e) {
                e = e || window.event;
                var target = e.target || e.srcElement,
                    pEl = target;
                if (!target) {
                    return;
                }
                if (!hasEventListeners && hasClass(target, 'pika-select')) {
                    if (!target.onchange) {
                        target.setAttribute('onchange', 'return;');
                        addEvent(target, 'change', self._onChange);
                    }
                }
                do {
                    if (hasClass(pEl, 'pika-single')) {
                        return;
                    }
                }
                while ((pEl = pEl.parentNode));
                if (self._v && target !== opts.trigger) {
                    self.hide();
                }
            };

            self.el = document.createElement('div');
            self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '');

            addEvent(self.el, 'mousedown', self._onMouseDown, true);
            addEvent(self.el, 'change', self._onChange);

            if (opts.field) {
                if (opts.container) {
                    opts.container.appendChild(self.el);
                } else if (opts.bound) {
                    document.body.appendChild(self.el);
                } else {
                    opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
                }
                addEvent(opts.field, 'change', self._onInputChange);

                if (!opts.defaultDate) {
                    if (hasMoment && opts.field.value) {
                        opts.defaultDate = moment(opts.field.value, opts.format).toDate();
                    } else {
                        opts.defaultDate = new Date(Date.parse(opts.field.value));
                    }
                    opts.setDefaultDate = true;
                }
            }

            var defDate = opts.defaultDate;

            if (isDate(defDate)) {
                if (opts.setDefaultDate) {
                    self.setDate(defDate, true);
                } else {
                    self.gotoDate(defDate);
                }
            } else {
                self.gotoDate(new Date());
            }

            if (opts.bound) {
                this.hide();
                self.el.className += ' is-bound';
                addEvent(opts.trigger, 'click', self._onInputClick);
                addEvent(opts.trigger, 'focus', self._onInputFocus);
                addEvent(opts.trigger, 'blur', self._onInputBlur);
            } else {
                this.show();
            }
        };


    /**
     * public Pikaday API
     */
    Pikaday.prototype = {


        /**
         * configure functionality
         */
        config: function (options) {
            if (!this._o) {
                this._o = extend({}, defaults, true);
            }

            var opts = extend(this._o, options, true);

            opts.isRTL = !!opts.isRTL;

            opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;

            opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

            opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;

            var nom = parseInt(opts.numberOfMonths, 10) || 1;
            opts.numberOfMonths = nom > 4 ? 4 : nom;

            if (!isDate(opts.minDate)) {
                opts.minDate = false;
            }
            if (!isDate(opts.maxDate)) {
                opts.maxDate = false;
            }
            if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
                opts.maxDate = opts.minDate = false;
            }
            if (opts.minDate) {
                setToStartOfDay(opts.minDate);
                opts.minYear = opts.minDate.getFullYear();
                opts.minMonth = opts.minDate.getMonth();
            }
            if (opts.maxDate) {
                setToStartOfDay(opts.maxDate);
                opts.maxYear = opts.maxDate.getFullYear();
                opts.maxMonth = opts.maxDate.getMonth();
            }

            if (isArray(opts.yearRange)) {
                var fallback = new Date().getFullYear() - 10;
                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
                opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
            } else {
                opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
                if (opts.yearRange > 100) {
                    opts.yearRange = 100;
                }
            }

            return opts;
        },

        /**
         * return a formatted string of the current selection (using Moment.js if available)
         */
        toString: function (format) {
            return !isDate(this._d) ? '' : hasMoment ? moment(this._d).format(format || this._o.format) : this._d.toDateString();
        },

        /**
         * return a Moment.js object of the current selection (if available)
         */
        getMoment: function () {
            return hasMoment ? moment(this._d) : null;
        },

        /**
         * set the current selection from a Moment.js object (if available)
         */
        setMoment: function (date, preventOnSelect) {
            if (hasMoment && moment.isMoment(date)) {
                this.setDate(date.toDate(), preventOnSelect);
            }
        },

        /**
         * return a Date object of the current selection
         */
        getDate: function () {
            return isDate(this._d) ? new Date(this._d.getTime()) : null;
        },

        /**
         * set the current selection
         */
        setDate: function (date, preventOnSelect) {
            if (!date) {
                this._d = null;
                return this.draw();
            }
            if (typeof date === 'string') {
                date = new Date(Date.parse(date));
            }
            if (!isDate(date)) {
                return;
            }

            var min = this._o.minDate,
                max = this._o.maxDate;

            if (isDate(min) && date < min) {
                date = min;
            } else if (isDate(max) && date > max) {
                date = max;
            }

            this._d = new Date(date.getTime());
            setToStartOfDay(this._d);
            this.gotoDate(this._d);

            if (this._o.field) {
                this._o.field.value = this.toString();
                fireEvent(this._o.field, 'change', {firedBy: this});
            }
            if (!preventOnSelect && typeof this._o.onSelect === 'function') {
                this._o.onSelect.call(this, this.getDate());
            }
        },

        /**
         * change view to a specific date
         */
        gotoDate: function (date) {
            var newCalendar = true;

            if (!isDate(date)) {
                return;
            }

            if (this.calendars) {
                var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
                    lastVisibleDate = new Date(this.calendars[this.calendars.length - 1].year, this.calendars[this.calendars.length - 1].month, 1),
                    visibleDate = date.getTime();
                // get the end of the month
                lastVisibleDate.setMonth(lastVisibleDate.getMonth() + 1);
                lastVisibleDate.setDate(lastVisibleDate.getDate() - 1);
                newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
            }

            if (newCalendar) {
                this.calendars = [{
                    month: date.getMonth(),
                    year: date.getFullYear()
                }];
                if (this._o.mainCalendar === 'right') {
                    this.calendars[0].month += 1 - this._o.numberOfMonths;
                }
            }

            this.adjustCalendars();
        },

        adjustCalendars: function () {
            this.calendars[0] = adjustCalendar(this.calendars[0]);
            for (var c = 1; c < this._o.numberOfMonths; c++) {
                this.calendars[c] = adjustCalendar({
                    month: this.calendars[0].month + c,
                    year: this.calendars[0].year
                });
            }
            this.draw();
        },

        gotoToday: function () {
            this.gotoDate(new Date());
        },

        /**
         * change view to a specific month (zero-index, e.g. 0: January)
         */
        gotoMonth: function (month) {
            if (!isNaN(month)) {
                this.calendars[0].month = parseInt(month, 10);
                this.adjustCalendars();
            }
        },

        nextMonth: function () {
            this.calendars[0].month++;
            this.adjustCalendars();
        },

        prevMonth: function () {
            this.calendars[0].month--;
            this.adjustCalendars();
        },

        /**
         * change view to a specific full year (e.g. "2012")
         */
        gotoYear: function (year) {
            if (!isNaN(year)) {
                this.calendars[0].year = parseInt(year, 10);
                this.adjustCalendars();
            }
        },

        /**
         * change the minDate
         */
        setMinDate: function (value) {
            this._o.minDate = value;
        },

        /**
         * change the maxDate
         */
        setMaxDate: function (value) {
            this._o.maxDate = value;
        },

        /**
         * refresh the HTML
         */
        draw: function (force) {
            if (!this._v && !force) {
                return;
            }
            var opts = this._o,
                minYear = opts.minYear,
                maxYear = opts.maxYear,
                minMonth = opts.minMonth,
                maxMonth = opts.maxMonth,
                html = '';

            if (this._y <= minYear) {
                this._y = minYear;
                if (!isNaN(minMonth) && this._m < minMonth) {
                    this._m = minMonth;
                }
            }
            if (this._y >= maxYear) {
                this._y = maxYear;
                if (!isNaN(maxMonth) && this._m > maxMonth) {
                    this._m = maxMonth;
                }
            }

            for (var c = 0; c < opts.numberOfMonths; c++) {
                html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year) + this.render(this.calendars[c].year, this.calendars[c].month) + '</div>';
            }

            this.el.innerHTML = html;

            if (opts.bound) {
                if (opts.field.type !== 'hidden') {
                    sto(function () {
                        opts.trigger.focus();
                    }, 1);
                }
            }

            if (typeof this._o.onDraw === 'function') {
                var self = this;
                sto(function () {
                    self._o.onDraw.call(self);
                }, 0);
            }
        },

        adjustPosition: function () {
            if (this._o.container) return;
            var field = this._o.trigger, pEl = field,
                width = this.el.offsetWidth, height = this.el.offsetHeight,
                viewportWidth = window.innerWidth || document.documentElement.clientWidth,
                viewportHeight = window.innerHeight || document.documentElement.clientHeight,
                scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop,
                left, top, clientRect;

            if (typeof field.getBoundingClientRect === 'function') {
                clientRect = field.getBoundingClientRect();
                left = clientRect.left + window.pageXOffset;
                top = clientRect.bottom + window.pageYOffset;
            } else {
                left = pEl.offsetLeft;
                top = pEl.offsetTop + pEl.offsetHeight;
                while ((pEl = pEl.offsetParent)) {
                    left += pEl.offsetLeft;
                    top += pEl.offsetTop;
                }
            }

            // default position is bottom & left
            if (left + width > viewportWidth ||
                (
                    this._o.position.indexOf('right') > -1 &&
                    left - width + field.offsetWidth > 0
                )
            ) {
                left = left - width + field.offsetWidth;
            }
            if (top + height > viewportHeight + scrollTop ||
                (
                    this._o.position.indexOf('top') > -1 &&
                    top - height - field.offsetHeight > 0
                )
            ) {
                top = top - height - field.offsetHeight;
            }
            this.el.style.cssText = [
                'position: absolute',
                'left: ' + left + 'px',
                'top: ' + top + 'px'
            ].join(';');
        },

        /**
         * render HTML for a particular month
         */
        render: function (year, month) {
            var opts = this._o,
                now = new Date(),
                days = getDaysInMonth(year, month),
                before = new Date(year, month, 1).getDay(),
                data = [],
                row = [];
            setToStartOfDay(now);
            if (opts.firstDay > 0) {
                before -= opts.firstDay;
                if (before < 0) {
                    before += 7;
                }
            }
            var cells = days + before,
                after = cells;
            while (after > 7) {
                after -= 7;
            }
            cells += 7 - after;
            for (var i = 0, r = 0; i < cells; i++) {
                var day = new Date(year, month, 1 + (i - before)),
                    isDisabled = (opts.minDate && day < opts.minDate) || (opts.maxDate && day > opts.maxDate),
                    isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
                    isToday = compareDates(day, now),
                    isEmpty = i < before || i >= (days + before);

                row.push(renderDay(1 + (i - before), month, year, isSelected, isToday, isDisabled, isEmpty));

                if (++r === 7) {
                    data.push(renderRow(row, opts.isRTL));
                    row = [];
                    r = 0;
                }
            }
            return renderTable(opts, data);
        },

        isVisible: function () {
            return this._v;
        },

        show: function () {
            if (!this._v) {
                removeClass(this.el, 'is-hidden');
                this._v = true;
                this.draw();
                if (this._o.bound) {
                    addEvent(document, 'click', this._onClick);
                    this.adjustPosition();
                }
                if (typeof this._o.onOpen === 'function') {
                    this._o.onOpen.call(this);
                }
            }
        },

        hide: function () {
            var v = this._v;
            if (v !== false) {
                if (this._o.bound) {
                    removeEvent(document, 'click', this._onClick);
                }
                this.el.style.cssText = '';
                addClass(this.el, 'is-hidden');
                this._v = false;
                if (v !== undefined && typeof this._o.onClose === 'function') {
                    this._o.onClose.call(this);
                }
            }
        },

        /**
         * GAME OVER
         */
        destroy: function () {
            this.hide();
            removeEvent(this.el, 'mousedown', this._onMouseDown, true);
            removeEvent(this.el, 'change', this._onChange);
            if (this._o.field) {
                removeEvent(this._o.field, 'change', this._onInputChange);
                if (this._o.bound) {
                    removeEvent(this._o.trigger, 'click', this._onInputClick);
                    removeEvent(this._o.trigger, 'focus', this._onInputFocus);
                    removeEvent(this._o.trigger, 'blur', this._onInputBlur);
                }
            }
            if (this.el.parentNode) {
                this.el.parentNode.removeChild(this.el);
            }
        }

    };

    return Pikaday;

}));
var KeyTool = {};

//方向键
KeyTool.KEY_PAGEUP = 33;
KeyTool.KEY_PAGEDOWN = 34;
KeyTool.KEY_HOME = 36;
KeyTool.KEY_END = 35;
KeyTool.KEY_LEFT = 37;
KeyTool.KEY_UP = 38;
KeyTool.KEY_RIGHT = 39;
KeyTool.KEY_DOWN = 40;
KeyTool.KEY_DELETE = 46;


//运算符
KeyTool.KEY_ADD = 187;
KeyTool.KEY_SUBTRACT = 189;

//系统
KeyTool.KEY_ESC = 27;
KeyTool.KEY_ENTER = 13;
KeyTool.KEY_BLANK = 32;
KeyTool.KEY_TAB = 9;
KeyTool.KEY_BACK = 8;
KeyTool.KEY_CTRL = 17;
KeyTool.KEY_ALT = 18;
KeyTool.KEY_WIN = 91;

//数字
KeyTool.KEY_1 = 49;
KeyTool.KEY_2 = 50;
KeyTool.KEY_3 = 51;
KeyTool.KEY_4 = 52;
KeyTool.KEY_5 = 53;
KeyTool.KEY_6 = 54;
KeyTool.KEY_7 = 55;
KeyTool.KEY_8 = 56;
KeyTool.KEY_9 = 57;
KeyTool.KEY_0 = 48;

//小键盘
KeyTool.KEY_s1 = 97;
KeyTool.KEY_s2 = 98;
KeyTool.KEY_s3 = 99;
KeyTool.KEY_s4 = 100;
KeyTool.KEY_s5 = 101;
KeyTool.KEY_s6 = 102;
KeyTool.KEY_s7 = 103;
KeyTool.KEY_s8 = 104;
KeyTool.KEY_s9 = 105;
KeyTool.KEY_s0 = 111;
KeyTool.KEY_sPLUS = 109;
KeyTool.KEY_sMINUS = 107;

//功能键
KeyTool.KEY_F1 = 112;
KeyTool.KEY_F2 = 113;
KeyTool.KEY_F3 = 114;
KeyTool.KEY_F4 = 115;
KeyTool.KEY_F5 = 116;
KeyTool.KEY_F6 = 117;
KeyTool.KEY_F7 = 118;
KeyTool.KEY_F8 = 119;
KeyTool.KEY_F9 = 120;
KeyTool.KEY_F10 = 121;
KeyTool.KEY_F11 = 122;
KeyTool.KEY_F12 = 123;

//字母
KeyTool.KEY_a = 65;
KeyTool.KEY_b = 66;
KeyTool.KEY_c = 67;
KeyTool.KEY_e = 69;
KeyTool.KEY_s = 83;
KeyTool.KEY_z = 90;


// + -
KeyTool.KEY_PLUS = 187;
KeyTool.KEY_MINUS = 189;

//` ~
KeyTool.KEY_Accent = 192;
KeyTool.KEY_Crecent = 191;

function windowonhelp() {
    return false;
}

KeyTool.doCancel = function () {
    return;
}

KeyTool.doEnter = function () {
    return;
}

KeyTool.onkeyDown = function (keyCode) {


    // 13回车
    if (keyCode == 13) {
        doEnter();
    }

    // 27Esc
    if (keyCode == 27) {
        doCancel();
    }
}
﻿function AbstractField(parentForm, fieldObjectName, width, data) {
    this.parentForm = parentForm;
    this.fieldObjectName = fieldObjectName;
    this.width = width;
    this.data = data;
    this.fieldObjectNames = [];
    this.init();
};

AbstractField.prototype = {
    constructor: AbstractField,
    checkfieldDivName: "checkfieldDivName",
    checkText: "",
    ime_mode: "",
    pageElement: null,
    isFocus: false,
    maxLength: 0,
    checkValidateText: "",
    tempValue: "",
    textRangeStart: 0, // 文本选中起始位置
    textRangeEnd: 0, // 文本选中终止位置
    eventProcessStr: function () {
        return "onkeyup='" + this.fieldObjectName + ".onKeyUpSuper(this,event);'" + " onkeydown='" + this.fieldObjectName + ".onKeyDownSuper(this,event);' " + " onfocus='" + this.fieldObjectName + ".onFocusSuper(this,event)'" + " onblur='" + this.fieldObjectName
            + ".onBlurSuper(this,event)'" + " onmouseover='" + this.fieldObjectName + ".onMouseOverSuper(this,event)'" + " onmouseout='" + this.fieldObjectName + ".onMouseOutSuper(this,event)'" + " onmousemove='" + this.fieldObjectName + ".onMouseMoveSuper(this,event)'"
            + " onclick='" + this.fieldObjectName + ".onClickSuper(this,event)'" + " ondblclick='" + this.fieldObjectName + ".onDbclickSuper(this,event)'" + " onchange='" + this.fieldObjectName + ".onChangeSuper(this,event)'";
    },
    initData: function () {

    },
    init: function () {
        if (this.data) {
            this.name = this.data.name;
            var value = this.data.value || this.data.defaultValue;
            this.value = value ? value : "";
            this.value_le = this.data.value_le ? this.data.value_le : "";

            this.value_ge = this.data.value_ge ? this.data.value_ge : this.value;
            var width = JBF.setObjValue(this.data.range, (this.width / 2 - 10), this.width);
            this.style = "width:" + width + "px;" + this.ime_mode;
            if (this.data.style) {
                this.style += (this.data.style + ";");
            }
            if (this.data.maxLength) {
                this.maxLength = this.data.maxLength;
            }
            this.readOnly = JBF.setObjValue(this.data.readOnly, " readonly = 'true' disabled = 'disabled' ");
            this.property = "";
            if (this.data.maxLength) {
                this.property += " maxLength = '" + this.data.maxLength + "'";
            }
            this.checkObjName = this.data.name;
            this.initData();
        }
    },
    toHtml: function () {
        return this.toHtmlStr();
    },
    toHtmlStr: function () {
        var inputStr = "<input " + this.eventProcessStr() + " class = 'inputCss' " + this.property + this.readOnly + " style = ' " + this.style + "' type = 'text' id = '&&&&&&' name = '&&&&&&'";
        var pattern = new RegExp(/&&&&&&/g);
        if (this.data.range) {
            var geName = this.name + "_ge";
            var leName = this.name + "_le";
            this.fieldObjectNames.push(geName);
            this.fieldObjectNames.push(leName);
            return inputStr.replace(pattern, geName) + " value = '" + this.value_ge + "'/>" + "<div style = 'float:left; margin:0px 2px;'>至</div>" + inputStr.replace(pattern, leName) + "value = '" + this.value_le + "'/>";
        } else {
            this.fieldObjectNames.push(this.name);
        }
        return inputStr.replace(pattern, this.name) + "value = '" + this.value + "'/>";
    },
    toLabel: function (pojo) {
        return this.toLabelStr(pojo);
    },
    toLabelStr: function (pojo) {
        var names = this.name.split("+");
        var values = [];
        if (names && names.length > 0) {
            for (var i = 0; i < names.length; i++) {
                var name = names[i];
                values.push(pojo[name]);
            }
        }
        return "<div class='fillinDiv' id='" + this.name + "' name='" + this.name + "' style='" + this.style + "'>" + values.join("-") + "</div>";
    },
    reset: function () {
        if (this.data.range) {
            JBF.el(this.name + "_ge").value = this.nullValue;
            JBF.el(this.name + "_le").value = this.nullValue;
        } else {
            JBF.el(this.name).value = this.nullValue;
        }
    },
    selectTextRange: function (obj, startIndex, endIndex) {
        if (this.type == CheckboxField.prototype.type || this.type == OptionField.prototype.type || this.type == RadioField.prototype.type) {
            return;
        }
        var r = obj.createTextRange();
        r.collapse(true);
        r.select();

        this.textRangeStart = startIndex;
        this.textRangeEnd = endIndex;
        var rt = document.selection.createRange();
        rt.collapse(true);
        rt.moveStart("character", this.textRangeStart);// 从m位开始
        rt.moveEnd("character", this.textRangeEnd);// 选取n位
        try {
            rt.select();
        } catch (e) {
            // alert('未选中所有文本!');
        }
    },
    /**
     * 当前对获取焦点操作
     */
    onFocus: function (obj, ev) {
    },
    onFocusSuper: function (obj, ev) {
        JBF.setFocusStyle(obj);
        this.isFocus = true;
        this.tempValue = obj.value;
        if (this.data.focus) {
            var fun = this.funManage(this.data.focus);
            fun(obj, ev, this);
        }
        this.onFocus(obj, ev);
        // this.validate();
        this.scrollHeightScreen();
        // 触发汇总计算:
        this.trigTotalCalOfTotalField();

        this.selectAll(obj);
    },
    trigTotalCalOfTotalField: function () {
        if (!this.parentForm) {
            return;
        }
        if (!this.parentForm.elementNames) {
            return;
        }
        // 遍历各个字段如果该字段是我和其它字段综合则计算它的值
        for (var i = 0; i < this.parentForm.elementNames.length; i++) {
            var et = this.parentForm.elementNames[i].field;
            if (this.isChildOfTotals(et)) {
                et.calByTotals();
            }

            if (et.isChildOfTotals(this)) {
                this.calByTotals();
            }
        }
    },
    isChildOfTotals: function (totalField) {
        if (totalField.data.totals && totalField.data.totals.length > 0) {
            var totals = "," + totalField.data.totals + ",";
            if (totals.indexOf("," + this.name + ",") != -1 || totals.indexOf("," + this.data.alias + ",") != -1) {
                return true;
            }
        }
        return false;
    },
    isDragBy: function (totalField) {
        if (totalField.data.dragFillFieldCode && totalField.data.dragFillFieldCode.length > 0) {
            var totals = "," + totalField.data.dragFillFieldCode + ",";
            if (totals.indexOf("," + this.name + ",") != -1 || totals.indexOf("," + this.data.alias + ",") != -1) {
                return true;
            }
        }
        return false;
    },
    calByTotals: function () {
        if (!this.parentForm) {
            return;
        }
        if (!this.parentForm.elementNames) {
            return;
        }
        var t = 0;
        // 遍历各个字段如果它是我的子项则总计加它的值
        for (var i = 0; i < this.parentForm.elementNames.length; i++) {
            var c = this.parentForm.elementNames[i].field;
            if (c.isChildOfTotals(this)) {
                t += c.getFloatValue();
            }
        }
        var f = this.getFloatValue();
        if (f < 0.01) {
            var pojo = new Object();
            pojo[this.name] = "" + t;
            this.fillinValue(pojo);
        } else {
            var element = JBF.el(this.name);
            if (element) {

                if (Math.abs(f - t) < 0.001) {
                    try {
                        onTotalOK(element, this.name, this.data.alias, this);
                    } catch (e) {
                        element.style.color = "#00ff00";
                    }
                } else {
                    try {
                        onTotalBad(element, this.name, this.data.alias, this);
                    } catch (e) {
                        element.style.color = "#ff0000";
                        element.title = "汇总计算值:" + t;
                    }

                }
            }
        }
    },
    getFloatValue: function () {
        var v = this.getValue();
        if (!v) {
            return 0;
        }
        v = v.replaceAll(",", "").replaceAll(" ", "");
        if (v.length < 1) {
            return 0;
        }
        return parseFloat(v);
    },
    /**
     * 选中控件中的值
     */
    selectAll: function (obj) {
        if (true) {
            //obj.value = obj.value;
        } else {

            if (obj && obj.value && obj.value.length) {
                this.selectTextRange(obj, 0, obj.value.length);
            }
        }
    },
    /**
     * 竖直方向滚动屏幕，使聚焦的控件定位在容器中间位置，方便用户使用
     */
    scrollHeightScreen: function () {
        if (this.parentForm.isScrollHeight) {
            var tdContainer = document.getElementById(this.parentForm.TDIDHEAD + this.name);
            if (tdContainer) {
                var formContainer = document.getElementById(this.parentForm.containerId);
                if (formContainer && tdContainer.offsetTop - 50 > 0) {
                    formContainer.scrollTop = tdContainer.offsetTop - 50;
                }
            }
        }
    },
    focus: function () {
        this.focus(this.name);
    },
    focus: function (eName) {
        var obj;
        if (this.data.range) {
            if (eName) {
                var geIndex = eName.indexOf('_ge');
                if (geIndex > 0) {
                    obj = JBF.el(this.name + '_ge');
                } else {
                    obj = JBF.el(this.name + '_le');
                }
            }
        } else {
            obj = JBF.el(this.name);
        }

        if (obj) {
            obj.focus();
        }
    },
    validate: function () {
        if (!this.checkValidate()) {
            this.showTipPanel();
        } else {
            this.hideTipPanel();
        }
    },
    onBlur: function (obj, ev) {
        this.hideTipPanel();
    },
    getFileName: function () {
        return "last/" + encodeURIComponent(window.location.href + this.fieldObjectName + this.name + ".dat");
    },
    storeLastValue: function () {
        try {
            var value = this.getValue();
            if (value) {
                var fileName = this.getFileName();
                writeFile(fileName, value);
            }
        } catch (e) {
            var i = e;
        }

    },
    loadLastValue: function () {
        try {
            var fileName = this.getFileName();
            var value = readFile(fileName);
            this.setValue(value);
        } catch (e) {
            var i = e;
        }
    },
    onBlurSuper: function (obj, ev) {
        JBF.setBlurStyle(obj);
        this.isFocus = false;
        if (this.data.blur) {
            var fun = this.funManage(this.data.blur);
            fun(obj, ev, this);
        }
        this.onBlur(obj, ev);
        this.storeLastValue();
    },

    onChange: function (obj, ev) {
    },
    onChangeSuper: function (obj, ev) {
        if (this.data.change) {
            var fun = this.funManage(this.data.change);
            fun(obj, ev, this);
        }
        this.onChange(obj, ev);
        // 级联处理 ：
        var cascadeChilds = this.getCascadeChilds();
        if (cascadeChilds) {
            for (var i = 0; i < cascadeChilds.length; i++) {
                var child = cascadeChilds[i];
                // 如果 child是字符串 要转化为对象 ：
                if (JBF.isString(child)) {
                    for (var j = 0; j < this.parentForm.pageObjs.length; j++) {
                        var obj = this.parentForm.pageObjs[j];
                        if (obj.id == child || obj.name == child) {
                            child = obj;
                            break;
                        }

                    }
                }
                // 调用子对象的 事件 告诉他父亲变了：
                child.onCascadeParentChanged(this);
                // 调用 儿子 的 变化小溪 ：
                child.onChangeSuper(JBF.el(child.id || child.name), ev);
            }
        }

    },
    getCascadeChilds: function () {
        if (!this.data) {
            return [];
        }
        if (!this.data.cascadeChilds) {
            return [];
        }
        var ret = this.data.cascadeChilds;
        if (JBF.isString(ret)) {
            return [ret];
        }
        return ret;
    },
    getCascadeParents: function () {
        if (!this.data) {
            return [];
        }
        if (!this.data.cascadeParents) {
            return [];
        }
        var ret = this.data.cascadeParents;
        if (JBF.isString(ret)) {
            return [ret];
        }
        return ret;

    },
    onCascadeParentChanged: function (cascadeParent) {
        if (this.data.onCascadeParentChanged) {
            this.data.onCascadeParentChanged(cascadeParent);
        } else {

            this.setValue("");
        }

    },
    onKeyUp: function (obj, ev) {

    },
    onKeyUpSuper: function (obj, ev) {
        if (this.data.keyUp) {
            var fun = this.funManage(this.data.keyUp);
            fun(obj, ev, this);
        }
        this.onKeyUp(obj, ev);
        // 触发汇总计算:
        this.trigTotalCalOfTotalField();
    },
    onKeyDown: function (obj, ev) {
    },
    clearException: function (obj, event) {

        var ev = JBF.getEvent(event);
        var keyCode = JBF.getKeyValue(ev);
        var element = JBF.getEventTarget(ev);
        var tabName = element.name || element.id;
        if (ev.altKey && keyCode == KeyTool.KEY_c) {
            ev.returnValue = false;
            ev.cancelBubble = true;
            for (var i = 1; i < 10; i++) {
                var exceptionType = this.data.name + "_exceptionType_" + (i);
                exceptionType = document.getElementById(exceptionType);
                if (exceptionType) {
                    if (exceptionType.style.display != "none") {
                        exceptionType.style.display = "none";
                    }
                }
            }
        }
    },
    onKeyDownSuper: function (obj, ev) {

        this.clearException(obj, ev);

        if (this.data.keyDown) {
            var fun = this.funManage(this.data.keyDown);
            fun(obj, ev, this);
        }
        this.onKeyDownNextOrPrevious(obj, ev);
        this.onKeyDown(obj, ev);
        var ev = JBF.getEvent(ev);
        var keyCode = JBF.getKeyValue(ev);
        if (keyCode == 13) {
            ev.returnValue = false;
        }
    },
    onKeyDownNextOrPrevious: function (obj, event) {
        var ev = JBF.getEvent(event);
        var keyCode = JBF.getKeyValue(ev);
        var element = JBF.getEventTarget(ev);
        var tabName = element.name || element.id;
        if (keyCode == 13 && ev.ctrlKey) {// Ctrl+回车
            this.parentForm.skipPreviousObj(ev, tabName);
        } else if (keyCode == 13) {// 回车

            if (!this.checkValidate()) {

                this.showTipPanel();
            } else {
                this.hideTipPanel();
                this.parentForm.skipNextObj(ev, tabName);

            }
        } else if (ev.altKey && keyCode <= KeyTool.KEY_9 && keyCode >= KeyTool.KEY_1) {
            for (var i = 1; i < 10; i++) {
                var exceptionType = this.data.name + "_exceptionType_" + (i);
                exceptionType = document.getElementById(exceptionType);
                if (exceptionType) {
                    if (exceptionType.style.display != "none") {
                        exceptionType.style.display = "none";
                    }
                }
            }

            var exceptionType = this.data.name + "_exceptionType_" + (keyCode - KeyTool.KEY_1 + 1);
            exceptionType = document.getElementById(exceptionType);
            if (exceptionType) {
                if (exceptionType.style.display == "none") {
                    exceptionType.style.display = "block";
                } else {
                    exceptionType.style.display = "none";
                }
            }
        } else if (ev.altKey && keyCode <= KeyTool.KEY_s9 && keyCode >= KeyTool.KEY_s1) {
            for (var i = 1; i < 10; i++) {
                var exceptionType = this.data.name + "_exceptionType_" + (i);
                exceptionType = document.getElementById(exceptionType);
                if (exceptionType) {
                    if (exceptionType.style.display != "none") {
                        exceptionType.style.display = "none";
                    }
                }
            }

            var exceptionType = this.data.name + "_exceptionType_" + (keyCode - KeyTool.KEY_s1 + 1);
            exceptionType = document.getElementById(exceptionType);
            if (exceptionType) {
                if (exceptionType.style.display == "none") {
                    exceptionType.style.display = "block";
                } else {
                    exceptionType.style.display = "none";
                }
            }
        }
    },
    onMouseOver: function (obj, ev) {
    },
    onMouseOverSuper: function (obj, ev) {
        if (this.data.mouseOver) {
            var fun = this.funManage(this.data.mouseOver);
            fun(obj, ev, this);
        }
        if (this.isTip) {
            JBF.createFocusTip(obj, this.data.tipText);
        }
        // this.showTipPanel();
        this.onMouseMove(obj, ev);
    },

    onMouseOut: function (obj, ev) {
    },
    onMouseOutSuper: function (obj, ev) {
        /* 最后把此代码提到button.js */
        if (this.data.mouseOut) {
            var fun = this.funManage(this.data.mouseOut);
            fun(obj, ev, this);
        }
        if (this.isTip) {
            JBF.hideFocusTip();
        }
        // this.hideTipPanel();
        this.onMouseOut(obj, ev);
    },

    onClick: function (obj, ev) {
    },
    onClickSuper: function (obj, ev) {
        if (this.data.click) {
            var fun = this.funManage(this.data.click);
            fun(obj, ev, this);
        }
        this.onClick(obj, ev);
    },
    onDbclick: function (obj, ev) {
    },
    onDbclickSuper: function (obj, ev) {
        if (this.data.dbClick) {
            var fun = this.funManage(this.data.dbClick);
            fun(obj, ev, this);
        } else {
            this.loadLastValue();
        }
        this.onDbclick(obj, ev);
    },

    onMouseMove: function (obj, ev) {
    },
    onMouseMoveSuper: function (obj, ev) {
        if (this.data.mouseMove) {
            var fun = this.funManage(this.data.mouseMove);
            fun(obj, ev, this);
        }
        this.onMouseMove(obj, ev);
    },
    linkageReDrew: function (datas) {

    },
    /**
     * 公用的，用来通过url来获取级联数据
     *
     * @param linkageObj
     * @param that
     */
    linkageFillinDataByUrl: function (linkageObj, that, value) {
        var url = linkageObj.url;
        params = "&code=" + value;
        (function () {
            JBF.ajax(url, params, function (msg) {
                if (msg && msg.pageList) {
                    that.parentForm.linkageObjLink(linkageObj["linkageObj"], msg.pageList);
                }
            });
        })();
    },
    /**
     * 通过所给的数据进行填充值
     */
    linkageFillinDataByData: function (linkageObj, that) {
        var data = linkageObj.data;
        that.parentForm.linkageObjLink(linkageObj["linkageObj"], data);
    },
    /**
     * 用来级联，并且改变子级联对像的数据类型(text,option......)
     */
    linkageChangeType: function (linkageObj, that, parentId) {
        var newObj = linkageObj["newObj"];
        if (typeof (newObj) == "function") {
            newObj = newObj(parentId);
        }
        that.parentForm.linkageObjChangeType(linkageObj["linkageObj"], newObj);
    },
    /**
     * 获取存放“值”的HTML Document 对象
     */
    el: function () {
        return document.getElementById(this.name);
    },
    viewEl: function () {

    },
    notNullValidate: function (value) {
        if (value.length > 0) {
            return true;
        } else {
            this.checkText = "此字段数据不能为空";
            if (this.el())
                JBF.setFocusStyle(this.el());
            return false;
        }
    },
    checkValidate: function () {
        var exceptionTypeCur = null;
        for (var i = 1; i < 10; i++) {
            var exceptionType = this.data.name + "_exceptionType_" + (i);
            exceptionType = document.getElementById(exceptionType);
            if (exceptionType) {
                if (exceptionType.style.display != "none") {
                    exceptionTypeCur = exceptionType;
                    break;
                }
            }
        }

        this.pageElement = this.el();
        this.checkText = "";
        var checkResult = true;
        var value = this.getValue();
        if ((value + "").indexOf("*") != -1) {
            return true;
        }
        if (this.data.notNull) {
            if (value && value.constructor == Array) {// 数组，区间类型
                for (var i = 0; i < value.length; i++) {
                    if (!this.notNullValidate(value[i])) {
                        checkResult = false;
                        break;
                    }
                    if (!this.checkRegExp(value[i])) {
                        checkResult = false;
                        break;
                    }
                }
            } else if (value && value.constructor == Object) {
            } else {// 普通字符串
                if (!this.notNullValidate(value)) {
                    checkResult = false;
                }
                if (!this.checkRegExp(value)) {
                    checkResult = false;
                }
            }
        } else {
            if (value && value.length > 0) {
                checkResult = this.checkRegExp(value);
            }
        }
        if (this.data.checkFun) {
            var checkFun = funManage(this.data.checkFun);
            checkResult = checkFun(value, this.checkText);
            if (!checkResult) {
                if (this.el())
                    JBF.setFocusStyle(this.el());
            }
        }
        if (checkResult) {
            if (exceptionTypeCur != null && exceptionTypeCur.innerHTML.indexOf("必填") != -1) {
                if (exceptionTypeCur.style.display != "none") {
                    if (value != "" && value != "0.00") {
                        exceptionTypeCur.style.display = "none";
                    }
                }
            }
        }
        return exceptionTypeCur != null || checkResult;
    },
    /**
     * 验证正则表达式:正则表达式来源于 this.data.regExp，错误信息来源于 this.data.regExpError
     */
    checkRegExp: function (value) {
        if (this.data.regExp) {
            var reg = JBF.isString(this.data.regExp) ? new RegExp(this.data.regExp) : this.data.regExp;
            checkResult = reg.test(value);
            if (!checkResult) {
                this.checkText = "";
                if (this.data.regExpError) {
                    this.checkText = this.data.regExpError;
                }
                if (this.el())
                    JBF.setFocusStyle(this.el());
                return checkResult;
            }
        }
        return true;
    },
    getValue: function () {
        if (this.data.range) {
            var geName = this.name + "_ge";
            var leName = this.name + "_le";
            var geValue = JBF.el(geName).value.replace(/(^\s*)|(\s*$)/g, "");
            var leValue = JBF.el(leName).value.replace(/(^\s*)|(\s*$)/g, "");
            return [geValue, leValue];
        } else {
            return JBF.el(this.name).value.replace(/(^\s*)|(\s*$)/g, "");
        }
    },
    setValue: function (value) {
        JBF.el(this.name).value = value;
    },
    getValueStr: function () {

        if (this.data.range) {
            var geName = this.name + "_ge";
            var leName = this.name + "_le";
            return "&" + geName + "=" + encodeURIComponent(this.getValue()[0]) + "&" + leName + "=" + encodeURIComponent(this.getValue()[1]);
        } else {
            return "&" + this.name + "=" + encodeURIComponent(this.getValue());
        }

    },
    fillinValue: function (pojo) {
        ;
        if (pojo) {
            var value = pojo[this.name];
            if (value != null && ('' + value).length > 0) {
                if (JBF.el(this.name)) {
                    JBF.el(this.name).value = value;
                }
            }
        }
    },
    funManage: function (fun) {
        if (typeof (fun) == "function") {
            return fun;
        } else if (typeof (fun) == "string") {
            return eval(fun.replace("(", "").replace(")", ""));
        }
    },
    showTipPanel: function () {
        if (this.checkText && this.checkText != "") {
            if (this.pageElement) {
                var _exceptionTD = JBF.el(this.data.name + "_exceptionTD");
                if (_exceptionTD) {
                    _exceptionTD.innerHTML = this.checkText;
                    _exceptionTD.style.display = "inline";
                } else {

                    var tipDiv = JBF.el(this.checkfieldDivName);
                    if (!tipDiv) {
                        tipDiv = document.createElement("div");
                        tipDiv.setAttribute("name", this.checkfieldDivName);
                        tipDiv.setAttribute("id", this.checkfieldDivName);
                        tipDiv.className = "checkTip";
                        document.body.appendChild(tipDiv);
                    }
                    tipDiv.style.display = "inline";
                    tipDiv.innerHTML = this.checkText;
                    tipDiv.style.left = JBF.getAbsX(this.pageElement) + 400 + "px";
                    var sswidth = JBF.getObjWidth(this.pageElement)
                    if (document.all && sswidth > 10) {
                        tipDiv.style.width = (sswidth - 5 * 2) + "px";
                    } else {
                        tipDiv.style.width = JBF.getObjWidth(this.pageElement) + "px";
                    }
                    tipDiv.style.top = (JBF.getAbsY(this.pageElement) + JBF.getObjHeight(this.pageElement) - JBF.getScrollTop(this.pageElement)) + "px";
                }
            }
        }
    },
    hideTipPanel: function () {
        var _exceptionTD = JBF.el(this.data.name + "_exceptionTD");
        if (_exceptionTD) {
            _exceptionTD.innerHTML = "";
            // _exceptionTD.style.display = "none";
        } else {

            var tipDiv = JBF.el(this.checkfieldDivName);
            if (tipDiv) {
                tipDiv.style.display = "none";
            }
        }
    },
    loadObjValues: function () {
        var cty = this.data;
        var returnValue = cty.options;
        if (cty.fillMethod) {
            cty.value = cty.fillMethod();
        }
        if (cty.loadUrl && cty.loadUrl.length > 0) {
            JBF.ajax(cty.loadUrl, "", function (msg) {
                returnValue = msg.pageList;
            });
        }
        return returnValue;
    },
    nullValue: ''
};

/**
 * 特殊符号： * + - . / ;: =+ <, -_ >. /? `~ {[ |\ }]
 */
AbstractField.prototype.specialLetterKeyCodes = [106, 107, 109, 110, 111, 186, 187, 188, 189, 190, 191, 192, 219, 220, 221, 222, 226, 229];

/**
 * 数字：<br>
 * 48~57=>0~9 <br>
 */
AbstractField.prototype.numberKeyCodes = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57];

/**
 * 数字：<br>
 * 96~105=0~9(数字小键盘)
 */
AbstractField.prototype.numberBigKeyCodes = [96, 97, 98, 99, 100, 101, 102, 103, 104, 105];

/**
 * 英文字母：a~z
 */
AbstractField.prototype.letterKeyCodes = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90];

/**
 * 功能按键：上 下 左 右 Home end pageUp pageDown
 */
AbstractField.prototype.operatKeyCodes = [8, 9, 13, 17, 18, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 91, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123];
﻿function CheckboxField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);// 用构造方法继承
};
CheckboxField.prototype = new AbstractField();
CheckboxField.prototype.type = "checkbox";
CheckboxField.prototype.init = function () {
    if (this.data) {
        this.styleClass = 'showSpan';
        this.name = this.data.name;
        this.defaultValue = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(this.defaultValue, this.defaultValue, "");
        this.style = "width:" + this.width + "px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = JBF.setObjValue(this.data.readOnly, " readonly='true' disabled='disabled'");
        this.property = "";
        this.spanName = this.name + "_span";
        this.checkObjName = this.name + "_span";
    }
};
CheckboxField.prototype.fillinValue = function (pojo) {
    if (pojo) {
        var values = pojo[this.name];
        if (typeof (values) == "string") {
            values = values.split(",");
        }
        var checks = JBF.elByName(this.name);
        for (var j = 0; j < values.length; j++) {
            var value = values[j];
            for (var i = 0; i < checks.length; i++) {
                if (checks[i].value == value) {
                    checks[i].checked = "true";
                    i = checks.length;
                }
            }
        }
    }
};
CheckboxField.prototype.toHtmlStr = function () {
    this.options = this.loadObjValues();
    this.fieldObjectNames.push(this.spanName);
    var style = "";
    if (this.data.style) {
        style += (this.style + ";");
    }
    var inputStr = "<span " + this.eventProcessStr() + " class='showSpan'"
        + "onclick='if(window.event){window.event.cancelBubble=true;}' id='" + this.spanName + "' name='"
        + this.spanName + "' style='width:" + this.opWidth + "px;'>";
    inputStr += this.createChecks();
    inputStr += "</span>";
    return inputStr;
};

CheckboxField.prototype.toLabelStr = function (pojo) {
    this.options = this.loadObjValues();
    var names = this.name.split("+");
    var valueTexts = [];
    if (names && names.length > 0) {
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            var value = pojo[name];
            for (var i = 0; i < this.options.length; i++) {
                var option = this.options[i];
                if (option["value"] == value) {
                    valueTexts.push(option["showText"]);
                    break;
                }
            }
        }
    }
    return "<div class='fillinDiv' id='" + this.name + "' name='" + this.name + "' style='" + this.style + "'>"
        + valueTexts.join("-") + "</div>";
};
CheckboxField.prototype.createChecks = function () {
    var inputStr = "";
    var changeMethod = "JBF.setFocusStyle(this);";
    var linkage = JBF.setObjValue(this.data.linkage, this.data.linkage);
    if (this.data.changeMethod) {
        changeMethod += this.data.changeMethod + "(this);";
    }
    if (this.options) {
        if (linkage) {
            changeMethod += this.objName + ".linkageObject(this, '" + linkage.url + "', '" + linkage.linkageObj + "');";
        }
        for (var i = 0; i < this.options.length; i++) {
            var option = this.options[i];
            var value = JBF.setObjValue(option.value, option.value);
            var showText = JBF.setObjValue(option.showText, option.showText);
            var checked = "";
            if ((option.checked && option.checked == "true") || this.checkDefaultValue(value, this.defaultValue)) {
                checked = " checked='checked'";
                this.onCheckValue(option.value);
            }
            var key = i + 1;
            if (i >= 9) {
                key = String.fromCharCode(65 + (i - 9));
            }
            inputStr += "<label><input onclick='" + this.fieldObjectName + ".onCheckValue();' " + checked + " name='"
                + this.name + "' id='" + (this.name + i) + "' type='" + this.type + "' value='" + value + "'"
                + " onblur='JBF.setBlurStyle(this)' onfocus='" + changeMethod + "' /><font class='accessKey'>"
                + key + "</font><font class='radioText'>" + showText + "</font></label>";
        }
    }
    return inputStr;
};
CheckboxField.prototype.reset = function () {
    var checks = JBF.elByName(this.name);
    for (var i = 0; i < checks.length; i++) {
        checks[i].checked = "";
    }
    this.onCheckValue();

};


CheckboxField.prototype.onCheckValue = function (value) {

};

CheckboxField.prototype.checkDefaultValue = function (value, defaultValue) {

    if (!defaultValue)
        return false;
    if (defaultValue == value) {
        return true;
    }
    if (defaultValue.length > 0) {
        for (var j = 0; j < defaultValue.length; j++) {
            if (defaultValue[j] == value) {
                return true;
            }
        }
    }
    return false;
};
CheckboxField.prototype.onKeyUp = function (obj, ev) {
    if (obj.disabled || obj.readonly || this.data.disabled || this.data.disable || this.data.readOnly) {
        return;
    }
    var keyCode = JBF.getKeyValue(ev);
    checks = JBF.elByName(this.data.name);
    if (checks
        && ((keyCode >= KeyTool.KEY_0 && keyCode <= KeyTool.KEY_9)
            || (keyCode >= KeyTool.KEY_a && keyCode <= KeyTool.KEY_z) || (keyCode >= KeyTool.KEY_s1 && keyCode <= KeyTool.KEY_s9))) {
        var index = 10000;
        if (keyCode >= KeyTool.KEY_0 && keyCode <= KeyTool.KEY_9) {
            index = keyCode - KeyTool.KEY_1;
        } else if (keyCode >= KeyTool.KEY_a && keyCode <= KeyTool.KEY_z) {
            index = keyCode - KeyTool.KEY_a + 9;
        } else if (keyCode >= KeyTool.KEY_s1 && keyCode <= KeyTool.KEY_s9) {
            index = keyCode - KeyTool.KEY_s1;
        }

        if (index < 0) {// 清空所有选 项（如果按是0则清空所有数据）
            for (var i = 0; i < checks.length; i++) {
                checks[i].checked = "";
            }
        } else if (index < checks.length) {// （如果是数字则选中相应的选项按钮）
            if (!(ev || window.event).altKey) {

                checks[index].checked = "checked";
                this.onCheckValue();
            }
        }
    } else if (checks && keyCode == KeyTool.KEY_F9) {
        for (var i = 0; i < checks.length; i++) {
            checks[i].checked = false;
            checks[i].selected = false;
            this.onCheckValue();
        }
    }
};
CheckboxField.prototype.linkageReDrew = function (optionDatas) {
    if (optionDatas && optionDatas.length > 0) {
        this.options = optionDatas;
        var parentDiv = JBF.el(this.spanName);
        if (parentDiv) {
            parentDiv.innerHTML = this.createChecks();
        }
    }
};
/**
 * 用来进行校验
 */
CheckboxField.prototype.checkValidate = function (obj) {
    if (this.data.notNull) {
        checks = JBF.elByName(this.data.name);
        if (checks) {
            for (var i = 0; i < checks.length; i++) {
                if (checks[i].checked) {
                    return true;
                }
            }
            var divSpan = JBF.el(this.spanName);
            this.pageElement = divSpan;
            JBF.setFocusStyle(divSpan);
            this.checkText = "请选择相应数据信息";
            return false;
        }
    }
    if (this.data.checkFun) {
        if (typeof (this.data.checkFun) == "function") {
            return checkPojo.checkFun(obj.value);
        } else if (typeof (checkPojo.checkFun) == "string") {
            var checkFun = eval(checkPojo.checkFun.replace("(", "").replace(")", "") + "()");
            return checkFun(obj.value);
        }
    }
    return true;
};
CheckboxField.prototype.getValue = function () {
    var checks = JBF.elByName(this.name);
    var returnValues = [];
    for (var i = 0; i < checks.length; i++) {
        if (checks[i].checked) {
            returnValues.push(checks[i].value);
        }
    }
    return returnValues;
};

CheckboxField.prototype.getValueStr = function () {
    var checks = JBF.elByName(this.name);
    var returnValues = [];
    for (var i = 0; i < checks.length; i++) {
        if (checks[i].checked) {
            returnValues.push(checks[i].value);
        }
    }
    return "&" + this.name + "=" + encodeURIComponent(returnValues.toString());
};

CheckboxField.prototype.focus = function () {
    JBF.el(this.spanName).focus();
};
CheckboxField.prototype.el = function () {
    return document.getElementById(this.spanName);
};

function TextField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);//�ù��췽���̳�
};
TextField.prototype = new AbstractField();
TextField.prototype.type = "text";
TextField.prototype.init = function () {
    if (this.data) {
        this.styleClass = 'inputCss';
        this.name = this.data.name;
        var value = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(value, value, "");
        this.style = "width:" + this.width + "px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = this.data.readOnly ? " readonly='true' disabled='disabled'" : "";
        this.property = "";
        if (this.data.maxLength) {
            this.property += " maxLength='" + this.data.maxLength + "'";
        }
        this.isTip = this.data.isTip ? this.data.isTip : false;
    }
};
TextField.prototype.toHtmlStr = function () {
    var inputStr = "<input type='text' id='" + this.name + "' name='" + this.name + "' " + this.eventProcessStr() + " class='" + this.styleClass + "'"
        + this.property + this.readOnly + " style='" + this.style + "' value='" + this.defaultValue + "'/>";
    this.fieldObjectNames.push(this.name);
    return inputStr;
};

function CharAndNumField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);
};
CharAndNumField.prototype = new AbstractField();
CharAndNumField.prototype.type = "charAndNum";
/**
 * 排除的字符数组
 */
CharAndNumField.prototype.excludeKeyCodes = [];

/**
 * 包含的字符数组
 */
CharAndNumField.prototype.includeKeyCodes = [];

CharAndNumField.prototype.init = function () {
    if (this.data) {
        this.styleClass = 'inputCss';
        this.name = this.data.name;
        var value = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(value, value, "");
        this.style = "width:" + this.width + "px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = this.data.readOnly ? " readonly='true' disabled='disabled'" : "";
        this.property = "";
        if (this.data.maxLength) {
            this.property += " maxLength='" + this.data.maxLength + "'";
        }
        this.isTip = this.data.isTip ? this.data.isTip : false;
    }
};

CharAndNumField.prototype.toHtmlStr = function () {
    var inputStr = "<input type='text' id='" + this.name + "' name='" + this.name + "' " + this.eventProcessStr() + " class='" + this.styleClass + "'"
        + this.property + this.readOnly + " style='" + this.style + "' value='" + this.defaultValue + "'/>";
    this.fieldObjectNames.push(this.name);
    return inputStr;
};


CharAndNumField.prototype.onKeyDown = function (obj, e) {
    this.lengthControl(obj, e);
    this.keyCodeControl(obj, e);
};

/**
 * 长度控制
 */
CharAndNumField.prototype.lengthControl = function (obj, e) {
//	if(this.maxLength < this.getValue().length)
//	{
//		e.returnValue = false;
//	}
};

/**
 * 按键事件控制
 */
CharAndNumField.prototype.keyCodeControl = function (obj, e) {
    // 允许输入包含数组中的字符
    for (var i = 0; i < this.includeKeyCodes.length; i++) {
        if (e.keyCode == this.includeKeyCodes[i]) {
            return;
        }
    }
    // 禁止输入特殊字符
    for (var i = 0; i < this.specialLetterKeyCodes.length; i++) {
        if (e.keyCode == this.specialLetterKeyCodes[i]) {
            e.returnValue = false;
        }
    }
    // 禁止用 shift + 0~9 的特殊符号
    for (var i = 0; i < this.numberKeyCodes.length; i++) {
        if (e.shiftKey && e.keyCode == this.numberKeyCodes[i]) {
            e.returnValue = false;
        }
    }
    // 禁止输入排除字母数组中的字符
    for (var i = 0; i < this.excludeKeyCodes.length; i++) {
        if (e.keyCode == this.excludeKeyCodes[i]) {
            e.returnValue = false;
        }
    }
};


function DecimalField(parentForm, fieldObjectName, width, data, decimal) {
    CharAndNumField.call(this, parentForm, fieldObjectName, width, data);//�ù��췽���̳�
    this.decimal = decimal;
};
DecimalField.prototype = new CharAndNumField();
DecimalField.prototype.type = "decimal";
DecimalField.prototype.ime_mode = "ime-mode:disabled;";

/**
 * 精度，默认为0
 */
DecimalField.prototype.precision = 0;
DecimalField.prototype.isLengthControl = true;

DecimalField.prototype.init = function () {
    if (this.data) {
        this.styleClass = 'inputCss';
        this.name = this.data.name;
        var value = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(value, value, "");
        this.style = "width:" + this.width + "px;overflow:hidden;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = this.data.readOnly ? " readonly='true' disabled='disabled'" : "";
        this.property = "";
        if (this.data.maxLength) {
            this.maxLength = this.data.maxLength;
        }
        this.isTip = this.data.isTip ? this.data.isTip : false;
        if (this.data.precision) {
            this.precision = this.data.precision;
            if (this.precision > 0) {
                this.includeKeyCodes = [110, 190];
            }
        }
    }
};

DecimalField.prototype.toHtmlStr = function () {
    var inputStr = "<textarea  cols='10' rows='1' id='" + this.name + "' name='" + this.name + "' " + this.eventProcessStr() + " class='" + this.styleClass + "'"
        + this.property + this.readOnly + " style='" + this.style + "'  >" + this.defaultValue + "</textarea>";
    this.fieldObjectNames.push(this.name);
    return inputStr;
};

DecimalField.prototype.onKeyDown = function (obj, e) {
    if (this.isLengthControl) {
        //debugger;
        this.lengthControl(obj, e);
    }
    this.keyCodeControl(obj, e);
    this.moveDotRangePos(obj, e);
};

/**
 * 长度控制
 */
DecimalField.prototype.lengthControl = function (obj, e) {
    var value = obj.value;
    var leftV = value; // 整数部分
    var rightV = "";  // 小数部分
    var dotIndex = value.indexOf('.');//小数点的位置
    // 光标所在位置
    var textRangePos = this.getRangePos(obj);
    if (dotIndex > 0) {
        leftV = value.substring(0, dotIndex);
        if (dotIndex < value.length) {
            rightV = value.substring(dotIndex + 1);
        }
        if (textRangePos.start != textRangePos.end) {//光标选中了N个字符，N>0
            var deltaPos = textRangePos.end - textRangePos.start;
            if (textRangePos.start > dotIndex) {//选中区域在小数部分，录入有效
            } else if (textRangePos.end > dotIndex && textRangePos.start < dotIndex) {//选中区域包括小数点
                if ((value.length - deltaPos + 1) > this.maxLength) {//变化后的长度使得整数部分大于最大值，数字录入无效,删除无效
                    this.numberInvalid(obj, e);
                    this.deleteInvalid(obj, e);
                }
            } else if (textRangePos.end <= dotIndex) {//选中区域在整数部分，录入有效
            }

        } else {//光标未选中任何字符
            if (textRangePos.start > dotIndex) {//光标位置在小数点之后
                if (rightV.length < this.precision) {//小数位数小于精度长度，录入有效

                } else {//小数位数大于或者等于精度长度，数字录入无效
                    this.numberInvalid(obj, e);
                }
            } else {//光标位置在小数点之前
                if (leftV.length < this.maxLength) {//整数位数小于精度长度，录入有效

                } else {//整数位数大于或者等于精度长度，数字录入无效
                    this.numberInvalid(obj, e);
                }
            }
        }
    } else {
        if (textRangePos.start != textRangePos.end) {//光标选中了N个字符，N>0

        } else {
            if (leftV.length < this.maxLength) {//整数位数小于精度长度，录入有效

            } else {//整数位数大于或者等于精度长度，数字录入无效
                this.numberInvalid(obj, e);
            }
        }
    }

};

/**
 * 当输入 . 时 移动光标
 */
DecimalField.prototype.moveDotRangePos = function (obj, e) {
    if (e.keyCode == 110 || event.keyCode == 190) {
        var dot = obj.value.indexOf('.');
        // 光标所在位置
        var textRangePos = this.getRangePos(obj);
        if (dot > 0) {//小数点已经存在
            if (textRangePos.start != textRangePos.end) {//光标选中了N个字符，N>0
                if (textRangePos.end > dot && textRangePos.start < dot) {//选中区域包括小数点
                    if ((obj.value.length - textRangePos.end) > this.precision) {
                        e.returnValue = false;
                    }
                } else {//选中区域 不包括小数点
                    this.selectTextRange(obj, dot + 1, dot + 1);
                    e.returnValue = false;
                }
            } else {
                this.selectTextRange(obj, dot + 1, dot + 1);
                e.returnValue = false;
            }
        } else {//小数点不存在
            if ((obj.value.length - textRangePos.end) > this.precision) {
                e.returnValue = false;
            }
        }
    }
}

/**
 * 数字输入无效
 */
DecimalField.prototype.numberInvalid = function (obj, e) {
    for (var i = 0; i < this.numberKeyCodes.length; i++) {
        if (e.keyCode == this.numberKeyCodes[i]) {
            e.returnValue = false;
            return;
        }
    }
    for (var i = 0; i < this.numberBigKeyCodes.length; i++) {
        if (e.keyCode == this.numberBigKeyCodes[i]) {
            e.returnValue = false;
            return;
        }
    }
};

/**
 * 退格、删除 无效
 */
DecimalField.prototype.deleteInvalid = function (obj, e) {
    if (e.keyCode == KeyTool.KEY_BACK || e.keyCode == KeyTool.KEY_DELETE) {
        e.returnValue = false;
    }
}

DecimalField.prototype.keyCodeControl = function (obj, e) {
    // 允许输入包含数组中的字符
    for (var i = 0; i < this.includeKeyCodes.length; i++) {
        if (e.keyCode == this.includeKeyCodes[i]) {
            return;
        }
    }
    // 禁止输入特殊字符
    for (var i = 0; i < this.specialLetterKeyCodes.length; i++) {
        if (e.keyCode == this.specialLetterKeyCodes[i]) {
            e.returnValue = false;
        }
    }
    // 禁止输入英文字母
    for (var i = 0; i < this.letterKeyCodes.length; i++) {
        if (e.keyCode == this.letterKeyCodes[i] || e.shiftKey && e.keyCode == this.letterKeyCodes[i]) {
            e.returnValue = false;
        }
    }
    // 禁止用 shift + 0~9 的特殊符号
    for (var i = 0; i < this.numberKeyCodes.length; i++) {
        if (e.shiftKey && e.keyCode == this.numberKeyCodes[i]) {
            e.returnValue = false;
        }
    }
    // 禁止输入排除字母数组中的字符
    for (var i = 0; i < this.excludeKeyCodes.length; i++) {
        if (e.keyCode == this.excludeKeyCodes[i]) {
            e.returnValue = false;
        }
    }
};

/**
 * 获取光标位置，返回对象{start:start,end:end}
 */
DecimalField.prototype.getRangePos = function (textBox) {
    //如果是Firefox(1.5)的话，方法很简单
    if (typeof (textBox.selectionStart) == "number") {
        start = textBox.selectionStart;
        end = textBox.selectionEnd;
    }
    //下面是IE(6.0)的方法，麻烦得很，还要计算上'\n'
    else if (document.selection) {
        var range = document.selection.createRange();
        if (range.parentElement().id == textBox.id) {
            // create a selection of the whole textarea
            var range_all = document.body.createTextRange();
            range_all.moveToElementText(textBox);
            //两个range，一个是已经选择的text(range)，一个是整个textarea(range_all)
            //range_all.compareEndPoints()比较两个端点，如果range_all比range更往左(further to the left)，则                //返回小于0的值，则range_all往右移一点，直到两个range的start相同。
            // calculate selection start point by moving beginning of range_all to beginning of range
            for (start = 0; range_all.compareEndPoints("StartToStart", range) < 0; start++)
                range_all.moveStart('character', 1);
            // get number of line breaks from textarea start to selection start and add them to start
            // 计算一下\n
            for (var i = 0; i <= start; i++) {
                if (textBox.value.charAt(i) == '\n')
                    start++;
            }
            // create a selection of the whole textarea
            var range_all = document.body.createTextRange();
            range_all.moveToElementText(textBox);
            // calculate selection end point by moving beginning of range_all to end of range
            for (end = 0; range_all.compareEndPoints('StartToEnd', range) < 0; end++)
                range_all.moveStart('character', 1);
            // get number of line breaks from textarea start to selection end and add them to end
            for (var i = 0; i <= end; i++) {
                if (textBox.value.charAt(i) == '\n')
                    end++;
            }
        }
    }
    return {start: start, end: end, text: range.text};
}

function ForeignField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);
};
ForeignField.prototype = new AbstractField();
ForeignField.prototype.init = function () {
    if (this.data) {
        this.styleClass = 'inputCss';
        this.name = this.data.name;
        var value = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(value, value, "");
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.filter = "";
        if (this.data.filter) {
            this.filter = " filter='" + transQuote(this.data.filter) + "'";
        }
        this.filter1 = "";
        if (this.data.filter1) {
            this.filter1 = " filter1=" + this.data.filter1;
        }
        this.property = " type='hidden' opWidth='" + this.width + "' enterEvent='" + this.parentForm.objName + ".checkKey' parentOpObjName='" + this.parentForm.objName + "' parentTable='" + this.data.parentTable + "' parentTableTitle='" + this.data.parentTableTitle + "'";
        this.isTip = this.data.isTip ? this.data.isTip : false;
    }
};

function transQuote(s) {
    s = s.replace(/\'/g, "nbquoteha");
    return s;
}

ForeignField.prototype.toHtmlStr = function () {
    //debugger;
    var sg_queryIdCodeNamesOrderFieldName = "";
    if (this.data.sg_queryIdCodeNamesOrderFieldName) {
        sg_queryIdCodeNamesOrderFieldName = " sg_queryIdCodeNamesOrderFieldName='" + this.data.sg_queryIdCodeNamesOrderFieldName + "' ";
    }
    var inputStr = "<input id='" + this.name + "' name='" + this.name + "' " + this.eventProcessStr() + " class='" + this.styleClass + "'" + (sg_queryIdCodeNamesOrderFieldName) + this.filter1 + this.filter + this.property + " style='" + this.style + "' value='" + this.defaultValue + "'/>";
    ;
    this.fieldObjectNames.push(this.name.replace(".id", ".name"));
    return inputStr;
};
ForeignField.prototype.fillinValue = function (pojo) {
    if (pojo) {
        var id = pojo[this.name];
        var objName = this.name.replace(".id", ".name");
        var name = pojo[objName];
        if (id) {
            JBF.el(this.name).value = id;
        }
        if (name) {
            var nameElement = JBF.el(objName);
            if (nameElement) {
                nameElement.value = name;
            }
        }
    }
};
ForeignField.prototype.focus = function () {
    JBF.el(this.name.replace(".id", ".name")).focus();
};

function TextCueField(parentForm, fieldObjectName, width, data) {
    TextField.call(this, parentForm, fieldObjectName, width, data);//�ù��췽���̳�
};
TextCueField.prototype = new TextField();
TextCueField.prototype.type = "textCue";
/**
 * 功能按键：上 下 左 右 Home end pageUp pageDown
 */
TextCueField.prototype.operatKeyCodes = [8, 9, 13, 17, 18, 27, 33, 34, 35, 36, 37, 38, 39, 40, 46, 91, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123];
TextCueField.prototype.init = function () {
    if (this.data) {
        this.styleClass = 'inputCss';
        this.name = this.data.name;
        var value = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(value, value, "");
        this.style = "width:" + this.width + "px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = this.data.readOnly ? " readonly='true' disabled='disabled'" : "";
        this.property = "";
        if (this.data.maxLength) {
            this.property += " maxLength='" + this.data.maxLength + "'";
        }
        this.isTip = this.data.isTip ? this.data.isTip : false;
    }
};
TextCueField.prototype.toHtmlStr = function () {
    var inputStr = "<input type='text' id='" + this.name + "' name='" + this.name + "' " + this.eventProcessStr() + " class='" + this.styleClass + "'"
        + this.property + this.readOnly + " style='" + this.style + "' value='" + this.defaultValue + "'/>";
    this.fieldObjectNames.push(this.name);
    var hiddenStr = "<input type='hidden' id='textCue-" + this.name + "' />";
    return inputStr + hiddenStr;
};

TextCueField.prototype.onKeyUp = function (obj, ev) {
    for (var i = 0; i < this.operatKeyCodes.length; i++) {
        if (ev.keyCode == this.operatKeyCodes[i]) {
            return;
        }
    }
    // 上 下 左 右  Home End Delete PageUP PageDown 操作键时不执行反选文本的方法
    this.selectReversalText(obj);
};

TextCueField.prototype.selectReversalText = function (obj) {
    var objValue = obj.value;
    var lastObj = this.getHidden();
    window.status = lastObj.value + "=>" + objValue;
    if (objValue == "" || objValue == lastObj.value) {
        return;
    }

    // 判断原值是否以当前输入值开头
    var cIndex = this.tempValue.indexOf(objValue);
    if (cIndex == 0) {
        obj.value = this.tempValue;
        this.selectTextRange(obj, objValue.length, this.tempValue.length);
        lastObj.value = objValue.substring(0, this.textRangeStart);
    }
};

TextCueField.prototype.getHidden = function () {
    var hiddenId = this.type + "-" + this.name;
    return document.getElementById(hiddenId);
};

//TextField.prototype.onFocus = function(obj, ev)
//{
//
//};
function HiddenField(parentForm, fieldObjectName, data) {
    AbstractField.call(this, parentForm, fieldObjectName, "", data);
};
HiddenField.prototype = new AbstractField();
HiddenField.prototype.init = function () {
    if (this.data) {
        var value = this.data.value || this.data.defaultValue;
        this.name = this.data.name;
        this.defaultValue = JBF.setObjValue(value, value, "");
    }
};
HiddenField.prototype.toHtmlStr = function () {
    var inputStr = "<input type='hidden' id='" + this.name + "' name='" + this.name + "' value='" + this.defaultValue + "'/>";
    return inputStr;
};
HiddenField.prototype.fillinValue = function (pojo) {
    if (pojo) {
        var value = pojo[this.name];
        if (value) {
            JBF.el(this.name).value = value;
        }
    }
};
HiddenField.prototype.checkValidate = function () {
    //alert(1)
    return true;
};

function InputAbleSelectField(parentForm, fieldObjectName, width, data) {
    if (width) {
        width -= 20;
    }
    AbstractField.call(this, parentForm, fieldObjectName, width, data);
};
InputAbleSelectField.KEY_BACK = KeyTool.KEY_BACK;
InputAbleSelectField.KEY_DELETE = KeyTool.KEY_DELETE;
InputAbleSelectField.prototype = new AbstractField();
InputAbleSelectField.prototype.initData = function () {
    this.obj = {
        localElement: this.data.list,
        localNodeName: "A",
        showText: "请输入查询",
        oddColor: "#eaefff",
        evenColor: "#902211",
        oddTextColor: "#000000",
        evenTextColor: "#000000",
        overColor: "#aabac7"
    };
    this.objName = "InputAbleSelectField";
    this.locatTextArea = null;
    this.liHeight = 25;
    this.liCount = 5;
    this.oddColor = "#666666";
    this.evenColor = "#ffffff";
    this.oddTextColor = "#000000";
    this.evenTextColor = "#000000";
    this.overColor = "#aabac7";
    this.selectedLiIndex = 0;
    this.rowNodes = [];
    this.valueGroups = [];
    this.exeMethod = null;
    if (this.obj) {
        if (this.obj.oddColor) {
            this.oddColor = this.obj.oddColor;
        }
        if (this.obj.evenColor) {
            this.evenColor == this.obj.evenColor;
        }
        if (this.obj.oddTextColor) {
            this.oddTextColor = this.obj.oddTextColor;
        }
        if (this.obj.evenTextColor) {
            this.evenTextColor = this.obj.evenTextColor;
        }
        if (this.obj.overColor) {
            this.overColor = this.obj.overColor;
        }
        if (this.obj.exeMethod) {
            this.exeMethod = this.obj.exeMethod;
        }
    }
},


    InputAbleSelectField.prototype.toHtml = function () {
        var inputStr = "<input onchange='return false;" + this.fieldObjectName + ".fullLocatText(this);'  type='text' id='g_" + this.name + "' name='g_" + this.name + "' " + this.eventProcessStr() + " class='" + this.styleClass + "'"
            + this.property + this.readOnly + " style='" + this.style + "'/>" +
            "<label style='' onclick=\"" + this.fieldObjectName + ".onClick1(document.getElementById('g_" + this.name + "'));\">▼</label>" +
            "<input type='hidden' id='" + this.name + "' name='" + this.name + "'/>";
        this.fieldObjectNames.push(this.name);

        return inputStr;
    },

    InputAbleSelectField.prototype.txtFocus = function (op) {
        op.select(op);
    },

    InputAbleSelectField.prototype.onClick = function (op) {
    },

    InputAbleSelectField.prototype.onClick1 = function (op) {
        this.createSearchPanel();
        this.fullLocatText(op);
    },

    InputAbleSelectField.prototype.createSearchPanel = function () {
        if (this.locatTextArea != null)
            return;
        this.locatTextArea = document.createElement("div");
        this.locatTextArea.style.position = "absolute";
        this.locatTextArea.style.left = "0px";
        this.locatTextArea.style.top = "100px";
        this.locatTextArea.style.width = "100%";
        this.locatTextArea.style.border = "1px";
        this.locatTextArea.style.backgroundColor = "#54573e";
        this.locatTextArea.style.zIndex = 1000;
        this.locatTextArea.style.display = 'none';
        this.locatTextArea.style.overflow = 'hidden';
        this.locatTextArea.style['overflow-x'] = 'hidden';
        this.locatTextArea.id = 'locatTextArea';
        document.body.appendChild(this.locatTextArea);
    },


    InputAbleSelectField.prototype.fullSearchPanel = function (opInput) {
        if (null != this.locatTextArea && this.valueGroups && this.valueGroups.length > 0) {
            var height = this.liCount * this.liHeight;
            if (this.valueGroups.length >= this.liCount) {
                height = this.liCount * this.liHeight;
            } else {
                height = this.valueGroups.length * this.liHeight;
            }
            var ulStr = "<ul onclick='" + this.fieldObjectName + ".selectedLi(this);' onmouseover='" + this.fieldObjectName + ".mouseSelect(this,event);' id='" + this.fieldObjectName + "startMenuText' style='display:block;margin:1px;height:" + height * 2 + "px;overFlow:auto;width:99%;'>";
            for (var i = 0; i < this.valueGroups.length; i++) {
                var subNode = this.valueGroups[i];
                var clickObj = "selectedIndex='" + i + "'";
                if (i % 2 == 0) {
                    ulStr += "<li " + clickObj + " srcColor='" + this.oddColor + "' style=' white-space:nowrap; display:block;; height:" + this.liHeight + "px; background-color:" + this.oddColor + "; color:" + this.oddTextColor + ";'  livalue='" + subNode.key + "'>" + subNode.showText + "</li>";
                } else {
                    ulStr += "<li " + clickObj + " srcColor='" + this.evenColor + "' style=' white-space:nowrap; display:block; height:" + this.liHeight + "px;; background-color:" + this.evenColor + "; color:" + this.evenTextColor + ";' livalue='" + subNode.key + "'>" + subNode.showText + "</li>";
                }
            }
            ulStr += "</ul>";
            this.locatTextArea.innerHTML = ulStr;
            this.locatTextArea.style.left = opInput.offsetLeft;

            this.locatTextArea.style.display = "inline";
            var ulHeight = this.liCount * this.liHeight;

            if (this.valueGroups.length >= this.liCount) {
                ulHeight = this.liCount * this.liHeight;
            } else {
                ulHeight = this.valueGroups.length * this.liHeight;
            }
            ulHeight *= 2;
            this.locatTextArea.style.height = (ulHeight + 2) + "px";
            this.locatTextArea.style.top = (JBF.getAbsY(opInput) + JBF.getObjHeight(opInput)) + "px";
            this.locatTextArea.style.left = JBF.getAbsX(opInput);
            this.locatTextArea.style.width = opInput.offsetWidth;
        }
    },
    InputAbleSelectField.prototype.rowSelected = function () {
        if (this.locatTextArea) {
            this.rowNodes = JBF.getSubNodesByNodeName("LI", this.locatTextArea);
            if (this.rowNodes.length > 0) {
                this.rowNodes[0].style.backgroundColor = this.overColor;
                this.selectedLiIndex = 0;
            }
        }
    },
    InputAbleSelectField.prototype.selectedLi = function (op) {
        var obj = this.valueGroups[this.selectedLiIndex];
        if (obj == null)
            return;
        this.locatTextArea.style.display = "none";
        JBF.el(this.name).value = obj.value;
        JBF.el("g_" + this.name).value = getRidOfFormat(obj.showText);
        try {
            if (this.onselectedLi) {
                this.onselectedLi(obj);
            }
        } catch (e) {

        }
    },
    InputAbleSelectField.prototype.keyRollLi = function (type) {
        var obj = JBF.el(this.fieldObjectName + "startMenuText");
        if (obj) {
            if (type) {
                if (type == "up") {
                    this.selectedLiIndex -= 1;
                    obj.scrollTop -= this.liHeight;
                } else {
                    this.selectedLiIndex += 1;
                    obj.scrollTop += this.liHeight;
                }
            }
            if (this.selectedLiIndex < 0) {
                this.selectedLiIndex = this.rowNodes.length - 1;
                obj.scrollTop = obj.scrollHeight;
            } else if (this.selectedLiIndex == this.rowNodes.length) {
                this.selectedLiIndex = 0;
                obj.scrollTop = 0;
            }
            this.changeBgColor();
        }
    },
    InputAbleSelectField.prototype.mouseSelect = function (op, ev) {
        var opLi = JBF.getEventTarget(ev);
        if (this.rowNodes) {
            for (var i = 0; i < this.rowNodes.length; i++) {
                if (this.rowNodes[i] == opLi) {
                    this.selectedLiIndex = i;
                    i = this.rowNodes.length;
                    this.changeBgColor();
                }
            }
        }
    },
    InputAbleSelectField.prototype.changeBgColor = function () {
        for (var i = 0; i < this.rowNodes.length; i++) {
            var rowNode = this.rowNodes[i];
            var styleColor = rowNode.style.backgroundColor;
            var srcColor = rowNode.attributes["srcColor"].value;
            if (styleColor != srcColor) {
                rowNode.style.backgroundColor = srcColor;
            }
            ;
        }
        this.rowNodes[this.selectedLiIndex].style.backgroundColor = this.overColor;
    },
    InputAbleSelectField.prototype.fullLocatText = function (op) {
        var inputText = op.value;
        var isClear = false;
        //alert(this.obj.localElement);
//			if(inputText.length<=0){
        //alert("ddd");
        isClear = false;
        this.valueGroups = this.obj.localElement;
//			}else{
//				alert("eee");
//				if(this.obj.localElement){
//					alert(valueGroups);
//					this.valueGroups=[];
//					for(var i=0;i<this.obj.localElement.length;i++){
//						var searchObj=this.obj.localElement[i];
//						if((searchObj.showText+'').indexOf(inputText)>-1){
//						//if(((searchObj.showText+'').indexOf(inputText)>-1)||((searchObj.value+'').indexOf(inputText)>-1)){
//							this.valueGroups.push(searchObj);
//						}
//					}
//				}
//				if(this.valueGroups.length<=0){
//					isClear="true";
//				}
//			}
        if (isClear) {
            this.locatTextArea.innerHTML = "";
            this.locatTextArea.style.display = "none";
            this.rowNodes.length = 0;
            this.valueGroups.length = 0;
        } else {

            this.fullSearchPanel(op);
            this.rowSelected();
            //this.changeBgColor();
        }
    },
    /**
     * 键盘操作
     * @param op
     * @param ev
     */
    InputAbleSelectField.prototype.onKeyUp = function (op, ev) {
        var event = JBF.getEvent(ev);
        var keyCode = JBF.getKeyValue(event);
        if (keyCode == 39 || keyCode == 37)
            return;
        this.createSearchPanel();
        if (keyCode == 38) {
            if (this.locatTextArea.style.display != "none")
                this.keyRollLi("up");
        } else if (keyCode == 40) {
            if (this.locatTextArea.style.display != "none")
                this.keyRollLi("down");
        } else if (keyCode == 13) {
            if (this.locatTextArea.style.display != "none")
                this.selectedLi('onkeyup');
        } else if (keyCode == InputAbleSelectField.KEY_BACK || keyCode == InputAbleSelectField.KEY_DELETE) {
            this.fullLocatText(op);
        }
    };

InputAbleSelectField.prototype.linkageReDrew = function (optionDatas) {
    this.obj.localElement = [];
    if (optionDatas && optionDatas.length > 0) {
        for (var i = 0; i < optionDatas.length; i++) {
            var searchObj = optionDatas[i];
            this.obj.localElement.push(searchObj);
        }
    }
};

InputAbleSelectField.prototype.setValue = function (value) {
    JBF.el("g_" + this.name).value = value;
    JBF.el(this.name).value = value;
    for (var i = 0; i < this.obj.localElement.length; i++) {
        var searchObj = this.obj.localElement[i];
        if (searchObj.value == value) {
            JBF.el("g_" + this.name).value = getRidOfFormat(searchObj.showText);
            JBF.el(this.name).value = value;
            break;
        }
    }
};
InputAbleSelectField.prototype.onBlur = function () {
    //this.selectedLi();
//	if(this.obj.localElement!=null)
//	for(var i=0;i<this.obj.localElement.length;i++)
//	if(this.obj.localElement.key==JBF.el(this.name).value)
//		if(JBF.el("g_"+this.name).value==this.obj.localElement.showText)
//				JBF.el(this.name).value=JBF.el("g_"+this.name).value;
//	if(this.locatTextArea!=null){
//		this.locatTextArea.innerHTML="";
//		this.locatTextArea.style.display="none";
//	}
};
InputAbleSelectField.prototype.onKeyDownNextOrPrevious = function (obj, ev) {
    var ev = JBF.getEvent(event);
    var keyCode = JBF.getKeyValue(ev);
    var element = JBF.getEventTarget(ev);
    var tabName = element.name || element.id;
    if (ev.altKey && keyCode <= KeyTool.KEY_9 && keyCode >= KeyTool.KEY_1) {
        for (var i = 1; i < 10; i++) {
            var exceptionType = this.data.name + "_exceptionType_" + (i);
            exceptionType = document.getElementById(exceptionType);
            if (exceptionType) {
                if (exceptionType.style.display != "none") {
                    exceptionType.style.display = "none";
                }
            }
        }

        var exceptionType = this.data.name + "_exceptionType_" + (keyCode - KeyTool.KEY_1 + 1);
        exceptionType = document.getElementById(exceptionType);
        if (exceptionType) {
            if (exceptionType.style.display == "none") {
                exceptionType.style.display = "block";
            } else {
                exceptionType.style.display = "none";
            }
        }
    }
};

InputAbleSelectField.prototype.onFocusSuper = function (obj, ev) {
    obj = JBF.el("g_" + this.name);
    JBF.setFocusStyle(obj);
    if (this.data.focus) {
        var fun = this.funManage(this.data.focus);
        fun(obj, ev, this);
    }
    this.onFocus(obj, ev);
    this.validate();
    this.selectTextRange(obj, 0, obj.value.length);
};

function getRidOfFormat(t) {
    if (!t) {
        return "";
    }
    if (t.indexOf("font>") == -1) {
        return t;
    }
    var div = document.createElement("div");
    div.innerHTML = t;
    return div.innerText || div.textContent;
}
﻿
function DateField(parentForm, fieldObjectName, width, data) {
    DecimalField.call(this, parentForm, fieldObjectName, width, data);// 用构造方法继承
};

DateField.i18n = { // 本地化
    previousMonth: 'Previous Month',
    nextMonth: 'Next Month',
    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
};//新加坡英文版
DateField.i18n = { // 本地化
    previousMonth: '上个月',
    nextMonth: '下个月',
    months: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
    weekdays: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    weekdaysShort: ['日', '一', '二', '三', '四', '五', '六']
}
DateField.prototype = new DecimalField();
DateField.prototype.ime_mode = "ime-mode:disabled;";
DateField.prototype.type = "date";
DateField.prototype.dsplit = "";
DateField.prototype.datePicker = null;
DateField.prototype.initData = function () {

};
DateField.prototype.init = function () {
    if (this.data) {
        this.name = this.data.name;
        var value = this.data.value || this.data.defaultValue;
        this.value = value ? value : "";
        var width = JBF.setObjValue(this.data.range, (this.width / 2 - 15), this.width);
        this.style = "width:" + width + "px;" + this.ime_mode;
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        if (this.data.maxLength) {
            this.maxLength = this.data.maxLength;
        }
        this.readOnly = JBF.setObjValue(this.data.readOnly, " readonly = 'true' disabled = 'disabled' ");
        this.property = "";
        if (this.data.maxLength) {
            this.property += " maxLength = '" + this.data.maxLength + "'";
        }
        this.checkObjName = this.data.name;
        if (this.data.split) {
            this.dsplit = this.data.split;
        }
        if (this.dsplit.length > 0) {
            var sArray = this.value.split(this.dsplit);
            this.value = "";
            for (var i = 0; i < sArray.length; i++) {
                this.value = this.value + sArray[i];
            }
        }
    }
};
DateField.prototype.checkRegExp = function (value) {
    if ("cq" == value || "长期" == value || "*" == value) {
        return true;
    }
    if (JBF.dateFormat == "dd/MM/yyyy" || JBF.dateFormat == "ddMMyyyy") {
        return true;
    }
    var year, month, day;
    if (value.length == (this.dsplit.length * 2 + 8)) {
        if (this.dsplit.length > 0) {
            var vArray = value.split(this.dsplit);
            if (vArray.length == 3) {
                year = vArray[0];
                month = vArray[1];
                day = vArray[2];
            } else {
                this.checkText = "格式不正确";
                return false;
            }
        } else {
            year = value.substring(0, 4);
            month = value.substring(4, 6);
            day = value.substring(6, 8);
        }
        if (Number(month) > 12 || Number(day) > 31 || Number(month) < 1 || Number(day) < 1 || year.length != 4) {
            this.checkText = "格式不正确";
            return false;
        } else if (day > this.getLastDayOfMonth(Number(year), Number(month))) {
            this.checkText = "格式不正确";
            return false;
        }
    } else {
        this.checkText = "格式不正确";
        return false;
    }
    return true;
};
DateField.prototype.toHtmlStr = function () {
    var inputStr = "<input " + this.eventProcessStr() + " class = 'inputCss' ";
    inputStr += this.property + this.readOnly + " style = ' " + this.style;
    inputStr += "' type = 'text' id = '&&&&&&' name = '&&&&&&' value = '";
    var pattern = new RegExp(/&&&&&&/g);
    if (this.data.range) {
        var geName = this.name + "_ge";
        var leName = this.name + "_le";
        this.fieldObjectNames.push(geName);
        this.fieldObjectNames.push(leName);
        var value0 = "";
        var value1 = "";
        if (this.value) {
            if (typeof (this.value) == 'string') {
                value0 = this.value;
                value1 = this.value;
            } else if (this.value instanceof Array) {
                value0 = this.value.length > 0 ? this.value[0] : "";
                value1 = this.value.length > 1 ? this.value[1] : value0;
            }
        }
        return inputStr.replace(pattern, geName) + value0 + "'/>"
            + "<div style = 'float:left; margin:0px 2px;'>-</div>" + inputStr.replace(pattern, leName) + value1
            + "'/>";
    } else {
        inputStr += this.value + "'/>";
        this.fieldObjectNames.push(this.name);
    }
    return inputStr.replace(pattern, this.name);
};
DateField.prototype.onKeyUp = function (obj, elEvent) {
    JBF.replaceDate(obj);
};

DateField.prototype.onClick = function (obj, elEvent) {
    if (!obj.binded) {
        obj.binded = true;
        obj.datePicker = new Pikaday({
            i18n: DateField.i18n,
            field: obj,
            format: JBF.dateFormat.toUpperCase()
        });
        obj.datePicker.show();
    }

    //this.datePicker = putDateByObj(obj, this);
    if (elEvent) {
        elEvent.cancelBubble = true;
    }
};

DateField.prototype.getValueStr = function () {
//	if (this.datePicker) {
//		if(this.datePicker.closeWin){
//			this.datePicker.closeWin();
//		}else{
//			this.datePicker.hide();
//			this.datePicker=null;
//		}
//	}
    if (this.data.range) {
        var geName = this.name + "_ge";
        var leName = this.name + "_le";
        return "&" + geName + "=" + encodeURIComponent(addLine(JBF.el(geName).value)) + "&" + leName + "="
            + encodeURIComponent(addLine(JBF.el(leName).value));
    } else {
        var v = JBF.el(this.name).value;
        v = v.replaceAll("-", "");
        return "&" + this.name + "=" + encodeURIComponent(addLine(v));
    }
};

DateField.prototype.onKeyDownNextOrPrevious = function (obj, event) {
    var ev = JBF.getEvent(event);
    var keyCode = JBF.getKeyValue(ev);
    var element = JBF.getEventTarget(ev);
    var tabName = element.name;
    if (keyCode == 13 && ev.ctrlKey) {// Ctrl+回车
        if (this.parentForm.skipPreviousObj(ev, tabName)) {
            if (obj && obj.datePicker) {
                if (obj.datePicker.closeWin) {
                    obj.datePicker.closeWin();
                } else {
                    obj.datePicker.hide();
                    obj.datePicker = null;
                }
            }
        }
    } else if (keyCode == 13) {// 回车
        if (obj && obj.datePicker) {
            if (obj.datePicker.closeWin) {
                obj.datePicker.closeWin();
            } else {
                obj.datePicker.hide();
                obj.datePicker = null;
            }
        }
        if (!this.checkValidate()) {

            this.showTipPanel();
        } else {
            this.hideTipPanel();
            this.parentForm.skipNextObj(ev, tabName);
        }
    } else if (ev.altKey && keyCode <= KeyTool.KEY_9 && keyCode >= KeyTool.KEY_1) {
        for (var i = 1; i < 10; i++) {
            var exceptionType = this.data.name + "_exceptionType_" + (i);
            exceptionType = document.getElementById(exceptionType);
            if (exceptionType) {
                if (exceptionType.style.display != "none") {
                    exceptionType.style.display = "none";
                }
            }
        }

        var exceptionType = this.data.name + "_exceptionType_" + (keyCode - KeyTool.KEY_1 + 1);
        exceptionType = document.getElementById(exceptionType);
        if (exceptionType) {
            if (exceptionType.style.display == "none") {
                exceptionType.style.display = "block";
            } else {
                exceptionType.style.display = "none";
            }
        }
    }
};

function addLine(s) {
    return s;
    if (s && s != "" && s.length == 8) {
        var ss = s.substr(0, 4) + "-" + s.substr(4, 2) + "-" + s.substr(6, 2);
        return ss;
    }
    return s;
};

/**
 * 获得一个月中的最后一天
 */
DateField.prototype.getLastDayOfMonth = function (year, month) {
    var days = 0;
    switch (month) {
        case 1:
        case 3:
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            days = 31;
            break;
        case 4:
        case 6:
        case 9:
        case 11:
            days = 30;
            break;
        case 2:
            if (this.isLeapYear(year))
                days = 29;
            else
                days = 28;
            break;
    }
    return days;
};

/**
 * 判断是否为闰年
 */
DateField.prototype.isLeapYear = function (year) {
    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
        return true;
    } else {
        return false;
    }
};

DateField.prototype.getRangePos = function (textBox) {
    return {
        start: 0,
        end: 0
    };
};

DateField.prototype.onKeyDown = function (obj, e) {
    this.keyCodeControl(obj, e);
};

function LabelField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);//�ù��췽���̳�
};
LabelField.prototype = new AbstractField();
LabelField.prototype.type = "text";
LabelField.prototype.init = function () {
    if (this.data) {
        this.name = JBF.setObjValue(this.data.name, this.data.name);
        var value = this.data.value || this.data.defaultValue;
        this.value = JBF.setObjValue(value, value, "&nbsp;");
        this.width = JBF.setObjValue(this.data.range, (this.opWidth / 2 - 10), this.opWidth);
        this.style = "width:" + this.width + "px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
    }
};
LabelField.prototype.fillinValue = function (pojo) {
    JBF.el(this.name).innerHTML = pojo[this.name];
};
LabelField.prototype.toHtmlStr = function () {
    var inputStr = "<div class='fillinDiv' id='" + this.name + "' name='" + this.name + "' style='" + this.style + "'>" + this.value + "</div>";
    this.fieldObjectNames.push(this.name);
    return inputStr;
};

/**
 * 小写金额录入，货币格式
 * @param parentForm
 * @param fieldObjectName
 * @param width
 * @param data
 * @returns
 */
function MoneyField(parentForm, fieldObjectName, width, data) {
    DecimalField.call(this, parentForm, fieldObjectName, width, data);
};
MoneyField.prototype = new DecimalField();
MoneyField.prototype.type = "money";
MoneyField.prototype.ime_mode = "ime-mode:disabled;";
MoneyField.prototype.init = function () {
    if (this.data) {
        if (!this.data.maxLength) {
            this.data.maxLength = 12;
        }
        this.styleClass = 'inputCss';
        this.name = this.data.name;
        var value = this.data.value || this.data.defaultValue;
        this.value = value ? value : "";
        this.defaultValue = this.value;
        var width = JBF.setObjValue(this.data.range, (this.width / 2 - 15),
            this.width);
        this.style = "text-align:right;width:" + width + "px;" + this.ime_mode;
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = this.data.readOnly ? " readonly='true' disabled='disabled'"
            : "";
        if (this.data.precision) {
            this.precision = this.data.precision;
        }
        this.property = "";
        if (this.data.maxLength) {
            this.maxLength = this.data.maxLength;
//		this.property += " maxLength='" + (this.data.maxLength + this.precision) + "'";
            /**
             * 小写金额支持区间后，为了方便，将小写金额长度控制为20位
             */
            this.property += " maxLength='20'";
        }
        this.isTip = this.data.isTip ? this.data.isTip : false;
    }
    // 初始化默认值
    if (this.defaultValue) {
        if (typeof (this.defaultValue) == 'string') {
            this.defaultValue = this.toCashWithComma(this.defaultValue);
        } else if (this.defaultValue instanceof Array) {
            for (var i = 0; i < this.defaultValue.length; i++) {
                this.defaultValue[i] = this.toCashWithComma(this.defaultValue[i]);
            }
        }

    } else {
        this.defaultValue = '0.00';
    }
    this.showMoney = this.defaultValue;
};
MoneyField.prototype.toHtmlStr = function () {
    var inputStr = "<input type='text' id='&&&&&&' name='&&&&&&' "
        + this.eventProcessStr() + " class='" + this.styleClass + "'"
        + this.property + this.readOnly + " style='" + this.style + "' value='";
//			+ this.defaultValue + "' />";
    var pattern = new RegExp(/&&&&&&/g);
    if (this.data.range) {
        var geName = this.name + "_ge";
        var leName = this.name + "_le";
        this.fieldObjectNames.push(geName);
        this.fieldObjectNames.push(leName);

        var value0 = "";
        var value1 = "";
        if (this.value) {
            if (typeof (this.value) == 'string') {
                value0 = this.value;
                value1 = this.value;
            } else if (this.value instanceof Array) {
                value0 = this.value.length > 0 ? this.value[0] : "";
                value1 = this.value.length > 1 ? this.value[1] : value0;
            }
        }

        return inputStr.replace(pattern, geName) + value0 + "' />"
            + "<div style = 'float:left; margin:0px 2px;'>至</div>"
            + inputStr.replace(pattern, leName) + value1 + "' />";
    } else {
        inputStr = inputStr + this.defaultValue + "' />";
        this.fieldObjectNames.push(this.name);
    }
    return inputStr.replace(pattern, this.name);
};

MoneyField.prototype.onKeyUp = function (obj, event) {
    if (parseInt(obj.value * 100) == 0 && event.keyCode == KeyTool.KEY_BACK) {
        obj.value == '';
    } else {
        if (obj.value.indexOf("*") >= 0) {
            obj.value = "*";
        } else {
            this.replaceNumToMoney(obj);
        }
    }
};

MoneyField.prototype.onKeyDown = function (obj, e) {
    var element1 = JBF.el(obj.id);
    if (!element1) {
        return false;
    }
//	this.lengthControl(obj, e);
    if (e.shiftKey && e.keyCode == 56 || e.keyCode == 106) {
        obj.value = "*";
    } else {
        this.keyCodeControl(obj, e);
    }
};

/**
 * 长度控制，暂时废弃不用。因为有区间的情况
 */
MoneyField.prototype.lengthControl = function (obj, e) {
    if (this.getValue().length >= (this.maxLength + this.precision + 1)) {
        this.numberInvalid(obj, e);
        return;
    }

    var diff = obj.value.length - this.getValue().length;//分隔符‘,’个数
    var delta = 0;
    if (this.getValue().indexOf('.') > 0) {
        delta = 1;
    }
    if (diff <= 5) {
        obj.maxLength = this.maxLength + this.precision + delta + diff;
    }
//	window.status = "diff=" + diff + " maxlength=" + obj.maxLength + " value=" + this.getValue() + " obj.value=" + obj.value;
};

/**
 * 光标所在位置
 */
MoneyField.prototype.textRangeIndex = 0;

/**
 * 金额录入方式:
 */
MoneyField.prototype.onKeyUpSelectTextRange = function (obj, event) {
    var textRange = obj.createTextRange();
    textRange.collapse(true);
    if (event.keyCode == 110 || event.keyCode == 190) {
        this.textRangeIndex = 2;
    }
    if (this.textRangeIndex == 0) {
        textRange.moveStart("character", obj.value.indexOf('.') + 0); //将光标移动到小数点之前
        textRange.moveEnd("character", 0);
    } else if (this.textRangeIndex == 2) {
        textRange.moveStart("character", obj.value.indexOf('.') + 1);//将光标移动到小数点之后,并选中小数部分两位
        textRange.moveEnd("character", this.textRangeIndex);
        this.textRangeIndex--;
    } else if (this.textRangeIndex == 1) {
        textRange.moveStart("character", obj.value.indexOf('.') + 2);//将光标移动到小数点之后,并选中小数部分一位
        textRange.moveEnd("character", this.textRangeIndex);
        this.textRangeIndex--;
    }
    textRange.select();
};

MoneyField.prototype.replaceNumToMoney = function (obj) {
    var keyCode = JBF.getKeyValue(JBF.getEvent());
    if (keyCode == KeyTool.KEY_TAB || keyCode == KeyTool.KEY_ENTER || keyCode == KeyTool.KEY_CTRL || keyCode == KeyTool.KEY_ALT) {
        return true;
    }
    var v = obj.value;
    v = v.replace(/(^\s*)|(\s*$)/g, "").replace(/(,)/g, "");
    var pattern = new RegExp(/[^(0-9|,|.)]/g);
    v = v.replace(pattern, "");
    if (keyCode == null || (keyCode >= 96 && keyCode <= 105) || keyCode == 111 || (keyCode >= 48 && keyCode <= 57) || keyCode == 13 || keyCode == 9 || keyCode == 8) {
        var indexDot = v.indexOf(".");
        if (indexDot < 0) {
            v = "00" + v;
        } else {
            v = v.substring(0, indexDot) + v.substring(indexDot + 1);
        }
        while (v.length > 3 && v.substring(0, 1) == '0') {
            v = v.substring(1);
        }
        if (v != "") {
            this.showMoney = this.formatMoney(v);
            obj.value = this.showMoney;
        }
    } else {
        obj.value = this.showMoney;
    }
};

MoneyField.prototype.getValue = function () {
    var value;
    if (this.data.range) {
        var geName = this.name + "_ge";
        var leName = this.name + "_le";
        value = new Array();
        value.push(JBF.el(geName).value);
        value.push(JBF.el(leName).value);
        for (var i = 0; i < value.length; i++) {
            while (value[i].indexOf(",") > 0) {
                value[i] = value[i].replace(",", "");
            }
        }

    } else {
        value = JBF.el(this.name).value;
        while (value.indexOf(",") > 0) {
            value = value.replace(",", "");
        }
    }


    return value;
};

MoneyField.prototype.formatMoney = function (sString) {
    if (!sString) {
        return "0.00";
    }
    var szRet = "";
    var v = sString.replace(/(^\s*)|(\s*$)/g, "");  //去除前后空格
    if (v.length != "") {
        //添加小数点
        var index = v.indexOf('.');
        var szresult = "";
        if (index == -1) {
            if (v.length == 0) {
                szresult = "";
            } else if (v.length == 1) {
                szresult = "0.0" + v;
            } else if (v.length == 2) {
                szresult = "0." + v;
            } else {
                szresult = v.substring(0, v.length - 2) + "." + v.substring(v.length - 2, v.length);
            }
        } else if (index == v.length - 1) {
            szresult = v + "00";
        } else if (index == v.length - 2) {
            szresult = v + "0";
        } else {
            szresult = v;
        }
        index = szresult.indexOf(".");
        var tempdecimalpart = szresult.substring(index, index + 3);
        var temp = szresult.substring(0, index);
        index = temp.length % 3;
        var tempintegerpart = temp.substring(0, index);
        for (; index < temp.length; index += 3) {
            if (tempintegerpart == "") {
                tempintegerpart = tempintegerpart + temp.substring(index, index + 3);
            } else {
                tempintegerpart = tempintegerpart + "," + temp.substring(index, index + 3);
            }
        }
        szRet = tempintegerpart + tempdecimalpart;
    }
    return szRet;
};
/**
 * 检查字符串是否为合法的金额
 *
 * @param {String}
 *          字符串
 * @return {bool} 是否为合法金额
 */
MoneyField.prototype.isMoney = function (s) {
    var isMoney = RegExp(/^[0-9]*\.?[0-9]{0,2}$/);
    return (isMoney.test(s));
};

/**
 * * 判断输入变量是否是浮点数 *
 *
 * @param {String}
 *          要检查的变量值 *
 * @return {bool} 是否为浮点数
 */
MoneyField.prototype.isFloat = function (s) {
    var isFloat = RegExp(/^([0-9]+(\.+))[0-9]+$/);
    return (isFloat.test(s));
};

/**
 * 为金额添加,分割符
 *
 * @param {String}
 *          要转换的金额字符串
 * @return {String} 转换后的金额字符串
 */
MoneyField.prototype.toCashWithComma = function (cash) {
    while (cash.charAt(0) == '0') {
        cash = cash.substr(1);
    }
    if (cash == "") return "";
    if (cash.substring(0, 1) == ".") cash = "0" + cash;
    if (cash.indexOf('.') == cash.length) cash = cash + "00";
    else if (cash.indexOf('.') == cash.length - 1) cash = cash + "0";
    else if (cash.indexOf('.') < 0) cash = cash + ".00";

    var dotIndex = cash.indexOf('.');
    var integerCash = cash.substring(0, dotIndex);
    var decimalCash = cash.substring(dotIndex);
    return this.addComma(integerCash) + decimalCash;
};

/**
 * 增加分隔符逗号 ,
 */
MoneyField.prototype.addComma = function (str) {
    if (str.length > 3) {
        var mod = str.length % 3;
        var output = (mod > 0 ? (str.substring(0, mod)) : '');
        for (var i = 0; i < Math.floor(str.length / 3); i++) {
            if ((mod == 0) && (i == 0))
                output += str.substring(mod + 3 * i, mod + 3 * i + 3);
            else
                output += ',' + str.substring(mod + 3 * i, mod + 3 * i + 3);
        }
        return (output);
    } else
        return str;
};
MoneyField.prototype.selectAll = function (obj) {
    if (obj.setSelectionRange) {
        obj.setSelectionRange(obj.value.length, obj.value.length);
    } else {
        var rtextRange = obj.createTextRange();
        rtextRange.moveStart('character', obj.value.length);
        rtextRange.collapse(true);
        rtextRange.select();
    }
};
MoneyField.prototype.nullValue = "0.00";

/**
 * 大写金额录入控件。 输入小写(数字)，边录入边转换为大写金额。 大小写金额双重显示。提交小写金额。
 *
 * @param parentForm
 * @param fieldObjectName
 * @param width
 * @param data
 * @returns
 */
function MoneyRMBField(parentForm, fieldObjectName, width, data) {
    MoneyField.call(this, parentForm, fieldObjectName, width, data);// �ù��췽���̳�
};
MoneyRMBField.prototype = new MoneyField();
MoneyRMBField.prototype.type = "moneyRMB-";
MoneyRMBField.prototype.ime_mode = "ime-mode:disabled;";
MoneyRMBField.prototype.moneyName = "";
MoneyRMBField.prototype.init = function () {
    if (this.data) {
        if (!this.data.maxLength) {
            this.data.maxLength = 12;
        }
        this.styleClass = 'inputCss';
        this.name = this.data.name;
        this.moneyName = "MoneyRMB-" + this.name;
        if (this.data.defaultValue) {
            if (!this.isMoney(this.data.defaultValue)) {
                this.defaultValue = this.replaceChineseCashToMoney(this.data.defaultValue);
            } else {
                this.defaultValue = this.data.defaultValue;
            }
            var obj = {
                value: this.defaultValue
            };
            this.replaceNumToMoney(obj);
            this.defaultValue = obj.value;
        } else {
            this.defaultValue = '0.00';
        }

        this.style = "text-align:right;width:" + this.width + "px;";
        this.chineseStyle = this.style + "display:block;height:30px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = this.data.readOnly ? " readonly='true' disabled='disabled'" : "";
        this.property = "";
        if (this.data.maxLength) {
            this.maxLength = this.data.maxLength;
            this.property += " maxLength='" + (this.data.maxLength + this.precision) + "'";
        }
        if (this.data.precision) {
            this.precision = this.data.precision;
        }
        this.isTip = this.data.isTip ? this.data.isTip : false;
        if (this.data.chineseStyle) {
            this.chineseStyle = this.data.chineseStyle;
        }

    }
    this.showMoney = '0.00';
};

MoneyRMBField.prototype.toHtmlStr = function () {
    var inputStr = "<input type='text' id='" + this.name + "' name='" + this.name + "' " + this.eventProcessStr() + " class='" + this.styleClass + "'" + this.property
        + this.readOnly + " style='" + this.style + "' value='" + this.defaultValue + "' />";
    this.fieldObjectNames.push(this.name);
    var viewDiv = "<div id='" + this.moneyName + "' style='" + this.chineseStyle + "'>";
    var chineseCash = this.replaceMoneyToChineseCash(this.defaultValue);
    viewDiv += chineseCash + "</div>";
    return viewDiv + inputStr;
};

MoneyRMBField.prototype.fillinValue = function (pojo) {
    if (pojo) {
        var value = pojo[this.name];
        this.fillinValue2(value);
    }
};
MoneyRMBField.prototype.fillinValue2 = function (value, mn, n) {
    if (!mn) {
        mn = this.moneyName;
    }
    if (!n) {
        n = this.name;
    }

    if (value != null && ('' + value).length > 0) {
        value = value + "";
        if (value.indexOf("元") == -1 && value.indexOf("角") == -1 && value.indexOf("分") == -1 && value.indexOf("圆") == -1) {
            value = this.replaceMoneyToChineseCash(value);
        }
        if (!this.isMoney(value)) {
            // 填充大写金额(汉字)
            document.getElementById(mn).innerHTML = value;

            var obj = {
                value: this.replaceChineseCashToMoney(value)
            };
            this.replaceNumToMoney(obj);
            // 填充小写金额
            document.getElementById(n).value = obj.value;
        } else {
            // 填充小写金额
            var obj = {
                value: value
            };
            this.replaceNumToMoney(obj);
            document.getElementById(n).value = obj.value;
            // 填充大写金额(汉字)
            document.getElementById(mn).innerHTML = this.replaceChineseCashToMoney(value);
        }
    }

};

MoneyRMBField.prototype.onKeyUp = function (obj, event) {
    //debugger
    if (obj.value == null || obj.value == '') {
        this.showMoney = '0.00';
    }
    this.replaceNumToMoney(obj);
    var chineseCash = this.replaceMoneyToChineseCash(obj.value);
    document.getElementById(this.moneyName).innerText = chineseCash;
};

MoneyRMBField.prototype.onKeyDown = function (obj, e) {

    var element1 = JBF.el(obj.id);
    if (!element1) {
        return false;
    }
    //debugger
    this.lengthControl(obj, e);
    this.keyCodeControl(obj, e);
};

MoneyRMBField.prototype.lengthControl = function (obj, e) {
    if (this.getNumberValue().length >= (this.maxLength + this.precision + 1)) {
        this.numberInvalid(obj, e);
        return;
    }

    var diff = obj.value.length - this.getNumberValue().length;// 分隔符‘,’个数
    var delta = 0;
    if (this.getNumberValue().indexOf('.') > 0) {
        delta = 1;
    }
    if (diff <= 5) {
        obj.maxLength = this.maxLength + this.precision + delta + diff;
    }
    // window.status = "diff=" + diff + " maxlength=" + obj.maxLength + "
    // value=" + this.getValue() + " obj.value=" + obj.value;
};

/**
 * ["零", "壹", "贰", "叁", "肆", "伍", "陆", "柒", "捌", "玖"]
 */
MoneyRMBField.prototype.Nums = new Array("零", "壹", "贰", "叁", "肆", "伍", "陆", "柒", "捌", "玖");
/**
 * ["", "拾", "佰", "仟"]
 */
MoneyRMBField.prototype.Digits = new Array("", "拾", "佰", "仟");
/**
 * ["", "万", "亿", "万亿", "仟兆"];
 */
MoneyRMBField.prototype.Units = new Array("", "万", "亿", "万亿", "仟兆");

/**
 * 将货币计数转换为中文大写金额表示
 *
 * @param {String}
 *            要转换的金额字符串
 * @return {String} 转换后的金额字符串
 */
MoneyRMBField.prototype.replaceMoneyToChineseCash = function (money) {
    if (money == null || money.length == 0 || money == '0.00') {
        return ' ';
    }
    var noCommaCash = this.removeComma(money);
    if (parseFloat(money) == 0) {
        return '';
    }
    if (!this.isFloat(noCommaCash)) {
        return this.convertIntegerToChineseCash(noCommaCash);
    }
    var dotIndex = noCommaCash.indexOf('.');
    var integerCash = noCommaCash.substring(0, dotIndex);
    var decimalCash = noCommaCash.substring(dotIndex + 1);
    if (parseFloat(noCommaCash) < 0.1) {
        return this.convertDecimalToChineseCash(decimalCash).substring(1);
    }
    return this.convertIntegerToChineseCash(integerCash) + this.convertDecimalToChineseCash(decimalCash);
};

/**
 * 将大写金额转换成小写金额
 */
MoneyRMBField.prototype.replaceChineseCashToMoney = function (chineseCash) {
    if (chineseCash == null || chineseCash == '') {
        return '0.00';
    }
    var p = 0;
    var money = '';
    var yuanIndex = chineseCash.indexOf('圆');
    if (yuanIndex < 0) {
        yuanIndex = chineseCash.indexOf('元');
    }
    var yuanCash = '';
    if (yuanIndex > 0) {// 有整数
        yuanCash = chineseCash.substring(0, yuanIndex);
        p = yuanIndex;
        p++;
        // alert('圆：'+yuanCash);
        money = money + '' + this.convertYuanToMoney(yuanCash);
    } else {
        money = '0';
        p = 0;
    }
    // alert("money:"+money);
    var jiaoIndex = chineseCash.indexOf('角');
    var jiaoCash = '';
    if (jiaoIndex > 0) {
        jiaoCash = chineseCash.substring(p, jiaoIndex);
        p = jiaoIndex;
        p++;
        // alert('角：'+jiaoCash);
        money = money + '.' + this.convertBigToSmall(jiaoCash);
    } else {
        if (p > 0) {
            p++;
        }
        money = money + '.0';
    }
    // alert("money:"+money);
    var fenIndex = chineseCash.indexOf('分');
    var fenCash = '';
    if (fenIndex > 0) {
        fenCash = chineseCash.substring(p, fenIndex);
        // alert('分：'+fenCash);
        money = money + '' + this.convertBigToSmall(fenCash);
    } else {
        money = money + '0';
    }
    // alert("money:"+money);
    return money;
};
/**
 * 将大写金额整数部分（XX元部分）转换成小写金额
 */
MoneyRMBField.prototype.convertYuanToMoney = function (yuanCash) {
    if (yuanCash == null || yuanCash == '')
        return '';
    var p = 0;
    var unitsIndex = 0;
    var tempCash = '';
    var money = '';
    var hasUnits = false;
    for (var i = this.Units.length - 1; i > 0; i--) {
        unitsIndex = yuanCash.indexOf(this.Units[i]);
        if (unitsIndex > 0) {
            hasUnits = true;
            tempCash = yuanCash.substring(p, unitsIndex);
            money = money + '' + this.convertYuanDigitsToMoney(tempCash);
            p = unitsIndex;
            p = p + this.Units[i].length;
        } else if (hasUnits) {
            money = money + '0000';
        }
    }
    tempCash = yuanCash.substring(p, yuanCash.length);
    if (tempCash || tempCash.length > 0) {
        money = money + '' + this.convertYuanDigitsToMoney(tempCash);
    } else {
        money = money + '0000';
    }
    return money;
};

/**
 * 将无单位(["", "万", "亿", "万亿", "仟兆"])的大写转换为小写
 */
MoneyRMBField.prototype.convertYuanDigitsToMoney = function (yuanCash) {
    if (yuanCash == null || yuanCash == '')
        return '';
    var p = 0;
    var digitsIndex = 0;
    var tempCash = '';
    var money = '';
    for (var i = this.Digits.length - 1; i > 0; i--) {// 1011
        digitsIndex = yuanCash.indexOf(this.Digits[i]);
        if (digitsIndex > 0) {
            tempCash = yuanCash.substring(p, digitsIndex);
            if (tempCash.length > 1) {
                p++;
                tempCash = yuanCash.substring(p, digitsIndex);
            }
            money = money + '' + this.convertBigToSmall(tempCash);
            p = digitsIndex;
            p = p + this.Digits[i].length;
        } else {
            // if( p > 0 )
            // {
            money = money + '0';
            // }
        }
    }
    tempCash = yuanCash.substring(p, yuanCash.length);
    if (tempCash.length > 1) {
        p++;
        tempCash = yuanCash.substring(p, yuanCash.length);
    } else if (tempCash.length == 0) {
        money = money + '0';
    }
    money = money + '' + this.convertBigToSmall(tempCash);
    return money;
};

MoneyRMBField.prototype.convertBigToSmall = function (jiaoOrFenCash) {
    if (jiaoOrFenCash == null || jiaoOrFenCash == '')
        return '';
    for (var i = 0; i < this.Nums.length; i++) {
        if (jiaoOrFenCash == this.Nums[i]) {
            return i;
        }
    }
};

/**
 * 将整数部分转换成人民币大写金额
 */
MoneyRMBField.prototype.convertIntegerToChineseCash = function (cash) {
    if (cash == "0")
        return "";
    var S = ""; // 返回值
    var p = 0; // 字符位置指针
    var m = cash.length % 4; // 取模 // 四位一组得到组数
    var k = (m > 0 ? Math.floor(cash.length / 4) + 1 : Math.floor(cash.length / 4));
    // 外层循环在所有组中循环
    // 从左到右 高位到低位 四位一组 逐组处理
    // 每组最后加上一个单位: "[万亿]","[亿]","[万]"
    for (var i = k; i > 0; i--) {
        var L = 4;
        if (i == k && m != 0) {
            L = m;
        }
        // 得到一组四位数 最高位组有可能不足四位
        var s = cash.substring(p, p + L);
        var l = s.length;
        // 内层循环在该组中的每一位数上循环 从左到右 高位到低位
        for (var j = 0; j < l; j++) {
            var n = parseInt(s.substring(j, j + 1));
            if (n == 0) {
                if ((j < l - 1) && (parseInt(s.substring(j + 1, j + 1 + 1)) > 0) // 后一位(右低)
                    && S.substring(S.length - 1, S.length) != this.Nums[n]) {
                    S += this.Nums[n];
                }
            } else {
                // if (!(n == 1 && (S.substring(S.length-1,S.length) ==
                // this.Nums[0] | S.length == 0) && j == l - 2))
                // {
                S += this.Nums[n];
                // }
                S += this.Digits[l - j - 1];
            }
        }
        p += L; // 每组最后加上一个单位: [万],[亿] 等
        if (i < k)// 不是最高位的一组
        {
            if (parseInt(s) != 0) {
                // 如果所有 4 位不全是 0 则加上单位 [万],[亿] 等
                S += this.Units[i - 1];
            }
        } else {
            // 处理最高位的一组,最后必须加上单位
            S += this.Units[i - 1];
        }
    }
    // alert(S);
    return S + "圆";
};

/**
 * 将小数部分转换成 角、分
 */
MoneyRMBField.prototype.convertDecimalToChineseCash = function (cash) {
    var returnCash = "";
    if (cash == "00")
        returnCash = "整";
    else {
        for (var i = 0; i < cash.length; i++) {
            if (i >= 2)
                break;
            var intValue = parseInt(cash.charAt(i));
            switch (i) {
                case 0:
                    if (intValue != 0)
                        returnCash += this.Nums[intValue] + "角";
                    else
                        returnCash += "零";
                    break;
                case 1:
                    if (intValue != 0)
                        returnCash += this.Nums[intValue] + "分";
                    break;
                default:
                    break;
            }
        }
    }
    return returnCash;
};

/**
 * 移除分隔符逗号,
 */
MoneyRMBField.prototype.removeComma = function (str) {
    return str.replace(new RegExp('\,', ["g"]), '');
};

MoneyRMBField.prototype.getValue = function () {
    return document.getElementById(this.moneyName).innerText;
};

MoneyRMBField.prototype.getFloatValue = function () {
    return parseFloat(this.getNumberValue());
};
MoneyRMBField.prototype.getNumberValue = function () {
    var value = JBF.el(this.name).value;
    while (value.indexOf(",") > 0) {
        value = value.replace(",", "");
    }
    return value;
};

MoneyRMBField.prototype.reset = function () {
    JBF.el(this.name).value = this.nullValue;
    document.getElementById(this.moneyName).innerText = '';
};

function NumberField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);//�ù��췽���̳�
};
NumberField.prototype = new AbstractField();
NumberField.prototype.type = "text";
NumberField.prototype.onKeyUp = function (obj, ev) {
    JBF.replaceNum(obj);
};

﻿function OptionField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);//用构造方法继承
}

OptionField.prototype = new AbstractField();
OptionField.prototype.type = "option";
OptionField.prototype.init = function () {
    if (this.data) {
        this.styleClass = '';
        this.name = this.data.name;
        this.defaultValue = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(this.defaultValue, this.defaultValue, "");
        this.options = this.loadObjValues();
        this.style = "width:" + (this.width + 3) + "px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = JBF.setObjValue(this.data.readOnly, " readonly='true' disabled='disabled'");
        this.property = "";
    }
};
OptionField.prototype.toHtml = function () {
    this.options = this.loadObjValues();
    var selectStr = "";
    this.fieldObjectNames.push(this.name);
    var changeMethod = " onchange= ";
    if (this.data.changeMethod) {
        changeMethod += this.data.changeMethod + "(this);";
    }
    var changeColor = "";
    if (this.formType) {
        changeColor = "changeColor='true'";
    }
    selectStr += "<select id='" + this.name + "' name='" + this.name + "' " + this.eventProcessStr() + " style='" + this.style + "'" + changeColor + changeMethod + ">";
    selectStr += this.createOptionStr();
    selectStr += "</select>";
    return selectStr;

};
OptionField.prototype.toLabelStr = function (pojo) {
    this.options = this.loadObjValues();
    var names = this.name.split("+");
    var valueTexts = [];
    if (names && names.length > 0 && this.options) {
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            var value = pojo[name];
            for (var i = 0; i < this.options.length; i++) {
                var option = this.options[i];
                if (option["value"] == value) {
                    valueTexts.push(option["showText"]);
                    break;
                }
            }
        }
    }
    return "<div class='fillinDiv' id='" + this.name + "' name='" + this.name + "' style='" + this.style + "'>" + valueTexts.join("-") + "</div>";
};
OptionField.prototype.fillinValue = function (pojo) {
    if (pojo) {
        var value = pojo[this.name];
        var selectObj = JBF.el(this.name);
        for (var i = 0; i < selectObj.options.length; i++) {
            var option = selectObj.options[i];
            if (value == option.value) {
                option.selected = "true";
            }
        }
        this.linkageFillin(value);
    }
};
OptionField.prototype.createOptionStr = function () {
    var optionStr = "";
    if (this.options) {
        for (var i = 0; i < this.options.length; i++) {
            var option = this.options[i];
            var value = JBF.setObjValue(option.value, option.value);
            var showText = JBF.setObjValue(option.showText, option.showText);
            var checked = "";
            if (((option.checked && option.checked == "true") || (this.defaultValue === value))) {
                checked = " selected ";
                selectBit = true;
            }
            optionStr += "<option value='" + value + "' " + checked + ">" + showText + "</option>";
        }
    }
    return optionStr;
};
OptionField.prototype.onChange = function (obj, ev) {
    var selectObj = JBF.el(this.name);
    this.linkageFillin(selectObj.value);
};
OptionField.prototype.linkageFillin = function (value) {//用来操作用户是否进行级联操作
    if (this.data.linkage) {//如果有级联操作，则进行级联操作
        ;
        var linkFun = function (linkageObj, that) {
            if (linkageObj.url) {//当级联更改时，通过url来填充值
                that.linkageFillinDataByUrl(linkageObj, that, value);
            } else if (linkageObj.data) {//当级联更改时，直接填充值
                that.linkageFillinDataByData(linkageObj, that, value);
            } else if (linkageObj.isChangeType) {//当级联时，级联对像的类型改变，并且重绘
                that.linkageChangeType(linkageObj, that, value);
            }
        };
        var linkageObj = this.data.linkage;
        if (typeof (linkageObj) == "object" && linkageObj.constructor == Array) {
            for (var i = 0; i < linkageObj.length; i++) {
                var linkage = linkageObj[i];
                linkFun(linkage, this);
            }
        } else {
            linkFun(linkageObj, this);
        }
    }
};
OptionField.prototype.linkageReDrew = function (optionDatas) {
    if (optionDatas && optionDatas.length > 0) {
        var selectObj = JBF.el(this.name);
        selectObj.options.length = 0;
        for (var i = 0; i < optionDatas.length; i++) {
            var optionData = optionDatas[i];
            var option = new Option(optionData.showText, optionData.value);
            selectObj.options.add(option);
        }
    }
};
/**
 *用来进行校验
 **/
OptionField.prototype.checkValidate = function (obj) {
    if (this.data.notNull) {
        var value = JBF.el(this.name).value;
        if (value.length > 0) {
            return true;
        }
        this.checkText = "请选择合适选项";
        return false;
    }
    return true;
};
OptionField.prototype.getValue = function () {
    var selectObj = JBF.el(this.name);
    return selectObj.options[selectObj.selectedIndex].value;
};
OptionField.prototype.setValue = function (value) {
    var selectObj = JBF.el(this.name);
    for (var i = 0; i < selectObj.length; i++) {
        if (selectObj.options[i].value == value) {
            selectObj.options[i].selected = "true";
        }
    }
};

OptionField.prototype.getValueStr = function () {
    var selectObj = JBF.el(this.name);
    var index = selectObj.selectedIndex;
    if (index >= 0) {
        return "&" + this.name + "=" + encodeURIComponent(this.getValue());
    }
    return "&" + this.name + "=";
};
OptionField.prototype.setOptions = function (options) {
    this.loadObjValues(options);
};

/**
 * 录入仲裁控件
 */
function ArbitrateField(parentForm, fieldObjectName, width, data) {
    CheckboxField.call(this, parentForm, fieldObjectName, width, data);// 用构造方法继承
}

ArbitrateField.prototype = new CheckboxField();
ArbitrateField.prototype.type = "radio";
ArbitrateField.prototype.other = {};
ArbitrateField.prototype.labelTextWidth = 180;

ArbitrateField.prototype.init = function () {
    if (this.data) {
        this.styleClass = 'showSpan';
        this.name = this.data.name;
        this.defaultValue = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(this.defaultValue,
            this.defaultValue, "");
        this.style = "width:" + this.width + "px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = JBF.setObjValue(this.data.readOnly,
            " readonly='true' disabled='disabled'");
        this.property = "";
        this.spanName = this.name + "_Arbitrate";
        this.checkObjName = this.name + "_Arbitrate";
        this.otherData = this.data.other;
        this.otherData.style = "";// "border: 1px solid #9cb3e2;";
        this.otherName = this.name + "-other";
        this.otherData.name = this.otherName;
        this.options = this.data.options;
    }
};

ArbitrateField.prototype.toHtmlStr = function () {
    this.fieldObjectNames.push(this.spanName);
    var style = "";
    if (this.data.style) {
        style += (this.style + ";");
    }
    var inputStr = "<span "
        + this.eventProcessStr()
        + " class='showSpan'"
        + "onclick='if(window.event){window.event.cancelBubble=true;}' id='"
        + this.spanName + "' name='" + this.spanName + "' style='width:"
        + this.opWidth + "px;'>";
    inputStr += this.createChecks();
    inputStr += "</span>";
    return inputStr;
};

ArbitrateField.prototype.createChecks = function () {
    var inputStr = "";

    var linkage = JBF.setObjValue(this.data.linkage, this.data.linkage);
    var labelWidth = this.parentForm.valueWidth;
    if (this.options) {
        for (var i = 0; i < this.options.length; i++) {
            var option = this.options[i];
            var value = JBF.setObjValue(option.value, option.value);
            var showText = JBF.setObjValue(option.showText, option.showText);
            var showValue = this.translate(value);
            var exceptionType = option.exceptionType;
            var checked = "";
            if ((option.checked && option.checked == "true")
                || this.checkDefaultValue(value, this.defaultValue)) {
                checked = " checked='checked'";
            }
            inputStr += "<div class='ArbitrateField-label' style='width:"
                + labelWidth + "px;'>";
            inputStr += "<span class='ArbitrateField-label-text' name='ArbitrateField-label-text'";
            inputStr += " style='width:" + this.labelTextWidth + "px;'>";
            inputStr += "<input " + checked + " name='" + this.name + "' id='"
                + (this.name + i);
            inputStr += "' type='" + this.type + "' value='" + value + "'"
                + " onblur='" + this.fieldObjectName
                + ".radioOnBlur(this);'";
            inputStr += " onfocus='" + this.fieldObjectName
                + ".radioOnFocus(this);' />" + showText + "</span>";
            inputStr += "<span class='ArbitrateField-label-value' name='ArbitrateField-label-value'";
            inputStr += " style='width:"
                + (labelWidth - this.labelTextWidth - 5) + "px;'>"
                + showValue + "</span>";

            if (this.data.exceptionTypes) {
                for (var jjj = 0; jjj < this.data.exceptionTypes.length; jjj++) {
                    if (this.data.exceptionTypes[jjj].value == exceptionType) {
                        inputStr += "<span class='exception' name='exception' style='padding-left:30px;'>"
                            + this.data.exceptionTypes[jjj].showText
                            + "</span>";
                    }
                }
            }
            inputStr += "</div>";
        }
        inputStr += "<div><span><input name='" + this.name + "' id='"
            + (this.name + this.options.length);
        inputStr += "' type='" + this.type + "' ";
        inputStr += " onblur='JBF.setBlurStyle(this);' onfocus='JBF.setFocusStyle(this);'";
        inputStr += " onclick='" + this.fieldObjectName
            + ".clickOther(this);'/>";
        inputStr += "" + (this.options.length + 1) + ". 重填 ：</span><span>"
            + this.otherToHtmlStr() + "</span></div>";
    }
    return inputStr;
};
ArbitrateField.prototype.otherToHtmlStr = function () {
    var type = this.otherData.type;
    var opObjStr = type.substring(0, 1).toUpperCase()
        + type.substring(1, type.length) + "Field";
    var OpObj = JBF.strToObj(opObjStr);
    this.other = new OpObj(this.parentForm, this.fieldObjectName + ".other",
        this.width, this.otherData);
    this.other.parent = this;
    this.other.onKeyDownNextOrPrevious = this.otherOnKeyDownNextOrPrevious;
    this.other.validate = this.other.parent.validate;
    return this.other.toHtml();
};
ArbitrateField.prototype.radioOnFocus = function (obj) {
    // JBF.setFocusStyle(obj);
    this.focus();
};
ArbitrateField.prototype.radioOnBlur = function (obj) {
    JBF.setBlurStyle(obj);
};
ArbitrateField.prototype.translate = function (value) {
    if (value.indexOf(",") >= 0)
        return this.translateCheck(value);
    var s = value;
    var otherOptions = this.otherData.options;
    if (otherOptions && otherOptions.length > 0) {
        for (var i = 0; i < otherOptions.length; i++) {
            if (otherOptions[i].value == s) {
                s = otherOptions[i].showText;
                break;
            }
        }
    }
    return s;
};
ArbitrateField.prototype.translateCheck = function (value) {
    var values = value.split(",");
    var s = "";
    var otherOptions = this.otherData.options;

    if (otherOptions && otherOptions.length > 0) {
        for (var i = 0; i < otherOptions.length; i++) {
            for (var j = 0; j < values.length; j++) {
                if (otherOptions[i].value == values[j]) {
                    if (s != "") {
                        s += ",";
                    }
                    s += (i + 1);
                }
            }
        }
    } else {
        return value;
    }
    return s;
};
ArbitrateField.prototype.getValueStr = function () {

    return "&" + this.name + "=" + encodeURIComponent(this.getValue());
};

ArbitrateField.prototype.getValue = function () {
    var checks = JBF.elByName(this.name);
    for (var i = 0; i < checks.length; i++) {
        if (checks[i].checked) {
            if (i == checks.length - 1) {
                checks[i].value = this.other.getValue();
            }
            return checks[i].value;
        }
    }
    return this.nullValue;
};

ArbitrateField.prototype.onKeyUp = function (obj, ev) {
    var keyCode = JBF.getKeyValue(ev);
    checks = JBF.elByName(this.data.name);
    if (ev.altKey && keyCode <= KeyTool.KEY_9 && keyCode >= KeyTool.KEY_1) {
        for (var i = 1; i < 10; i++) {
            var exceptionType = this.data.name + "_exceptionType_" + (i);
            exceptionType = document.getElementById(exceptionType);
            if (exceptionType) {
                if (exceptionType.style.display != "none") {
                    exceptionType.style.display = "none";
                }
            }
        }

        var exceptionType = this.data.name + "_exceptionType_"
            + (keyCode - KeyTool.KEY_1 + 1);
        exceptionType = document.getElementById(exceptionType);
        if (exceptionType) {
            if (exceptionType.style.display == "none") {
                exceptionType.style.display = "block";
            } else {
                exceptionType.style.display = "none";
            }
        }
    } else if (ev.altKey && keyCode <= KeyTool.KEY_s9
        && keyCode >= KeyTool.KEY_s1) {
        for (var i = 1; i < 10; i++) {
            var exceptionType = this.data.name + "_exceptionType_" + (i);
            exceptionType = document.getElementById(exceptionType);
            if (exceptionType) {
                if (exceptionType.style.display != "none") {
                    exceptionType.style.display = "none";
                }
            }
        }

        var exceptionType = this.data.name + "_exceptionType_"
            + (keyCode - KeyTool.KEY_s1 + 1);
        exceptionType = document.getElementById(exceptionType);
        if (exceptionType) {
            if (exceptionType.style.display == "none") {
                exceptionType.style.display = "block";
            } else {
                exceptionType.style.display = "none";
            }
        }
    } else if (checks
        && ((keyCode >= KeyTool.KEY_0 && keyCode <= KeyTool.KEY_9) || (keyCode >= KeyTool.KEY_s1 && keyCode <= KeyTool.KEY_s9))) {
        var index = 10000;
        if (keyCode >= KeyTool.KEY_0 && keyCode <= KeyTool.KEY_9) {
            index = keyCode - KeyTool.KEY_1;
        } else if (keyCode >= KeyTool.KEY_s1 && keyCode <= KeyTool.KEY_s9) {

            index = keyCode - KeyTool.KEY_s1;
        }
        if (this.isFocus) {
            if (index < 0) {// 清空所有选 项（如果按是0则清空所有数据）
                for (var i = 0; i < checks.length; i++) {
                    checks[i].checked = "";
                }
            } else if (index < checks.length) {// （如果是数字则选中相应的选项按钮）
                checks[index].checked = "checked";
                if (index == checks.length - 1) {
                    this.onCheckedOther();
                } else {
                    this.other.reset();
                    this.focus();
                }
            }
        }
    }
};

ArbitrateField.prototype.onCheckedOther = function () {
    this.other.focus();
};

ArbitrateField.prototype.clickOther = function (obj) {
    if (obj.checked) {
        this.onCheckedOther();
    }
};

ArbitrateField.prototype.otherOnKeyDownNextOrPrevious = function (obj, event) {
    var ev = JBF.getEvent(event);
    var keyCode = JBF.getKeyValue(ev);
    var element = JBF.getEventTarget(ev);
    var tabName = element.name;
    if (keyCode == 13 && ev.ctrlKey) {// Ctrl+回车
        this.parent.focus();
    } else if (keyCode == 13) {// 回车
        var parentName = tabName.substring(0, tabName.length - 6)
            + "_Arbitrate";
        this.parentForm.skipNextObj(ev, parentName);
    }
};

ArbitrateField.prototype.checkValidate = function () {
    this.pageElement = this.el();
    if (this.data.notNull) {
        this.notNullValidate(this.getValue());
    }
    return true;
};

function PasswordField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);
};
PasswordField.prototype = new AbstractField();
PasswordField.prototype.type = "password";
PasswordField.prototype.init = function () {
    if (this.data) {
        this.styleClass = 'inputCss';
        this.name = this.data.name;
        var value = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(value, value, "");
        this.style = "width:" + this.width + "px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = this.data.readOnly ? " readonly='true' disabled='disabled'" : "";
        this.property = "";
        if (this.data.maxLength) {
            this.property += " maxLength='" + this.data.maxLength + "'";
        }
        this.isTip = this.data.isTip ? this.data.isTip : false;
    }
};
PasswordField.prototype.toHtmlStr = function () {
    var inputStr = "<input type='password' id='" + this.name + "' name='" + this.name + "' " + this.eventProcessStr() + " class='" + this.styleClass + "'"
        + this.property + this.readOnly + " style='" + this.style + "' value='" + this.defaultValue + "'/>";
    this.fieldObjectNames.push(this.name);
    return inputStr;
};
﻿function RadioField(parentForm, fieldObjectName, width, data) {
    CheckboxField.call(this, parentForm, fieldObjectName, width, data);//用构造方法继承
}

RadioField.prototype = new CheckboxField();
RadioField.prototype.type = "radio";
RadioField.prototype.getValue = function () {
    var checks = JBF.elByName(this.name);
    for (var i = 0; i < checks.length; i++) {
        if (checks[i].checked) {
            return checks[i].value;
        }
    }
    return this.nullValue;
};
RadioField.prototype.fillinValue = function (pojo) {
    if (pojo) {
        var value = pojo[this.name];
        var checks = JBF.elByName(this.name);
        for (var i = 0; i < checks.length; i++) {
            if (checks[i].value == value) {
                checks[i].checked = "true";
                break;
            }
        }
    }
};

function FileField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);//�ù��췽���̳�
};
FileField.prototype = new AbstractField();
FileField.prototype.initData = function () {
    this.upLoadObj = this.data.upLoadObj;
};
FileField.prototype.toHtmlStr = function () {
    var fileInput = "<input type='hidden' name='" + this.name + "' id='" + this.name + "'>";
    return fileInput + "<div style='width:" + (this.opWidth - 20) + "px;' class='fieldset flash' id='fsUploadProgress'>" +
        "<span class='legend'>上传列表</span></div><div>" +
        "<div><div><span id='spanButtonPlaceHolder'></span></div>" +
        "<input id='btnCancel' type='button' value='取消上传' onclick='" + this.upLoadObj + ".cancelQueue();' disabled='disabled' style='margin-left: 2px; height:20px; font-size: 8pt;' /></div></div>";

};

/**
 * 通用的提示录入控件,通过修改keyword.type,parentTable可以改变查询的表.returnFlag=name则返回name,否则返回id
 *
 * @param parentForm
 * @param fieldObjectName
 * @param width
 * @param data
 * @returns
 */
function BankNoNameField(parentForm, fieldObjectName, width, data) {
    this.keyword = {
        type: 'BankNoName',
        value: '',
        size: 5,
        results: []
    };
    if (data && data.parentTable) {
        this.keyword.type = data.parentTable;
    }
    if (data && data.extendsField) {
        this.keyword.extendsField = data.extendsField;
    }
    TextField.call(this, parentForm, fieldObjectName, width, data);// �ù��췽���̳�
};
BankNoNameField.prototype = new TextField();
BankNoNameField.prototype.type = "fullTextIndex";
BankNoNameField.prototype.init = function () {
    this.curLiIndex = -1;
    this.inDivFlag = false;
    this.liSize = 0;
    this.latelyValue = '';
    this.url = 'fullTextIndexAction!search.do';
    if (this.data) {

        if (this.data.url) {
            this.url = this.data.url;
        }
        this.styleClass = 'inputCss';
        this.name = this.data.name;
        var value = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(value, value, "");
        this.style = "width:" + this.width + "px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = this.data.readOnly ? " readonly='true' disabled='disabled'" : "";
        this.property = "";
        this.viewText = "";
        if (this.data.maxLength) {
            this.property += " maxLength='" + this.data.maxLength + "'";
        }
        this.isTip = this.data.isTip ? this.data.isTip : false;
        this.liMaxSize = this.data.liMaxSize ? this.data.liMaxSize : 5;
        if (this.defaultValue && this.defaultValue.length > 0) {
            if (this.keyword) {

                this.keyword.value = this.defaultValue;
                this.load(this.defaultValue, false);
                var defaultResult = this.keyword.results[0];
                if (defaultResult && defaultResult.name) {
                    this.viewText = defaultResult.name;
                    this.curLiIndex = 0;
                }
            }
        }
    }
    this.viewName = "FTIV-" + this.name;
};
BankNoNameField.prototype.afterInputHtml = function () {
    return "";
};
BankNoNameField.prototype.toHtmlStr = function () {
    var inputStr = "<input type='text' id='FTIV-" + this.name + "' name='FTIV-" + this.name + "' ";
    inputStr += this.eventProcessStr() + " class='" + this.styleClass + "'" + this.property + this.readOnly;
    inputStr += " style='" + this.style + "' value='" + (this.data.viewText ? this.data.viewText : this.viewText) + "'/>";
    inputStr += this.afterInputHtml();
    var hiddenStr = "<input type='hidden' id='" + this.name + "' name='" + this.name + "' value='" + this.defaultValue + "' />";
    var viewDiv = "<div id='FTI-DIV-" + this.name + "' ";
    viewDiv += " onmouseover='" + this.fieldObjectName + ".mousein(this)' ";
    viewDiv += " onmouseout='" + this.fieldObjectName + ".mouseout(this)' ";
    viewDiv += " class='fullTextIndex-css' style='display:none;'>";
    viewDiv += "<ul id='FTI-UL-" + this.name + "' >";
    for (var i = 0; i < this.keyword.results.length; i++) {
        viewDiv += this.createLi(this.keyword.results[i], i);
    }
    viewDiv += "</ul>";
    viewDiv += "</div>";

    this.fieldObjectNames.push(this.viewName);
    return "<div>" + inputStr + hiddenStr + "</div>" + viewDiv;
};
BankNoNameField.prototype.getValue = function () {
    //返回名称
    if (this.data && this.data.returnFlag == "name") {
        return JBF.el("FTIV-" + this.name).value.replace(/(^\s*)|(\s*$)/g, "");
    }
    //返回ID
    return JBF.el(this.name).value;
};
BankNoNameField.prototype.focus = function () {
    JBF.el(this.viewName).focus();
};
BankNoNameField.prototype.mousein = function (obj) {
    this.inDivFlag = true;
};
BankNoNameField.prototype.mouseout = function (obj) {
    this.inDivFlag = false;
};
BankNoNameField.prototype.onFocus = function (obj, ev) {
    this.load(obj.value, true);
    this.expand();
};
BankNoNameField.prototype.onBlur = function (obj, ev) {
    if (!this.inDivFlag) {
        this.collapse();
    }
};
BankNoNameField.prototype.expand = function () {
    var viewDiv = document.getElementById("FTI-DIV-" + this.name);
    var objDiv = document.getElementById(this.viewName);
    viewDiv.style.display = "";
    viewDiv.style.width = objDiv.style.width;
    viewDiv.style.top = JBF.getAbsY(objDiv) - JBF.getScrollTop(objDiv) + objDiv.clientHeight + "px";
    viewDiv.style.left = JBF.getAbsX(objDiv);
};
BankNoNameField.prototype.collapse = function () {
    var viewDiv = document.getElementById("FTI-DIV-" + this.name);
    viewDiv.style.display = "none";
};
BankNoNameField.prototype.createLi = function (result, liIndex) {
    if (liIndex >= this.liMaxSize) {
        return "";
    }
    var value = result.id;
    var text = result.highlightOfname;
    var liobj = "<li";
    liobj += " value='" + value + "'";
    if (result.extendsField) {
        for (var key in result.extendsField) {
            liobj += " " + key + "='" + ifnull(result.extendsField[key]) + "'";
        }
    }
    liobj += " id='li-" + this.name + "-" + liIndex + "'";
    liobj += " onclick='" + this.fieldObjectName + ".lionclick(\"" + this.name + "\",this)'";
    liobj += " onmouseover='" + this.fieldObjectName + ".lionmouseover(this)'";
    liobj += " onmouseout='" + this.fieldObjectName + ".lionmouseout(this)'>";
    liobj += text + "</li>";
    return liobj;
};

function ifnull(s) {
    if (!s) {
        return "";
    }
    if (s == "null") {
        return "";
    }
    return s;
}

BankNoNameField.prototype.onKeyUp = function (obj, ev) {
    window.status = 'latelyValue=' + this.latelyValue + ' value=' + obj.value;
    this.load(obj.value, true);
};
BankNoNameField.prototype.onKeyDown = function (obj, ev) {

    var element1 = JBF.el(obj.id);
    if (!element1) {
        return false;
    }
    if (KeyTool.KEY_UP == ev.keyCode) {
        this.lionmouseout(this.ligetCurLiElement());
        this.lionmouseover(this.lifrontLi());
    } else if (KeyTool.KEY_DOWN == ev.keyCode) {
        this.lionmouseout(this.ligetCurLiElement());
        this.lionmouseover(this.linextLi());
    } else if (KeyTool.KEY_ENTER == ev.keyCode && ev.ctrlKey) {
        this.parentForm.skipPreviousObj(ev, this.viewName);
    } else if (KeyTool.KEY_ENTER == ev.keyCode) {
        curLiElement = this.ligetCurLiElement();
        if (curLiElement) {
            this.lionclick(this.name, curLiElement);
        } else {
            if (!this.checkValidate()) {

                this.showTipPanel();
            } else {
                this.hideTipPanel();

                this.parentForm.skipNextObj(ev, this.viewName);
            }
        }
    }
};
BankNoNameField.prototype.onKeyDownNextOrPrevious = function (obj, event) {
    var ev = JBF.getEvent(event);
    var keyCode = JBF.getKeyValue(ev);
    var element = JBF.getEventTarget(ev);
    var tabName = element.name || element.id;
    if (ev.altKey && keyCode <= KeyTool.KEY_9 && keyCode >= KeyTool.KEY_1) {
        for (var i = 1; i < 10; i++) {
            var exceptionType = this.data.name + "_exceptionType_" + (i);
            exceptionType = document.getElementById(exceptionType);
            if (exceptionType) {
                if (exceptionType.style.display != "none") {
                    exceptionType.style.display = "none";
                }
            }
        }

        var exceptionType = this.data.name + "_exceptionType_" + (keyCode - KeyTool.KEY_1 + 1);
        exceptionType = document.getElementById(exceptionType);
        if (exceptionType) {
            if (exceptionType.style.display == "none") {
                exceptionType.style.display = "block";
            } else {
                exceptionType.style.display = "none";
            }
        }
    }
};

/**
 * 加载数据
 *
 * @param partText
 *            查询文本(关键字)
 * @param isInitFTIView
 *            是否初始化下拉选项
 */
BankNoNameField.prototype.load = function (partText, isInitFTIView) {
    if (this.latelyValue == partText) {
        return;
    }
    this.latelyValue = partText;
    this.curLiIndex = 0;
    this.liSize = 0;
    this.keyword.value = partText;
    this.keyword.results = [];
    this.keyword.size = this.liMaxSize;
    var params = {
        keyword: this.keyword
    };
    var myself = this;
    JBF.ajax(this.url, params, function (msg) {
        //测试代码:
        if (window.location.href.indexOf("testDetail.html") != -1) {
            if (!msg) {
                msg = new Object();
                msg.keyword = new Object();
                if (myself.keyword.type == 'Address') {
                    msg.keyword.extendsField = "province,city,area";
                    msg.keyword.results = [{
                        id: '1',
                        highlightOfname: '北京市海淀区',
                        extendsField: {province: '北京', city: '北京', area: '海淀'}
                    }, {id: '2', highlightOfname: '河北省承德市', extendsField: {province: '河北', city: '承德'}}];
                } else {
                    msg.keyword.results = [{id: '1', highlightOfname: '农业银行'}, {id: '2', highlightOfname: '工商行'}];
                }
            }
        }
        //测试代码结束
        if (!msg.keyword.results) {
            msg.keyword.results = [];
        }
        myself.keyword = msg.keyword;
        myself.liSize = msg.keyword.results.length;
        if (isInitFTIView) {
            myself.initFTIView();
        }
    }, null, true);

};
BankNoNameField.prototype.initFTIView = function () {
    var viewUL = document.getElementById("FTI-UL-" + this.name);
    viewUL.innerHTML = '';
    for (var i = 0; i < this.keyword.results.length; i++) {
        viewUL.innerHTML += this.createLi(this.keyword.results[i], i);
    }
    this.lionmouseover(this.ligetCurLiElement());
    this.expand();
};

function ifnull1(s) {
    if (!s) {
        return "";
    }
    if (s == "null") {
        return "";
    }
    return s;
}

BankNoNameField.prototype.lionclick = function (hiddenObjName, liObj) {
    this.latelyValue = liObj.innerText || liObj.innerHTML;
    document.getElementById(hiddenObjName).value = liObj.value;
    document.getElementById('FTIV-' + hiddenObjName).value = liObj.innerText || liObj.innerHTML;
    document.getElementById('FTI-DIV-' + hiddenObjName).style.display = "none";
    var ext = this.data.extendsField || this.keyword.extendsField;
    if (ext) {
        var ss = ext.split(",");
        for (var i = 0; i < ss.length; i++) {
            var eee = document.getElementById(ss[i] + '-' + hiddenObjName);
            if (eee) {
                eee.value = ifnull1(liObj.getAttribute(ss[i]));
            }
        }
    }
    try {
        this.dragChild(liObj.value, this.latelyValue);
    } catch (e) {
    }


    for (var i = 1; i < 10; i++) {
        var exceptionType = this.data.name + "_exceptionType_" + (i);
        exceptionType = document.getElementById(exceptionType);
        if (exceptionType) {
            if (exceptionType.style.display != "none") {
                exceptionType.style.display = "none";
            }
        }
    }


    this.curLiIndex = -1;
    this.parentForm.skipNextObj(null, this.name);
};
BankNoNameField.prototype.dragChild = function (id, name) {
    if (!this.data) {
        return;
    }
    if (!this.data.dragFillFieldCode) {
        return;
    }
    if (this.data.dragFillFieldCode.length < 1) {
        return;
    }
    if (!this.parentForm) {
        return;
    }
    if (!this.parentForm.elementNames) {
        return;
    }
    if (id) {
        var actionName = this.keyword.type;
        actionName = actionName.substr(0, 1).toLowerCase() + actionName.substr(1);
        var pojo = null;
        JBF.ajax(actionName + "!preUpdate.do", "id=" + encodeURIComponent(id), function (action) {
            pojo = action.pojoMap;
        });
        if (pojo) {
            // 遍历各个字段如果该字段是我和其它字段综合则计算它的值
            for (var i = 0; i < this.parentForm.elementNames.length; i++) {
                var c = this.parentForm.elementNames[i].field;
                if (c.isDragBy(this) && JBF.el(c.name)) {
                    JBF.el(c.name).value = pojo[c.name] ? pojo[c.name] : pojo[c.data.alias];
                }
            }
        }

    }
};
BankNoNameField.prototype.lionmouseover = function (liObj) {
    if (liObj) {
        liObj.style.backgroundColor = '#00BFFF';
        var liObjIndex = liObj.id.split("-")[2];
        if (liObjIndex != this.curLiIndex && this.curLiIndex >= 0) {
            this.lionmouseout(this.ligetCurLiElement());
        }
        this.curLiIndex = liObjIndex;
    }
};
BankNoNameField.prototype.lionmouseout = function (liObj) {
    if (liObj)
        liObj.style.backgroundColor = '#F0FFFF';
};
BankNoNameField.prototype.ligetLiElement = function (liIndex) {
    return document.getElementById("li-" + this.name + "-" + liIndex);
};
BankNoNameField.prototype.lifrontLi = function () {
    if (this.curLiIndex > 0 && this.curLiIndex < this.liSize) {
        this.curLiIndex--;
    } else {
        this.curLiIndex = this.liSize - 1;
    }
    return this.ligetLiElement(this.curLiIndex);
};
BankNoNameField.prototype.linextLi = function () {
    if (this.curLiIndex >= 0 && this.curLiIndex < this.liSize - 1) {
        this.curLiIndex++;
    } else {
        this.curLiIndex = 0;
    }
    return this.ligetLiElement(this.curLiIndex);
};
BankNoNameField.prototype.ligetCurLiElement = function () {
    if (this.curLiIndex < 0) {
        return null;
    }
    return document.getElementById("li-" + this.name + "-" + this.curLiIndex);
};
BankNoNameField.prototype.checkValidate = function () {

    var exceptionTypeCur = null;
    for (var i = 1; i < 10; i++) {
        var exceptionType = this.data.name + "_exceptionType_" + (i);
        exceptionType = document.getElementById(exceptionType);
        if (exceptionType) {
            if (exceptionType.style.display != "none") {
                exceptionTypeCur = exceptionType;
                break;
            }
        }
    }

    var obj = JBF.el(this.name);
    var value = this.getValue();
    var checkResult = true;
    this.pageElement = JBF.el(this.viewName);
    if (this.data.notNull) {
        if (obj.value.length > 0) {
            checkResult = true;
        } else {
            if (this.data.returnFlag != "name") {
                checkResult = false;
                this.checkText = "此字段数据不能为空";
            }
        }
    }
    if (this.data.regExp) {
        var reg = JBF.isString(this.data.regExp) ? new RegExp(this.data.regExp) : this.data.regExp;
        checkResult = reg.test(value);
        if (!checkResult) {
            this.checkText = "格式不正确";
        }
    }
    if (this.data.checkFun) {
        var checkFun = funManage(this.data.checkFun);
        checkResult = checkFun(value);
    }
    if (!checkResult) {
        JBF.setFocusStyle(obj);
    }

    if (checkResult) {
        if (exceptionTypeCur != null && exceptionTypeCur.innerHTML.indexOf("必填") != -1) {
            if (exceptionTypeCur.style.display != "none") {
                if (value != "" && value != "0.00") {
                    exceptionTypeCur.style.display = "none";
                }
            }
        }
    }
    return exceptionTypeCur != null || checkResult;
};

function ProvinceCityAreaField(parentForm, fieldObjectName, width, data) {
    BankNoNameField.call(this, parentForm, fieldObjectName, width, data);//�ù��췽���̳�
    this.keyword.type = "ProvinceCityArea";
};
ProvinceCityAreaField.prototype = new BankNoNameField();

function AddressField(parentForm, fieldObjectName, width, data) {
    BankNoNameField.call(this, parentForm, fieldObjectName, width, data);//�ù��췽���̳�
    this.keyword.type = "Address";
};
AddressField.prototype = new BankNoNameField();

function RichTextField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);//
};
RichTextField.prototype = new AbstractField();
RichTextField.prototype.init = function () {
    if (this.data) {
        this.name = this.data.name ? this.data.name : "";
        var value = this.data.value || this.data.defaultValue;
        this.value = value ? value : "";
        this.rows = this.data.rows ? this.data.rows : null;
        this.cols = this.data.cols ? this.data.cols : null;
        this.style = "width:" + this.opWidth + "px;float:left;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
    }
};
RichTextField.prototype.toHtmlStr = function () {
    return "<textarea  cols='" + this.cols + "' rows='" + this.rows + "' style=' " + this.style + "' id='" + this.name + "' name='" + this.name + "' " + this.eventProcessStr() + "/>" + this.value + "</textarea>";
    this.fieldObjectNames.push(this.name);
    return inputStr;
};
RichTextField.prototype.fillinValue = function (pojo) {
    if (pojo) {
        var value = pojo[this.name];
        JBF.el(this.name).innerHTML = value;
    }
};

/**
 * 获取光标位置，返回对象{start:start,end:end}
 */
RichTextField.prototype.getRangePos = function (textBox) {
    //如果是Firefox(1.5)的话，方法很简单
    if (typeof (textBox.selectionStart) == "number") {
        start = textBox.selectionStart;
        end = textBox.selectionEnd;
    }
    //下面是IE(6.0)的方法，麻烦得很，还要计算上'\n'
    else if (document.selection) {
        var range = document.selection.createRange();
        if (range.parentElement().id == textBox.id) {
            // create a selection of the whole textarea
            var range_all = document.body.createTextRange();
            range_all.moveToElementText(textBox);
            //两个range，一个是已经选择的text(range)，一个是整个textarea(range_all)
            //range_all.compareEndPoints()比较两个端点，如果range_all比range更往左(further to the left)，则                //返回小于0的值，则range_all往右移一点，直到两个range的start相同。
            // calculate selection start point by moving beginning of range_all to beginning of range
            for (start = 0; range_all.compareEndPoints("StartToStart", range) < 0; start++)
                range_all.moveStart('character', 1);
            // get number of line breaks from textarea start to selection start and add them to start
            // 计算一下\n
            for (var i = 0; i <= start; i++) {
                if (textBox.value.charAt(i) == '\n')
                    start++;
            }
            // create a selection of the whole textarea
            var range_all = document.body.createTextRange();
            range_all.moveToElementText(textBox);
            // calculate selection end point by moving beginning of range_all to end of range
            for (end = 0; range_all.compareEndPoints('StartToEnd', range) < 0; end++)
                range_all.moveStart('character', 1);
            // get number of line breaks from textarea start to selection end and add them to end
            for (var i = 0; i <= end; i++) {
                if (textBox.value.charAt(i) == '\n')
                    end++;
            }
        }
    }
    return {start: start, end: end, text: range.text};
};
﻿function TimestampField(parentForm, fieldObjectName, width, data) {
    DateField.call(this, parentForm, fieldObjectName, width, data);//用构造方法继承
};
TimestampField.prototype = new DateField();
var QWE = "!QWKILFUCKE!";
var isIE = navigator.userAgent.indexOf("MSIE") >= 0;
var g_JustSubmitedData;
var g_selectedId = new Array();
var g_TABLE_RESULT_HEAD_IDX = 0;
String.prototype.replaceAll = function (s1, s2) {
    return this.replace(new RegExp(s1, "gm"), s2);
};
String.prototype.endsWith = function (suffix) {
    return this.indexOf(suffix, this.length - suffix.length) != -1;
};

function toClassName(tmpStr) {
    var tmpChar = tmpStr.substring(0, 1).toUpperCase();
    var postString = tmpStr.substring(1, tmpStr.length);
    return tmpChar + postString;
}

// 初始化输入法
function initInputMethods() {
    // 外键字段输入法：
    replaceImportedKeyInputs();
    // 缓冲输入：
    // initInputCahces();
    // initSelectCahces();
    // initSpanCahces();
}

function getParameters() {

    var args = new Object();
    var query = location.search.substring(1); // Get query string
    var pairs = query.split("&"); // Break at ampersand
    var len121 = pairs.length;
    for (var i = 0; i < len121; i++) {
        var pos = pairs[i].indexOf('='); // Look for "name=value"
        if (pos == -1)
            continue; // If not found, skip
        var argname = pairs[i].substring(0, pos); // Extract the name
        var value = pairs[i].substring(pos + 1); // Extract the value
        value = decodeURIComponent(value); // Decode it, if needed
        args[argname] = value; // Store as a property
    }

    return args; // Return the object
}

function getParameter(name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regexS = "[\\?&]" + name + "=([^&#]*)";
    var regex = new RegExp(regexS);
    var results = regex.exec(window.location.href);
    if (results == null) {
        return null;
    } else {
        if (results.length) {
            if (results.length > 1) {
                var value = decodeURIComponent(results[1]);
                return value;
            }
        }

    }
    return null;
}

function callReturn(id, code, name) {
    var opennerWnd = window.dialogArguments;
    var idInput2Return = opennerWnd.document.getElementById(getParameter("idInput2Return"));
    if (idInput2Return) {
        idInput2Return.value = id;
    }
    var nameInput2Return = opennerWnd.document.getElementById(getParameter("nameInput2Return"));
    if (nameInput2Return) {

        nameInput2Return.value = code + "-" + name;
    }
    var olds = getCookie("last_" + getTablevarName());
    if (olds != null && olds.length > 300) {
        olds = olds.substring(olds.length - 300);
    }
    if (olds == null || olds == "") {
        olds = ",";
    }
    if (olds.indexOf(id) == -1) {
        setCookie("last_" + getTablevarName(), olds + id + ",");
    }

}

function copyData2Form(parameters, disable) {

    for (var name in parameters) {
        var element = document.getElementById(name);
        if (element) {
            if (element.tagName == "select" || element.tagName == "SELECT") {
                for (var i = 0; i < element.options.length; i++) {
                    if (element.options[i].value == parameters[name]) {
                        if (disable) {
                            var option = new Option(element.options[i].text, element.options[i].value);
                            element.options.length = 0;
                            element.options.add(option);
                            break;
                        } else {
                            element.options[i].selected = true;
                        }
                    }
                }
            } else {
                try {
                    JBF.setValue(name, null, parameters[name]);
                } catch (e) {
                }
                element.value = parameters[name];
                if (disable) {
                    if (element.value != '' && element.value != null) {
                        element.readOnly = true;
                        var e2 = document.getElementById("disable_" + name);
                        if (e2) {
                            e2.style.display = "none";
                        }
                        e2 = document.getElementById("disable1_" + name);
                        if (e2) {
                            e2.style.display = "none";
                        }
                        e2 = document.getElementById("disable2_" + name);
                        if (e2) {
                            e2.style.display = "none";
                        }
                    }
                }

            }
        }
    }

}

function copyUrl2Form(disable) {
    var parameters = getParameters();
    copyData2Form(parameters, disable);

}

function copyUrl2FormSetDisabled() {
    copyUrl2Form(true);

}

function replaceImportedKeyInputs() {

    var inputs1 = document.getElementsByTagName("input");
    var inputs = copyOf(inputs1);
    var len321 = inputs.length;
    for (var i = 0; i < len321; i++) {
        var ip = inputs[i];
        // ip.setAttribute("parentTable","smgCenterInfo");//TODO
        if (ip.getAttribute("parentTable") && ip.getAttribute("parentTable") != "") {
            replaceImportedKeyInput(ip);
        } else {
            ip.ondblclick = function () {
                selectRecent(this);
            };
        }
    }
}

function getParentTR(ee) {
    if (ee.tagName == "tr" || ee.tagName == "TR") {
        return ee;
    }
    if (ee.parentNode != null && ee.parentNode != ee) {
        return getParentTR(ee.parentNode);
    }
    return null;
}

function getTROfInput(ip) {
    var tr = getParentTR(ip.parentNode);
    if (tr && ip.getAttribute("parentTable") && ip.getAttribute("parentTable") != "") {
        var ptr = getParentTR(tr.parentNode);
        if (ptr) {
            tr = ptr;
        }
    }
    return tr;
}

function getTablevarName() {
    var url = window.location.href;
    var idx1 = url.indexOf("table");
    url = url.substring(idx1 + 6);
    var idx2 = url.indexOf("/");
    url = url.substring(0, idx2);
    return url;
}

function getPreTDOfInput(obj, className) {
    var td = getOwnTDOfInput(obj, className);
    if (td) {
        var preTD = JBF.getPreElement(td);
        return preTD;
    }
    return td;
}

function getOwnTDOfInput(obj, className) {
    var td = JBF.getParentNodeByClassName(className, obj);
    return td;
}

function initInputCahces() {
    var inputs = document.getElementsByTagName("input");
    var tn = getTablevarName();
    var len123 = inputs.length;
    for (var i = 0; i < len123; i++) {
        var ip = inputs[i];
        if (getTROfInput(ip)) {
            if (ip.attributes["type"] && ip.attributes["type"].nodeValue != "button") {

                if (!(ip.attributes["changeColor"] && ip.attributes["changeColor"].nodeValue)) {
                    changeBgColor(ip);
                }
            }
        }
        var v = getParameter(ip.id);
        if (v) {
        } else {
            v = getParameter(tn + "." + ip.id);
        }
        if (v) {
            if (v != "" && v != "null") {
                ip.value = v;
            }
        }

    }
}

function initSpanCahces() {
    var spans = document.getElementsByTagName("span");
    var tn = getTablevarName();
    for (var i = 0; i < spans.length; i++) {
        var ip = spans[i];
        if (getTROfInput(ip)) {
            if (!(ip.attributes["changeColor"] && ip.attributes["changeColor"].nodeValue)) {
                changeBgColor(ip);
            }
        }
        var v = getParameter(ip.id);
        if (v) {
        } else {
            v = getParameter(tn + "." + ip.id);
        }
        if (v) {
            if (v != "" && v != "null") {
                ip.value = v;
            }
        }

    }
}

function changeBgColor(obj) {
    obj.onfocus = function () {
        var preTd = getPreTDOfInput(this, "showValue");
        var ownTd = getOwnTDOfInput(this, "showValue");
        if (ownTd.firstChild.tagName == "SPAN") {
            addClassName(ownTd.firstChild, "focusedInput")//.style.border = "1px solid #ff0000";
        }
        preTd.setAttribute("class", "selectedInputTD");
        preTd.setAttribute("className", "selectedInputTD");
        ownTd.setAttribute("class", "selectedInput");
        ownTd.setAttribute("className", "selectedInput");
    };
    obj.onblur = function () {
        var preTd = getPreTDOfInput(this, "selectedInput");
        var ownTd = getOwnTDOfInput(this, "selectedInput");
        if (ownTd.firstChild.tagName == "SPAN") {
            removeClassName(ownTd.firstChild, "focusedInput");//.style.border = "1px solid #9cb3e2";
        }
        preTd.setAttribute("class", "showText");
        preTd.setAttribute("className", "showText");
        ownTd.setAttribute("class", "showValue");
        ownTd.setAttribute("className", "showValue");
    };
}

function initSelectCahces() {
    var inputs = document.getElementsByTagName("select");
    var tn = getTablevarName();
    var len123 = inputs.length;
    for (var i = 0; i < len123; i++) {
        var ip = inputs[i];
        if (getTROfInput(ip)) {
            if (!(ip.attributes["changeColor"] && ip.attributes["changeColor"].nodeValue)) {
                changeBgColor(ip);
            }
        }
        var v = getParameter(ip.id);
        if (v) {
        } else {
            v = getParameter(tn + "." + ip.id);
        }
        if (v) {
            if (v != "" && v != "null") {
                ip.value = v;
            }
        }

    }
}

function setCookie(name, value)// 两个参数，一个是cookie的名子，一个是值
{
    var today = new Date();
    var expires_date = new Date(today.getTime() + (1000 * 60 * 60 * 24 * 10000));
    document.cookie = name + "=" + escape(value) + ";expires=" + expires_date.toGMTString();
}

function getCookie(name)// 读取cookies函数
{
    var arr = document.cookie.match(new RegExp("(^| )" + name + "=([^;]*)(;|$)"));
    if (arr != null)
        return unescape(arr[2]);
    return null;

}

function browseEntity(browseEntityButton, myField, parentTable, parentTableTitle, justVisited) {
    // TODO

    var codeNameInput = document.getElementById(myField.replace(".id", ".name"));
    var filter1 = codeNameInput.filter1 || document.getElementById(myField).filter1
        || codeNameInput.getAttribute('filter1') || document.getElementById(myField).getAttribute('filter1');
    var url = JBF.getUrl() + "genhtml/" + parentTable + "/" + parentTable + "List.html?justVisited=" + justVisited
        + "&forSelectOne=true&idInput2Return=" + myField + "&nameInput2Return=" + myField.replace(".id", ".name");
    if (filter1) {
        url += "&" + filter1;
    }
    var filter = codeNameInput.filter || document.getElementById(myField).filter
        || codeNameInput.getAttribute('filter') || document.getElementById(myField).getAttribute('filter')

    if (filter1) {
        url += "&filter=" + encodeURIComponent(filter);
    }
    var returnValue = showModalDialog(url, window, "dialogWidth=" + (screen.availWidth - 80) + "px;dialogHeight="
        + (screen.availHeight - 80) + "px;center:yes");

}

function onclickLi(li) {
    if (!li) {
        return;
    }
    if (li.tagName != "LI") {
        return;
    }
    var div = li.parentNode.parentNode;
    if (div.selectedId) {
        if (document.getElementById(div.selectedId)) {
            document.getElementById(div.selectedId).setAttribute("class", "");
            document.getElementById(div.selectedId).setAttribute("className", "");
        }

    }
    li.setAttribute("class", "liSelected");
    li.setAttribute("className", "liSelected");
    div.selectedId = li.getAttribute("id");
    div.selectedCode = li.getAttribute("code");
    div.selectedName = li.getAttribute("name");
    var ul = li.parentNode;
    var myField = ul.id;
    if (!myField) {
        myField = ul.getAttribute("id");
    }
    myField = myField.substring(3);
    document.getElementById(myField.replace(".id", ".name")).focus();
}

function nextLi(ul) {
    if (!ul) {
        return;
    }
    var div = ul.parentNode;
    var li0 = document.getElementById(div.selectedId);

    var li = null;
    if (li0) {
        li = JBF.getNextElement(li0);
    } else {
        li = ul.firstChild;
    }
    onclickLi(li);
}

function preLi(ul) {
    if (!ul) {
        return;
    }
    var div = ul.parentNode;
    var li0 = document.getElementById(div.selectedId);

    var li = null;
    if (li0) {
        li = li0.previousSibling;
    } else {
        li = ul.firstChild;
    }
    onclickLi(li);
}

function selectFirst(listDiv) {
    if (listDiv.firstChild) {
        var li = listDiv.firstChild.firstChild;
        onclickLi(li);
    }

}

function getListHTML(inputValue, myField, parentTable, parentTableTitle, refField, refCodeField, refNameField, filter) {// !query.do
    // TODO 使用缓存
    var url1 = parentTable + "!queryIdCodeNames.do";
    var data1 = "sg_myField=" + myField + "&sg_inputValue=" + inputValue;
    if (filter) {

        data1 += "&filter=" + encodeURIComponent(filter);
    }
    var sg_queryIdCodeNamesOrderFieldName = document.getElementById(myField).sg_queryIdCodeNamesOrderFieldName
        || document.getElementById(myField).getAttribute("sg_queryIdCodeNamesOrderFieldName");
    if (sg_queryIdCodeNamesOrderFieldName) {
        data1 += "&sg_queryIdCodeNamesOrderFieldName=" + encodeURIComponent(sg_queryIdCodeNamesOrderFieldName);
    }
    var responseText = "";
    JBF
        .ajax(
            url1,
            data1,
            function (msg) {
                // 测试代码:
                if (window.location.href.indexOf("testDetail.html") != -1) {
                    if (!msg) {
                        msg = new Object();
                        msg.sg_queryIdCodeNames = "<UL id='UL_"
                            + myField
                            + "'><LI ondblclick=\"ondblclickLi(this)\" onclick='ondblclickLi(this)' id='1' code='1' name='张三1'>1-张三1</LI><LI ondblclick=\"ondblclickLi(this)\" onclick='ondblclickLi(this)' id='2' code='2' name='张三2'>2-张三2</LI></UL>";
                    }
                }
                // 测试代码结束
                responseText = msg.sg_queryIdCodeNames;
            });
    return responseText;
}

function ondblclickLi(li) {
    var listDiv = li.parentNode.parentNode;
    var ul = li.parentNode;
    var myField = listDiv.id;
    if (!myField) {
        myField = listDiv.getAttribute("id");
    }

    listDiv.selectedId = li.getAttribute("id");
    listDiv.selectedCode = li.getAttribute("code");
    listDiv.selectedName = li.getAttribute("name");

    myField = myField.substring(5);
    listDiv.style.display = "none";
    document.getElementById(myField).value = listDiv.selectedId;
    document.getElementById(myField.replace(".id", ".name")).value = listDiv.selectedCode + "-" + listDiv.selectedName;
}

function onkeyupEntity(e, codeNameInput, myField, parentTable, parentTableTitle, refField, refCodeField, refNameField,
                       enterEvent, parentObj) {
    document.getElementById(myField).value = "";
    e = e || event;
    var currKey = e.keyCode || e.which || e.charCode;
    var listDiv = document.getElementById("list_" + myField);
    if (listDiv.style.display == "none") {

        if (!window.noDropTopPos) {
            var dd = calDropPos(codeNameInput);
            listDiv.style.top = dd.y + "px";// (JBF.getAbsY(codeNameInput)-JBF.getObjHeight(codeNameInput)+JBF.getScrollTop(codeNameInput))+"px";
        }
        listDiv.style.display = "";
        codeNameInput.focus();
    }
    if (currKey == 13) {// 回车13 -- 空格 32
        listDiv.style.display = "none";
        if (listDiv.selectedId) {
            document.getElementById(myField).value = listDiv.selectedId;
            codeNameInput.value = listDiv.selectedCode + "-" + listDiv.selectedName;
        }
        if (enterEvent) {
            fun = eval(enterEvent);
            if (fun) {
                fun(e, parentObj);
            }
        }
    } else if (currKey == 38) {// 上箭头
        preLi(document.getElementById("UL_" + myField));
    } else if (currKey == 40) {// 下箭头
        nextLi(document.getElementById("UL_" + myField));
    } else if (currKey == 37) {// 左箭头

    } else if (currKey == 39) {// 右箭头

    } else {
        if (codeNameInput.value && codeNameInput.value != "") {
            var html = getListHTML(codeNameInput.value, myField, parentTable, parentTableTitle, refField, refCodeField,
                refNameField, codeNameInput.filter || document.getElementById(myField).filter
                || codeNameInput.getAttribute('filter')
                || document.getElementById(myField).getAttribute('filter'));
            listDiv.innerHTML = html;
            selectFirst(listDiv);
            codeNameInput.focus();
        } else {
            listDiv.style.display = "none";
            document.getElementById(myField).value = "";
        }
    }
}

function dropEntity(dropEntityButton, myField, parentTable, parentTableTitle, refField, refCodeField, refNameField) {
    var listDiv = document.getElementById("list_" + myField);
    if (listDiv.style.display == "none") {

        var dd = calDropPos(document.getElementById(myField.replace(".id", ".name")));
        var codeNameInput = document.getElementById(myField.replace(".id", ".name"));
        var filter = codeNameInput.filter || document.getElementById(myField).filter
            || codeNameInput.getAttribute('filter') || document.getElementById(myField).getAttribute('filter');
        var html = getListHTML(document.getElementById(myField.replace(".id", ".name")).value, myField, parentTable,
            parentTableTitle, refField, refCodeField, refNameField, filter);
        listDiv.innerHTML = html;
        listDiv.style.display = "";
        if (!window.noDropTopPos) {
            listDiv.style.top = dd.y + "px";// (JBF.getAbsY(codeNameInput)-JBF.getObjHeight(codeNameInput)+JBF.getScrollTop(codeNameInput))+"px";
        }
        selectFirst(listDiv);
        document.getElementById(myField.replace(".id", ".name")).focus();
    } else {
        listDiv.style.display = "none";
    }
}

function copyOf(aa) {
    if (aa) {
        var bb = new Array();
        for (var i = 0; i < aa.length; i++) {
            bb[i] = aa[i];
        }
        return bb;
    } else {
        return aa;
    }

}

var g_pojoMap;

function replaceImportedKeyInput(ip) {
    if (window.JBF && JBF.beforeImportedKeyInputReplaceSpecial) {
        JBF.beforeImportedKeyInputReplaceSpecial(ip);
    }
    var myField = ip.id;
    var parentTable = ip.getAttribute("parentTable");
    var parentTableTitle = ip.getAttribute("parentTableTitle");
    var parentOpObjName = ip.getAttribute("parentOpObjName");
    var changeColor = null != ip.getAttribute("changeColor") ? ip.getAttribute("changeColor") : "";
    var enterEvent = ip.getAttribute("enterEvent");
    var refField = "id";// ip.getAttribute("refField");
    var refCodeField = "code";// ip.getAttribute("refCodeField");
    var refNameField = "name";// ip.getAttribute("refNameField");
    var readonly = ip.getAttribute("readonly");
    var opWidth = ip.getAttribute("opWidth");
    if (window.NorthkingCRUD && NorthkingCRUD.useBootStrap) {
        opWidth = null;
    }
    // ip.type = "hidden";

    var codeNameDiv = document.createElement("div");
    if (ip.parentNode.insertAfter) {
        ip.parentNode.insertAfter(codeNameDiv, ip);
    } else if (ip.parentNode.insertBefore) {
        ip.parentNode.insertBefore(codeNameDiv, ip);
    } else {
        ip.parentNode.appendChild(codeNameDiv);
    }

    if (opWidth) {
        codeNameDiv.id = "codeNameDiv";
        codeNameDiv.setAttribute("id", "codeNameDiv");
    } else {
        codeNameDiv.id = "codeNameDiv1";
        codeNameDiv.setAttribute("id", "codeNameDiv1");
    }
    if (opWidth) {
        codeNameDiv.style.width = opWidth + "px";
    }

    var html = "<table ";
    if (opWidth) {
        html += "style='width:" + (opWidth) + "px;'";
    }
    html += " class='codeNameTable'><tr>";
    var name = g_pojoMap ? g_pojoMap[myField.replace(".id", ".name")] : "";
    var imported = getParameter(myField.replace(".id", ".name"));
    if (imported != null && imported != "") {
        name = imported;
    }

    var code = g_pojoMap ? g_pojoMap[myField.replace(".id", ".code")] : "";
    var imported = getParameter(myField.replace(".id", ".code"));
    if (imported != null && imported != "") {
        code = imported;
    }
    var vvv = "";
    if (!isNull(code)) {
        vvv = code + "-" + name;
    }
    var className = ip.className || ip.getAttribute("className") || ip.getAttribute("class");
    if (className) {
        className = className.replace("submitInput", "");
    }
    html += "<td class='tdInput'><input class='" + className
        + "' ondblclick='' onfocus='JBF.setFocusStyle(this);' onblur='JBF.setBlurStyle(this);' ";
    if (opWidth) {
        html += " style='width:" + (Number(opWidth) - 50) + "px;'";
    }
    html += " tabIndex='" + ip.tabIndex + "' type='text' value='" + vvv + "' id='" + myField.replace(".id", ".name")
        + "' name='" + myField.replace(".id", ".name") + "' parentTable='" + parentTable + "'changeColor='"
        + changeColor + "' onkeyup=\"if(window.event){window.event.cancelBubble=true;}onkeyupEntity(event,this,'"
        + myField + "','" + parentTable + "','" + parentTableTitle + "','" + refField + "','" + refCodeField
        + "','" + refNameField + "','" + enterEvent + "','" + parentOpObjName + "')\"></td>";
    if (readonly != "readonly" && readonly != "true" && readonly != "readOnly") {
        html += "<td id='disable_" + myField + "' class='tdDrop'><div title='" + parentTableTitle
            + "下拉列表' class='dropEntity' onclick=\"dropEntity(this,'" + myField + "','" + parentTable + "','"
            + parentTableTitle + "','" + refField + "','" + refCodeField + "','" + refNameField
            + "')\">&nbsp;&nbsp;&nbsp;</div></td>";
        html += "<td id='disable1_" + myField + "' class='tdBrowse'><div title='" + parentTableTitle
            + "浏览对话框' class='browseEntity' onclick=\"browseEntity(this,'" + myField + "','" + parentTable + "','"
            + parentTableTitle + "')\">&nbsp;&nbsp;&nbsp;</div></td>";
        html += "<td id='disable2_" + myField + "' style='display:none;width:1px;'><div title='最近访问的"
            + parentTableTitle + "' class='browseEntityJustVisited' onclick=\"browseEntity(this,'" + myField
            + "','" + parentTable + "','" + parentTableTitle + "',true)\">&nbsp;&nbsp;&nbsp;</div></td>";
    }
    html += "</tr></table>";
    html += "<div class='listDiv' id='list_" + ip.id + "' style='position:absolute;display:none;'></div>";
    codeNameDiv.innerHTML = html;
    var nip = document.getElementById(myField.replace(".id", ".name"));

    if (nip.attachEvent) {
        nip.attachEvent("onblur", function () {
            hidden1222("list_" + ip.id, document.getElementById(ip.id.replace(".id", ".name")), ip);
        });
    } else if (nip.addEventListener) {
        nip.addEventListener("blur", function () {
            hidden1222("list_" + ip.id, document.getElementById(ip.id.replace(".id", ".name")), ip);
        }, false);
    } else {
        nip.onblur = function () {
            hidden1222("list_" + ip.id, document.getElementById(ip.id.replace(".id", ".name")), ip);
        };
    }

}

function hidden1222(ipid, namee, ip) {
    if (document.getElementById(ipid).style.display == "none") {
        return;
    }
    setTimeout(function () {
        var iii = document.getElementById(ipid);
        if (ip && ip.value == "") {
            if (namee) {
                namee.value = "";
            }
        }
        iii.style.display = "none";

    }, 500);

}

function loadJustVisited2Table() {
    var ids_dot = getCookie("last_" + getTablevarName());
    document.getElementById("ids_dot").value = ids_dot;

}

function selectRecent(input) {
    var fieldId = input.getAttribute("fieldId");

    var old = getCookie("rec_" + fieldId);
    if (old != null) {
        if (old != "") {
            var div = document.createElement("div");
            div.onclick = function (event) {
                var e = event || window.event || window.top.event;
                var event_element = e.target ? e.target : e.srcElement;
                if (event_element.innerText) {
                    input.value = event_element.innerText;
                } else if (event_element.contentText) {
                    input.value = event_element.contentText;
                } else if (event_element.textContent) {
                    input.value = event_element.textContent;
                } else {
                    input.value = event_element.innerHTML;
                }
                this.parentNode.removeChild(this);
            };
            div.onblur = function (event) {
                var e = event || window.event || window.top.event;
                if (e && e.explicitOriginalTarget) {
                    input.value = e.explicitOriginalTarget.textContent;
                }
                this.parentNode.removeChild(this);
            };
            var posinput = absPos(input);
            var top = parseInt111(posinput.y) + parseInt111(input.offsetHeight);
            div.style.cssText = "border:solid 1px #990000;cursor:hand;display: block;position:absolute;background-color:#ccaa00;z-index:9999;max-height:200px;overflow:auto;left:"
                + posinput.x + "px;top:" + top + "px;width:" + input.offsetWidth + "px;";

            var div2 = document.createElement("div");
            div.appendChild(div2);
            var olds = old.split(QWE);
            var len = olds.length;
            for (var i = 0; i < len; i++) {
                var v = olds[i];

                if (v != null && v != "null" && v != "") {
                    var c = document.createElement("div");
                    if (i % 2 == 0) {
                        c.style.cssText = "padding:3px;background-color:#cc8800;";
                    } else {
                        c.style.cssText = "padding:3px;background-color:#eedd00;";

                    }
                    c.appendChild(document.createTextNode(v));
                    div2.appendChild(c);

                }
            }
            window.document.body.appendChild(div);
            if (top + parseInt111(div.offsetHeight) > parseInt111(window.document.body.clientHeight)) {
                div.style.top = top - ((parseInt111(div.offsetHeight) + parseInt111(input.offsetHeight))) + "px";
            }
            div.focus();

        }
    }
}

function saveCache4Field(input) {
    var inputs;
    if (input) {
        inputs = new Array();
        inputs[0] = input;
    } else {
        inputs = document.getElementsByTagName("input");
    }

    var len = inputs.length;
    for (var i = 0; i < len; i++) {
        var input = inputs[i];
        if (input.value == null || input.value == "") {
            continue;
        }
        var fieldId = input.getAttribute("fieldId");
        if (fieldId) {
            if (fieldId != "") {
                var old = getCookie("rec_" + fieldId);
                if (old == null) {
                    old = QWE;
                }
                var os = old.split(QWE);
                if (os.length) {
                    if (os.length > 20) {
                        old = QWE;
                        for (var j = os.length - 20; j < os.length; j++) {
                            if (os[j]) {
                                if (os[j] != "") {
                                    old += os[j] + QWE;
                                }

                            }
                        }
                    }
                }
                if (old.indexOf(QWE + input.value + QWE) == -1) {
                    old += input.value + QWE;
                    setCookie("rec_" + fieldId, old);
                }
            }
        }
    }
}

function isNotNull(s) {
    return !isNull(s);
}

function notNull(s) {
    return !isNull(s);
}

function isNull(s) {
    if (s) {
        if (s != "" && s != "null" && s != "undefined") {
            return false;
        }
    }
    return true;
}

function getToday() {
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth() + 1;
    var yyyy = today.getFullYear();
    if (dd < 10) {
        dd = '0' + dd;
    }
    if (mm < 10) {
        mm = '0' + mm;
    }
    return yyyy + "" + mm + "" + dd;
}

// 取得元素（图像）的绝对位置
function getDim(el) {
    for (var lx = 0, ly = 0; el != null; lx += el.offsetLeft, ly += el.offsetTop, el = el.offsetParent)
        ;
    return {
        x: lx,
        y: ly
    };
}

function removeElement(el) {
    if (el) {
        var p = el.parentNode;
        p.removeChild(el);
    }

}

function GetPageScrollX() {
    if (window.pageXOffset) {
        return window.pageXOffset;
    } else if (document.documentElement && document.documentElement.scrollLeft) { // IE 6
        // Strict
        return document.documentElement.scrollLeft;
    } else if (document.body) { // all other IE
        return document.body.scrollLeft;
    }
    return 0;

}

function GetPageScrollY() {
    if (window.pageYOffset) {
        return window.pageYOffset;
    } else if (document.documentElement && document.documentElement.scrollTop) { // IE 6
        // Strict
        return document.documentElement.scrollTop;
    } else if (document.body) { // all other IE
        return document.body.scrollTop;
    }
    return 0;

}

function absPos(node) {
    var node0 = node;
    var x = 0;
    var y = 0;
    do {
        x += node.offsetLeft;
        y += node.offsetTop;
    } while (node = node.offsetParent);

    var scrollX = 0;
    var scrollY = 0;
    while (node0 = node0.parentNode) {
        if (node0.scrollLeft) {
            scrollX += node0.scrollLeft;
        }
        if (node0.scrollTop) {
            scrollY += node0.scrollTop;
        }
    }
    return {
        'x': x - scrollX,
        'y': y - scrollY
    };
}

function calDropPos(ip, listWidth, listHeight) {
    var posInp = absPos(ip);

    if ((document.body.offsetHeight - (posInp.y + ip.offsetHeight - GetPageScrollY())) < listHeight) {
        posInp.y = posInp.y - listHeight + GetPageScrollY();
    } else {
        posInp.y = posInp.y + (ip.offsetHeight * 2 || ip.clientHeight * 2) + GetPageScrollY();
    }

    if ((document.body.offsetWidth - (posInp.x - GetPageScrollX())) < listWidth) {
        posInp.x = posInp.x - listWidth;
    }

    return posInp;
}

//var CommonTool = {};
try {
    if (!CommonTool) {
        CommonTool = {};
    }
} catch (e) {
    CommonTool = {};
}
CommonTool.splitCharLevel1 = "Level@@@@@";
/**
 * 弹出Div
 *
 * @param {Object}
 *            str
 */
CommonTool.sAlert = function (inputObjStr, iLeft, iTop, iWidth, iHeight,
                              strAction) {
    var msgw, msgh, bordercolor;
    msgw = iWidth;// 提示窗口的宽度
    msgh = iHeight;// 提示窗口的高度
    titleheight = 25 // 提示窗口标题高度
    bordercolor = "#336699";// 提示窗口的边框颜色
    titlecolor = "#99CCFF";// 提示窗口的标题颜色
    var msgObj = document.createElement("div")
    msgObj.setAttribute("id", "msgDiv");
    msgObj.setAttribute("align", "center");
    msgObj.style.background = "white";
    msgObj.style.border = "1px solid " + bordercolor;
    msgObj.style.position = "absolute";
    msgObj.style.filter = "progid:DXImageTransform.Microsoft.Shadow(color=#999999,direction=135,strength=5";
    msgObj.style.left = iLeft;
    msgObj.style.top = iTop;
    msgObj.style.font = "12px/1.6em Verdana, Geneva, Arial, Helvetica, sans-serif";
    msgObj.style.marginLeft = "-225px";
    msgObj.style.marginTop = -75 + document.documentElement.scrollTop + "px";
    msgObj.style.width = msgw + "px";
    msgObj.style.height = msgh + "px";
    msgObj.style.textAlign = "center";
    msgObj.style.lineHeight = "25px";
    msgObj.style.zIndex = "10001";

    var title = document.createElement("h4");
    title.setAttribute("id", "msgTitle");
    title.setAttribute("align", "right");
    title.style.margin = "0";
    title.style.padding = "3px";
    title.style.background = bordercolor;
    title.style.filter = "progid:DXImageTransform.Microsoft.Alpha(startX=20, startY=20, finishX=100, finishY=100,style=1,opacity=75,finishOpacity=100);";
    title.style.opacity = "0.75";
    title.style.border = "1px solid " + bordercolor;
    title.style.height = "18px";
    title.style.font = "12px Verdana, Geneva, Arial, Helvetica, sans-serif";
    title.style.color = "white";
    title.style.cursor = "pointer";
    title.innerHTML = "关闭";
    title.onclick = function () {

        document.getElementById("msgDiv").removeChild(title);
        document.body.removeChild(msgObj);
    }
    document.body.appendChild(msgObj);
    document.getElementById("msgDiv").appendChild(title);
    var txt = document.createElement("p");
    txt.style.margin = "1em 0"
    txt.setAttribute("id", "msgTxt");
    txt.innerHTML = "<input value=9999>";
    document.getElementById("msgDiv").appendChild(txt);
}


// ---------------------------------------
// 拖动控件的函数
// 参数：o 对象控件
// s
//
// ---------------------------------------
var g_dragFlag = "0";
CommonTool.drag = function (o, s) {

    if (typeof o == "string")
        o = document.getElementById(o);
    if (!o)
        return;

    o.orig_x = parseInt(o.style.left) - document.body.scrollLeft;
    o.orig_y = parseInt(o.style.top) - document.body.scrollTop;
    o.orig_index = o.style.zIndex;

    o.onmousedown = function (a) {
        this.style.cursor = "move";
        this.style.zIndex = 10000;
        var d = document;
        if (!a)
            a = window.event;
        var x = a.clientX + d.body.scrollLeft - o.offsetLeft;
        var y = a.clientY + d.body.scrollTop - o.offsetTop;
        // author: www.longbill.cn
        d.ondragstart = "return false;"
        d.onselectstart = "return false;"
        d.onselect = "document.selection.empty();"

        if (o.setCapture)
            o.setCapture();
        else if (window.captureEvents)
            window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);

        d.onmousemove = function (a) {
            if (!a)
                a = window.event;
            g_dragFlag = "1";
            o.style.left = a.clientX + document.body.scrollLeft - x;
            o.style.top = a.clientY + document.body.scrollTop - y;
            o.orig_x = parseInt(o.style.left) - document.body.scrollLeft;
            o.orig_y = parseInt(o.style.top) - document.body.scrollTop;
        }

        d.onmouseup = function () {
            if (o.releaseCapture)
                o.releaseCapture();
            else if (window.captureEvents)
                window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);
            d.onmousemove = null;
            d.onmouseup = null;
            d.ondragstart = null;
            d.onselectstart = null;
            d.onselect = null;
            o.style.cursor = "normal";
            o.style.zIndex = o.orig_index;
            try {
                if (g_dragFlag == "1")
                    doDragEnd();
                g_dragFlag == "0";
            } catch (e) {
            }
        }
    }

    if (s) {
        var orig_scroll = window.onscroll ? window.onscroll : function () {
        };
        window.onscroll = function () {
            orig_scroll();
            o.style.left = o.orig_x + document.body.scrollLeft;
            o.style.top = o.orig_y + document.body.scrollTop;
        }
    }
}
/**
 * 替换页面ｉｎｐｕｔ的值
 *
 * @param {Object}
 *            newTextElements
 */
CommonTool.replaceExistingWithNewHtml = function (newTextElements) {
    // loop through newTextElements
    // alert(newTextElements);
    for (var i = newTextElements.length - 1; i >= 0; --i) {
        // check that this begins with <span
        if (newTextElements[i].indexOf(":") > -1) {

            // get the name - between the 1st and 2nd quote mark
            startNamePos = newTextElements[i].indexOf("[") + 1;
            endNamePos = newTextElements[i].indexOf(":", startNamePos);
            name = newTextElements[i].substring(startNamePos, endNamePos);

            // get the content - everything after the first > mark
            startContentPos = newTextElements[i].indexOf(":") + 1;
            content = newTextElements[i].substring(startContentPos);

            // Now update the existing Document with this element
            // check that this element exists in the document
            // alert(name+document.getElementById(name));
            if (document.getElementById(name)) {
                if (document.getElementById(name).type == "text"
                    || document.getElementById(name).type == "hidden") {
                    document.getElementById(name).value = content;
                } else {
                    document.getElementById(name).innerHTML = content;
                }
            } else {
                continue;
            }
        }
    }
}

CommonTool.setElementValue = function (name, value) {

    var obj = document.getElementById(name);
    if (obj) {
        if (obj.type == "text"
            || obj.type == "hidden") {
            obj.value = value;
        } else {
            obj.innerHTML = value;
        }
    }
}

/**
 * 创建图标
 */
CommonTool.getRootPath = function () {
    var href = window.location.href;
    var host = window.location.host;
    var f1 = href.substring(href.indexOf(host))
    var f2 = f1.substring(f1.indexOf("/"));
    var root = f2.split("/");
    return "/" + root[1] + "/";
}

CommonTool.popWindow = function (width, height, url) {
    var modelFrameUrl = g_pathPrefix + "common/page/modelDialogFrame.jsp";
    var url = modelFrameUrl + "?title=" + encodeURI(encodeURI("系统对话框")) + "&url=" + encodeURI(encodeURI(url));
    //alert(url);
    var returnValue = window.showModalDialog(url, window, "dialogWidth=" + width + "px; dialogHeight=" + height + "px; help=no; status=no; scroll=yes; resizable=no;minimize=yes;maximize=yes;");
    return returnValue;
}

CommonTool.getRadioValue = function (radioObjects) {
    for (var i = 0; i < radioObjects.length; i++) {
        var v1 = radioObjects[i];
        if (v1.checked) return v1.value;
    }
    return "";
}

/**
 * 根据身份证号码获得个人信息
 */
CommonTool.getPersonInfoByIdNo = function (id) {
    var arr = [null, null, null, null, null, null, null, null, null, null, null, "北京", "天津", "河北", "山西", "内蒙古"
        , null, null, null, null, null, "辽宁", "吉林", "黑龙江", null, null, null, null, null, null, null, "上海"
        , "江苏", "浙江", "安微", "福建", "江西", "山东", null, null, null, "河南", "湖北", "湖南", "广东", "广西", "海南"
        , null, null, null, "重庆", "四川", "贵州", "云南", "西藏", null, null, null, null, null, null, "陕西", "甘肃"
        , "青海", "宁夏", "XJ", null, null, null, null, null, "台湾", null, null, null, null, null, null, null, null
        , null, "香港", "澳门", null, null, null, null, null, null, null, null, "国外"]
    var newId = id;
    if (newId.indexOf('x') != -1 || newId.indexOf('X') != -1) {
        var id = newId.slice(0, 17);
        if (isNaN(id)) return "错误的身份证号码"
        id = id + 'X';
    } else {
        if (isNaN(id)) return "错误的身份证号码"
        var id = String(id);
    }
    var prov = arr[id.slice(0, 2)];
    if (newId != "" && (newId.length == 15 || newId.length == 18)) {
        /*
		 * 原结果为：0-男，1-女
		 * 临时修改对应需求 01-男，02-女
		 */
        var sex = id.slice(14, 17) % 2 ? "01" : "02";
    } else {
        var sex = "";
    }
    if (id.length == 18) {
        var birthday = id.slice(6, 10) + id.slice(10, 12) + id.slice(12, 14);
    } else if (id.length == 15) {
        var birthday = "19" + id.slice(6, 8) + id.slice(8, 10) + id.slice(10, 12);
    }
    return {"province": prov, "birthday": birthday, "sex": sex};
}


function ValidDateField(parentForm, fieldObjectName, width, data) {
    DateField.call(this, parentForm, fieldObjectName, width, data);// 用构造方法继承
};
ValidDateField.prototype = new DateField();
ValidDateField.prototype.onKeyUp = function (obj, ev) {
    var event = JBF.getEvent(ev);
    var keyCode = JBF.getKeyValue(event);
    JBF.replaceDate(obj);
    if (keyCode == 67) {  //字母C
        obj.value = "长期";
    } else if ((ev.shiftKey && ev.keyCode == 56) || ev.keyCode == 106) {   //Shift+8 或者小键盘*
        obj.value = "*";
    }
};

ValidDateField.prototype.onClick = function (obj, elEvent) {
};

/**
 * 机构输入法（测试用的）
 * @param parentForm
 * @param fieldObjectName
 * @param width
 * @param data
 * @returns
 */
function SmOrganField(parentForm, fieldObjectName, width, data) {
    BankNoNameField.call(this, parentForm, fieldObjectName, width, data);//�ù��췽���̳�
    this.keyword.type = "SmOrgan";
};
SmOrganField.prototype = new BankNoNameField();

function YearField(parentForm, fieldObjectName, width, data) {
    DateField.call(this, parentForm, fieldObjectName, width, data);//用构造方法继承
    this.isYear = true;
};
YearField.prototype = new DateField();
YearField.prototype.onKeyUp = function (obj, ev) {
    var event = JBF.getEvent(ev);
    var keyCode = JBF.getKeyValue(event);
    if (keyCode == 67) {
        obj.value = "20990909";
    }
    JBF.replaceDate(obj);
};
YearField.prototype.checkRegExp = function (value) {
    return (!value) || value == "" || value.length == 4;
}

function MonthField(parentForm, fieldObjectName, width, data) {
    DateField.call(this, parentForm, fieldObjectName, width, data);// 用构造方法继承
    this.isMonth = true;
};
MonthField.prototype = new DateField();
MonthField.prototype.onKeyUp = function (obj, ev) {
    var event = JBF.getEvent(ev);
    var keyCode = JBF.getKeyValue(event);
    if (keyCode == 67) {
        obj.value = "20990909";
    }
    JBF.replaceDate(obj);
};

MonthField.prototype.checkRegExp = function (value) {
    return (!value) || value == "" || value.length == 6;
}

function PhoneField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);// �ù��췽���̳�
};
var ggggggg_area = "";// "_area";
PhoneField.prototype = new AbstractField();
PhoneField.prototype.type = "text";
PhoneField.prototype.init = function () {
    if (this.data) {
        this.styleClass = 'inputCss';
        this.name = this.data.name;
        var value = this.data.value || this.data.defaultValue;
        this.defaultValue = JBF.setObjValue(value, value, "");
        this.style = "width:" + this.width + "px;";
        if (this.data.style) {
            this.style += (this.data.style + ";");
        }
        this.readOnly = this.data.readOnly ? " readonly='true' disabled='disabled'" : "";
        this.property = "";
        if (this.data.maxLength) {
            this.property += " maxLength='" + this.data.maxLength + "'";
        }
        this.isTip = this.data.isTip ? this.data.isTip : false;
    }
};
PhoneField.prototype.toHtmlStr = function () {
    var inputStrArea = "<input type='text' id='" + this.name + ggggggg_area + "' name='" + this.name + ggggggg_area + "' " + this.eventProcessStr() + " class='" + this.styleClass
        + "'" + this.property + this.readOnly + " style='" + this.style + ";width:50px;float:none;'/>";
    var inputStrCode = "<input type='text' id='" + this.name + "_code1111' name='" + this.name + "_code1111' " + this.eventProcessStr() + " class='" + this.styleClass + "1'"
        + this.property + this.readOnly + " style='" + this.style.replace("float:left;", "") + ";width:150px;float:ll;'/>";
    this.fieldObjectNames.push(this.name);
    return inputStrArea + "-" + inputStrCode;
};

PhoneField.prototype.getValue = function () {
    var v1 = JBF.el(this.name + ggggggg_area).value;
    var v2 = JBF.el(this.name + "_code1111").value;
    if (v1 == "" && v2 == "") {
        return "";
    }
    return v1 + "-" + v2;
};

function IdCardField(parentForm, fieldObjectName, width, data) {
    AbstractField.call(this, parentForm, fieldObjectName, width, data);// �ù��췽���̳�
};
IdCardField.prototype = new AbstractField();
IdCardField.prototype.type = "text";
IdCardField.prototype.onKeyUp = function (obj, ev) {
    try {
        onIdCardSpecial(this);
    } catch (e) {

    }

};


/**
 * 地址录入,带出省市区
 */
function AddressProvinceCityField(parentForm, fieldObjectName, width, data) {
    BankNoNameField.call(this, parentForm, fieldObjectName, width, data);
    if (!data.parentTable) {
        this.keyword.type = "AddressProvinceCity";

    }
    this.keyword.extendsField = "province,city,area";
};
AddressProvinceCityField.prototype = new BankNoNameField();

AddressProvinceCityField.prototype.afterInputHtml = function () {
    return "<div style='margin-left:40px;'>省:<input id='province-" + this.name + "' name='province-" + this.name + "' type='text'></div><div style='margin-left:40px;'>市:<input id='city-" + this.name + "' name='city-" + this.name + "' type='text'></div><div style='margin-left:40px;'>区:<input id='area-" + this.name + "' name='area-" + this.name + "' type='text'>";
}

//影像盒子:

function ImageBox(datas) {
    this.datas = datas;
    this.tideDatas();
    this.KEY_DEF = new Object();
    this.KEY_DEF.pageup = 33;
    this.KEY_DEF.pagedown = 34;
    this.KEY_DEF.home = 36;
    this.KEY_DEF.end = 35;
    this.KEY_DEF.prevRow = 38;
    this.KEY_DEF.nextRow = 40;
    this.KEY_DEF.prevImage = 37;
    this.KEY_DEF.nextImage = 39;
    this.KEY_DEF.enter = 13;
    this.KEY_DEF.add = 187;
    this.KEY_DEF.sub = 189;
    this.KEY_DEF.left = 189;
    this.KEY_DEF.right = 189;
    this.KEY_DEF.up = 189;
    this.KEY_DEF.down = 189;

}

ImageBox.isString = function (_str) {
    return typeof _str == 'string' || _str.constructor == String;
};
ImageBox.ZOOM_1P1 = "1p1";
ImageBox.ZOOM_FIT_WND = "fit_wnd";
ImageBox.ZOOM_FILL_WND = 'fill_wnd';
ImageBox.ZOOM_FILL_X = 'fill_x';
ImageBox.ZOOM_FILL_Y = 'fill_y';
ImageBox.IMG_STYLE_EXTRA_SIZE = "position:absolute;";
ImageBox.NavHeight = 40;
ImageBox.z_label = 2;
ImageBox.z_zoom_partial_boz = 3;
ImageBox.z_drag_div = 4;
ImageBox.z_buton = 6;
ImageBox.doc = document;

ImageBox.prototype = {
    show: function () {
        if (!this.datas) {
            return;
        }
        var key = "last_rows_cols_" + this.datas.boxId;
        var val = this.datas.rows + "_" + this.datas.cols + "_" + this.datas.showNavigate + "_"
            + this.datas.showButtonBar + "_" + this.datas.canDragExchange + "_" + this.datas.canMoveImg + "_"
            + this.datas.canMouseZoom + "_" + this.datas.initialZoomType;
        if (ImageBox[key] == val) {
            this.setImages(this.datas.images, true, true);
            this.hideFocus();
            this.showFocus();
            return;
        }
        document.getElementById(this.datas.boxId).innerHTML = this.getHtml().join("");
        ImageBox[key] = val;
        this.hideFocus();
        this.showFocus();
    },
    getHtml: function () {

        var html = new Array(
            "<div "
            + this.getDivEventHtml()
            + " ondragstart='return false' onselectstart ='return false' onselect='doc.selection.empty()' style='border:none;padding-none;margin:none;width:100%;height1:"
            + this.boxHeight + "px;'>");
        for (var i = 0; i < this.datas.rows; i++) {
            for (var j = 0; j < this.datas.cols; j++) {
                html.push(this.getImageHtml(i, j));
            }
        }
        html.push("</div>");
        if (this.datas.showButtonBar) {
            html.push(this.getButtonsHtml());
        }
        if (this.datas.showNavigate) {
            html.push(this.getNavigateHtml());
        }
        html.push(this.getEventHtml());
        return html;
    },
    layout: function () {

        var box = ImageBox.doc.getElementById(this.datas.boxId);
        this.boxTop = this.getTop(box);
        this.boxLeft = this.getLeft(box);
        this.boxHeight = box.offsetHeight || box.clientHeight - 5;
        this.boxWidth = box.offsetWidth || box.clientWidth - 5;
        var navHeight = this.datas.showNavigate ? ImageBox.NavHeight : 0;
        if (this.datas.showButtonBar) {
            navHeight += 32;
        }
        this.imgHeight = parseInt((this.boxHeight - navHeight - (this.datas.rows + 1) * this.margin) / this.datas.rows)
            - 2 * this.datas.border;
        this.imgWidth = parseInt((this.boxWidth - (this.datas.cols + 1) * this.margin) / this.datas.cols) - 2
            * this.datas.border;
    },
    sameSrc: function (src1, src2) {
        if (!src1) {
            src1 = "";
        }
        if (!src2) {
            src2 = "";
        }
        src1 = src1.replace("///", "//");
        src2 = src2.replace("///", "//");
        return src1 == src2;
    },
    setImages: function (images, idx0Changed, idx01Changed) {
        this.datas.images = images;
        if (idx0Changed) {
            // 显示图片
            for (var i = 0; i < this.datas.imageNumPerPage; i++) {
                var idx = this.datas.idx0 + i;
                var img = this.datas.images[idx];
                var src = img ? (this.datas.srcPrefix + img[this.datas.srcFieldName]) : "";
                var imgDom = document.getElementById(this.datas.boxId + "_img_" + i);
                imgDom.contrast = 1;
                if (!this.sameSrc(imgDom.src, src)) {
                    this.clearOrgPos(imgDom);
                    imgDom.src = src;
                    var label = ImageBox.doc.getElementById(this.datas.boxId + "_label_" + i);
                    label.innerHTML = src == "" ? "" : this.calLabel(idx);
                } else {
                    if (src == "") {
                        var label = ImageBox.doc.getElementById(this.datas.boxId + "_label_" + i);
                        label.innerHTML = "";
                    }
                }
                this.hide(imgDom, src == "");
            }
        }
        if (idx01Changed) {
            if (this.datas.showNavigate) {
                // 显示缩略图:
                for (var i = 0; i < 10 && i < this.datas.images.length; i++) {
                    var idx = this.datas.idx01 + i;
                    var img = this.datas.images[idx];
                    var src = img ? (this.datas.srcPrefix + img[this.datas.srcFieldName]) : "";
                    var imgDom = document.getElementById(this.datas.boxId + "_img_" + i + "_nav");
                    if (imgDom && imgDom.src != src) {
                        imgDom.src = src;
                    }
                    this.hide(imgDom, src == "");
                }
            }
        }

    },
    hide: function (div, isHide) {
        if (isHide) {
            if (div.style.display != "none") {
                div.style.display = "none";
            }
        } else {
            if (div.style.display == "none") {
                div.style.display = "";
            }
        }
    },
    jumpIdx: function (idx) {
        if (!this.datas) {
            return;
        }
        if (idx < 0 || idx >= this.datas.images.length) {
            return;
        }
        if (idx == this.datas.idx0 + this.datas.IdxInPageOfFocusedImage) {
            return;
        }
        this.hideFocus();
        var old = this.datas.idx0;
        var old1 = this.datas.idx01;
        this.datas.idx0 = parseInt(idx / this.datas.imageNumPerPage) * this.datas.imageNumPerPage;
        this.datas.IdxInPageOfFocusedImage = idx - this.datas.idx0;
        this.datas.idx01 = parseInt(idx / 10) * 10;
        this.datas.IdxInPageOfFocusedImage1 = idx - this.datas.idx01;
        var idx0Changed = old != this.datas.idx0;
        var idx01Changed = old1 != this.datas.idx01;
        if (idx0Changed || idx01Changed) {
            this.setImages(this.datas.images, idx0Changed, idx01Changed);
        }
        this.showFocus();
    },
    jumpId: function (id) {
        var images = this.datas.images;
        var length = images.length;
        for (var i = 0; i < length; i++) {
            if (images[i].id == id) {
                this.jumpIdx(i);
                break;
            }
        }

    },
    jumpAdd: function (add) {
        return this.jumpIdx(this.datas.idx0 + this.datas.IdxInPageOfFocusedImage + add);
    },
    onmousedownImage: function (idx) {
        //
    },
    calLabel: function (idx) {
        if (idx >= this.datas.images.length) {
            return "没有图片";
        }
        if (window.ib_calLabel) {// 兼容以前版本
            var img = document.getElementById(this.datas.boxId + "_img_" + idx - this.datas.idx0);
            return window.ib_calLabel(img, this.datas.images[idx], idx);
        }
        return "<label style='color:red;'>" + idx + "</label>";
    },
    contrast: function () {
        var img = document.getElementById(this.datas.boxId + "_img_" + (this.datas.IdxInPageOfFocusedImage));
        if (!img.contrast) {
            img.contrast = 1;
        }
        img.contrast *= 1.05;
        if (!img.orgSrc) {
            img.orgSrc = img.src;
        }
        img.src = img.orgSrc + "&contrast=" + img.contrast;
    },
    left: function () {
        var img = document.getElementById(this.datas.boxId + "_img_" + (this.datas.IdxInPageOfFocusedImage));
        img.style.left = parseInt11111(img.style.left) - 10 + "px";
    },
    up: function () {
        var img = document.getElementById(this.datas.boxId + "_img_" + (this.datas.IdxInPageOfFocusedImage));
        img.style.top = parseInt11111(img.style.top) - 10 + "px";
    },
    right: function () {
        var img = document.getElementById(this.datas.boxId + "_img_" + (this.datas.IdxInPageOfFocusedImage));
        img.style.left = parseInt11111(img.style.left) + 10 + "px";
    },
    down: function () {
        var img = document.getElementById(this.datas.boxId + "_img_" + (this.datas.IdxInPageOfFocusedImage));
        img.style.top = parseInt11111(img.style.top) + 10 + "px";
    },
    tideDatas: function () {
        if (!this.datas) {
            return;
        }
        if (!ImageBox.map) {
            ImageBox.map = new Object();
        }
        ImageBox.map[this.datas.boxId] = this.datas.varName;
        if (this.datas && this.datas.margin) {
            this.margin = datas.margin;
        } else {
            this.margin = 2;
        }
        if (!this.datas.srcPrefix) {
            this.datas.srcPrefix = "";
        }
        this.datas.cols = parseInt11111(this.datas.cols);
        this.datas.rows = parseInt11111(this.datas.rows);
        if (!this.datas.cols) {
            this.datas.cols = 1;
        }
        if (!this.datas.rows) {
            this.datas.rows = 1;
        }
        if (!this.datas.border) {
            this.datas.border = 2;
        }
        this.datas.idx0 = this.datas.idx0 ? this.datas.idx0 : 0;
        this.datas.idx01 = this.datas.idx01 ? this.datas.idx01 : 0;
        this.datas.imageNumPerPage = this.datas.cols * this.datas.rows;
        this.datas.IdxInPageOfFocusedImage = this.datas.IdxInPageOfFocusedImage ? this.datas.IdxInPageOfFocusedImage
            : 0;
        this.datas.IdxInPageOfFocusedImage1 = this.datas.IdxInPageOfFocusedImage1 ? this.datas.IdxInPageOfFocusedImage1
            : 0;
        this.datas.canMoveImg = this.datas.canMoveImg || this.datas.canMove;
        this.layout();
    },
    calImgMax: function () {
        if (this.datas.initialZoomType == ImageBox.ZOOM_FILL_X) {
            return "max-width:" + (this.imgWidth - this.datas.border * 2) + "px;";
        } else if (this.datas.initialZoomType == ImageBox.ZOOM_FILL_Y) {
            return "max-height:" + (this.imgHeight - this.datas.border * 2) + "px;";
        } else if (this.datas.initialZoomType == ImageBox.ZOOM_FIT_WND) {
            return "max-width:" + (this.imgWidth - this.datas.border * 2) + "px;max-height:"
                + (this.imgHeight - this.datas.border * 2) + "px;";
        }
        return "";
    },
    getImageHtml: function (row, col) {
        var borderColor = ImageBox.doc.getElementById(this.datas.boxId).style.backgroundColor;
        var i = row * this.datas.cols + col;
        var idx = (this.datas.idx0 ? this.datas.idx0 : 0) + i;
        var src = "";
        if (this.datas.images && this.datas.images.length > idx) {
            src = " src='" + this.datas.srcPrefix + this.datas.images[idx][this.datas.srcFieldName] + "'";
        }
        var org = "";
        var imageSize;
        var calSizeAuto = false;
        if (this.datas.initialZoomType == ImageBox.ZOOM_1P1) {
            imageSize = "";

            if (this.datas && this.datas.ratio) {
                var ratio = this.datas.ratio;
                ratio = parseFloat(ratio);
                if (ratio != 1 && ratio != 0 && calSizeAuto) {

                    var img = new Image();
                    img.src = this.datas.srcPrefix + this.datas.images[idx][this.datas.srcFieldName];
                    var orgWidth = img.width || img.orgWidth || img.offsetWidth;
                    var orgHeight = img.height || img.orgHeight || img.offsetHeight;

                    var width = parseInt(ratio * orgWidth);
                    var height = parseInt(ratio * orgHeight);
                    var left = parseInt((this.imgWidth - width) / 2);
                    var top = parseInt((this.imgHeight - height) / 2);
                    if (top < 0) {
                        top = 0;
                    }
                    if (left < 0) {
                        left = 0;
                    }
                    img.ratio = ratio;
                    var size = this.calImgMax();
                    if ((!size) || size == "") {
                        size = "width:" + width + "px;height:" + height + "px;";
                    }
                    imageSize = ImageBox.IMG_STYLE_EXTRA_SIZE + size + "left:" + left + "px;top:" + top + "px;";
                    org = " orgWidth=" + orgWidth + " orgHeight=" + orgHeight;
                }
            }
        } else if (this.datas.initialZoomType == ImageBox.ZOOM_FIT_WND) {
            imageSize = this.calImgMax();
        } else if (this.datas.initialZoomType == ImageBox.ZOOM_FILL_X) {
            imageSize = this.calImgMax();
        } else if (this.datas.initialZoomType == ImageBox.ZOOM_FILL_Y) {
            imageSize = this.calImgMax();
        } else {
            imageSize = "width:" + (this.imgWidth - this.datas.border * 2) + "px;height:"
                + (this.imgHeight - this.datas.border * 2) + "px;";
        }
        var dbl = " ondblclick='return " + this.datas.varName + ".onDblClickImg(event,this);' ";
        var imgEvent = dbl;
        if (this.datas.canMouseZoom) {
            imgEvent += " onmousewheel='return " + this.datas.varName + ".onmousewheel(event,this);' ";
        }
        imgEvent += " onmouseout='return " + this.datas.varName + ".onmouseoutImg();'";
        imgEvent += " onmousemove='return " + this.datas.varName + ".onmousemoveImg(event,this);'";
        imgEvent += " onmouseup='return " + this.datas.varName + ".onmouseup(" + i + ",event);'";
        imgEvent += " onmousedown='return " + this.datas.varName + ".onmousedown(event," + i + ");' ";

        var m = parseInt(this.margin / 2);
        var html = "<div name='imgdivhaha' " + dbl + " id='" + this.datas.boxId + "_div_" + i
            + "' style='border:solid " + this.datas.border + "px " + borderColor
            + ";overflow:hidden;float:left;margin:" + m + "px;position:relative;width:" + this.imgWidth
            + "px;height:" + this.imgHeight + "px;'>";
        html += "<img id='" + this.datas.boxId + "_img_" + i + "' " + imgEvent + org + src + " style='" + imageSize
            + "position:absolute;' onload=\"return " + this.datas.varName + ".onloadimg(this);\">";

        html += "<div" + imgEvent + " id='" + this.datas.boxId + "_label_" + i
            + "' style='position:absolute;z-index:999;'>" + this.calLabel(idx) + "</div>";
        html += "</div>";
        return html;
    },

    onloadimg: function (img) {

        if (img && this.datas && this.datas.ratio) {
            var ratio = this.datas.ratio;
            ratio = parseFloat(ratio);
            var orgWidth = img.orgWidth || img.offsetWidth;
            var orgHeight = img.orgHeight || img.offsetHeight;

            var width = parseInt(ratio * orgWidth);
            var height = parseInt(ratio * orgHeight);
            var div = img.parentNode;
            var left = parseInt((div.offsetWidth - width) / 2);
            var top = parseInt((div.offsetHeight - height) / 2);
            if (top < 0) {
                top = 0;
            }
            if (left < 0) {
                left = 0;
            }
            img.ratio = ratio;
            var size = this.calImgMax();
            if ((!size) || size == "") {
                size = "width:" + width + "px;height:" + height + "px;";
            }
            img.cssText0 = img.style.cssText;
            img.style.cssText = ImageBox.IMG_STYLE_EXTRA_SIZE + size + "left:" + left + "px;top:" + top + "px;";
            this.saveOrgPos(img);
        }
    },
    clearOrgPos: function (obj) {
        obj.orgLeft = null;
        obj.orgTop = null;
        obj.orgWidth = null;
        obj.orgHeight = null;
        if (obj.cssText0 || obj.getAttribute("cssText0")) {
            obj.style.cssText = obj.cssText0 || obj.getAttribute("cssText0");
        }
    },
    getButtonsHtml: function () {
        var html = new Array("<div>");
        html.push("<img style='width:32px;height:32px;' title='首页' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/firstpage.png' id='ib_firstpage' onclick=\"" + this.datas.varName + ".firstPage();\">");
        html.push("<img style='width:32px;height:32px;' title='上一页' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/prepage.png' id='ib_prepage' onclick=\"" + this.datas.varName + ".prevPage();\">");
        html.push("<img style='width:32px;height:32px;' title='下一页' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/nextpage.png' id='ib_nextpage' onclick=\"" + this.datas.varName + ".nextPage();\">");
        html.push("<img style='width:32px;height:32px;' title='尾页' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/endpage.png' id='ib_endpage' onclick=\"" + this.datas.varName + ".endPage();\">");
        html.push("<img style='width:32px;height:32px;' title='上一行' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/prerow.png' id='ib_prerow' onclick=\"" + this.datas.varName + ".prevRow();\">");
        html.push("<img style='width:32px;height:32px;' title='下一行' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/nextrow.png' id='ib_nextrow' onclick=\"" + this.datas.varName + ".nextRow();\">");
        html.push("<img style='width:32px;height:32px;' title='上一图片' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/preimg.png' id='ib_preimg' onclick=\"" + this.datas.varName + ".prevImage();\">");
        html.push("<img style='width:32px;height:32px;' title='下一图片' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/nextimg.png' id='ib_nextimg' onclick=\"" + this.datas.varName + ".nextImage();\">");
        html.push("<img style='width:32px;height:32px;' title='放大' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/zoomin.png' id='ib_zoomin' onclick=\"" + this.datas.varName + ".zoom(-1);\">");
        html.push("<img style='width:32px;height:32px;' title='缩小' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/zoomout.png' id='ib_zoomout' onclick=\"" + this.datas.varName + ".zoom(1);\">");
        html.push("<img style='width:32px;height:32px;' title='左移' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/left.png' id='ib_left' onclick=\"" + this.datas.varName + ".left();\">");
        html.push("<img style='width:32px;height:32px;' title='右移' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/right.png' id='ib_right' onclick=\"" + this.datas.varName + ".right();\">");
        html.push("<img style='width:32px;height:32px;' title='上移' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/up.png' id='ib_up' onclick=\"" + this.datas.varName + ".up();\">");
        html.push("<img style='width:32px;height:32px;' title='下移' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/down.png' id='ib_down' onclick=\"" + this.datas.varName + ".down();\">");
        html.push("<img style='width:32px;height:32px;' title='对比度' src='" + this.datas.imageboxButtonImgUrlPrefix
            + "img_button/bb.png' id='ib_bb' onclick=\"" + this.datas.varName + ".contrast();\">");
        html.push("</div>");
        return html.join("");
    },
    getNavigateHtml: function () {
        var html = new Array("<div><img onclick='" + this.datas.varName
            + ".leftNav();' style='width:32px;height:32px;marin-right:5px;' src='"
            + this.datas.imageboxButtonImgUrlPrefix + "img_button/left_nav.png'>");
        for (var i = 0; i < 10 && i < this.datas.images.length; i++) {
            html.push(this.getSmallImageHtml(i));
        }
        html.push("<img onclick='" + this.datas.varName
            + ".rightNav();' style='width:32px;height:32px;marin-left:5px;' src='"
            + this.datas.imageboxButtonImgUrlPrefix + "img_button/right_nav.png'></div>");
        return html.join("");
    },
    leftNav: function () {
        this.jumpAdd(-10);
    },
    rightNav: function () {
        this.jumpAdd(10);

    },
    getSmallImageHtml: function (i) {
        var borderColor = ImageBox.doc.getElementById(this.datas.boxId).style.backgroundColor;
        var idx = this.datas.idx01 + i;
        var src = "";
        if (this.datas.images && this.datas.images.length > idx) {
            src = " src='" + this.datas.srcPrefix + this.datas.images[idx][this.datas.srcFieldName] + "'";
        } else {
            return "";
        }
        var width = parseInt(this.boxWidth / 12) - 3;
        var imgEvent = " onmousedown='return " + this.datas.varName + ".onmousedownSmall(event," + i + ");' ";
        return "<img id='" + this.datas.boxId + "_img_" + i + "_nav' " + imgEvent + src + " style='border:solid 2px "
            + borderColor + ";margin:1px;width:" + width + "px;height:" + ImageBox.NavHeight + "px;'>";
    },
    onmousedownSmall: function (event, i) {
        var idx = this.datas.idx01 + i;
        this.jumpIdx(idx);
    },
    getEventHtml: function () {
        return "";
    },
    getDivEventHtml: function () {

        var html = " onmousemove=' return " + this.datas.varName + ".onmousemove(event);' ";

        if (window.ib_onkeydown) {
            html += " onkeydown=' return window.ib_onkeydown(event,\"" + this.datas.boxId + "\");' ";
        } else {
            html += " onkeydown=' return " + this.datas.varName + ".onkeydown(event);' ";
        }
        // html += " onmouseup=' return " + this.datas.varName +
        // ".pickend(event);' ";
        return html;

    },

    onmousewheel: function (event, img) {
        var e = event || window.event;
        var obj = e.target || e.srcElement;
        if (obj) {
            if (!obj.ratio) {
                obj.ratio = 1;
            }
            var target = e.target || e.srcElement;
            if (e.wheelDelta) {
                obj.ratio += e.wheelDelta / 600;
            } else if (e.detail) {
                obj.ratio -= e.detail / 12;
            }
            if (obj.ratio < 0.2) {
                obj.ratio = 0.2;
            }
            if (!obj.ratioing) {
                obj.ratioing = true;
                this.transformZoomImage(target, e);
                obj.ratioing = false;
            }
        }

    },
    saveOrgPos: function (obj) {
        if ((!obj.orgWidth) && (!obj.getAttribute("orgWidth"))) {
            obj.orgLeft = this.getLeft(obj);
            obj.orgTop = this.getTop(obj);
            obj.orgWidth = obj.offsetWidth;
            obj.orgHeight = obj.offsetHeight;
            if (obj.ratio) {
                obj.orgWidth = parseInt(obj.orgWidth / obj.ratio);
                obj.orgHeight = parseInt(obj.orgHeight / obj.ratio);
                if (!obj.orgRatio) {
                    obj.orgRatio = obj.ratio;
                }
            }
        } else {
            if ((!obj.orgWidth) && (obj.getAttribute("orgWidth"))) {
                obj.orgWidth = obj.getAttribute("orgWidth");
                obj.orgHeight = obj.getAttribute("orgHeight");
                obj.orgLeft = obj.getAttribute("orgLeft");
                obj.orgTop = obj.getAttribute("orgTop");
                obj.orgRatio = obj.getAttribute("orgRatio");
            }
        }
    },
    transformZoomImage: function (obj, e) {
        this.saveOrgPos(obj);
        var mouseX = 0;
        var mouseY = 0;
        var left = 0;
        var top = 0;
        if (e) {
            if (e.pageX || e.pageY) {
                mouseX = e.pageX;
                mouseY = e.pageY;
            } else if (e.clientX || e.clientY) {
                mouseX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                mouseY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
            }
            left = parseInt((mouseX - obj.orgLeft) * (1 - obj.ratio));
            top = parseInt((mouseY - obj.orgTop) * (1 - obj.ratio));
        }
        var width = parseInt(obj.orgWidth * obj.ratio);
        var height = parseInt(obj.orgHeight * obj.ratio);
        if (left + width < 10) {
            left = 10 - width;
        }
        if (top + height < 10) {
            top = 10 - height;
        }
        obj.style.cssText = "position:absolute;width:" + width + "px;height:" + height + "px;left:" + left + "px;top:"
            + top + "px;";

    },
    onkeydown: function (event) {
        if (this.datas.noKeydown) {
            return;
        }
        if (!ib_key_on()) {// 兼容上一版本
            return;
        }
        var e = event || window.event;
        var keyCode = e.keyCode;
        if (keyCode == this.KEY_DEF.pageup) {
            this.prevPage();
        } else if (keyCode == this.KEY_DEF.pagedown) {
            this.nextPage();
        } else if (keyCode == this.KEY_DEF.home) {
            this.firstPage();
        } else if (keyCode == this.KEY_DEF.end) {
            this.endPage();
        } else if (keyCode == this.KEY_DEF.prevRow) {
            this.prevRow();
        } else if (keyCode == this.KEY_DEF.nextRow) {
            this.nextRow();
        } else if (keyCode == this.KEY_DEF.prevImage) {
            this.prevImage();
        } else if (keyCode == this.KEY_DEF.nextImage || keyCode == this.KEY_DEF.enter) {
            this.nextImage();
        } else if (keyCode == this.KEY_DEF.add) {
            this.zoom(-1);
        } else if (keyCode == this.KEY_DEF.sub) {
            this.zoom(1);
        } else if (keyCode == this.KEY_DEF.left) {
            this.left();
        } else if (keyCode == this.KEY_DEF.right) {
            this.right();
        } else if (keyCode == this.KEY_DEF.up) {
            this.up();
        } else if (keyCode == this.KEY_DEF.down) {
            this.down();
        }

    },
    zoom: function (add) {

        if ((this.datas.cols + add > 0 && this.datas.rows + add > 0) && this.datas.cols + add < 8) {
            this.datas.cols += add;
            this.datas.rows += add;
            this.datas.imageNumPerPage = this.datas.cols * this.datas.rows;
            this.layout();
            var idx = this.datas.idx0 + this.datas.IdxInPageOfFocusedImage;
            this.datas.idx0 = parseInt(idx / this.datas.imageNumPerPage) * this.datas.imageNumPerPage;
            this.datas.idx01 = parseInt(idx / 10) * 10;
            this.datas.IdxInPageOfFocusedImage = idx - this.datas.idx0;
            this.datas.IdxInPageOfFocusedImage1 = idx - this.datas.idx01;
            this.show(this.datas);
        }
    },
    firstPage: function () {
        this.jumpIdx(0);
    },

    endPage: function () {
        this.jumpIdx(this.datas.images.length - 1);
    },

    nextPage: function () {
        this.jumpAdd(this.datas.imageNumPerPage);
    },
    prevPage: function () {
        this.jumpAdd(-this.datas.imageNumPerPage);
    },
    nextImage: function () {
        this.jumpAdd(1);
    },
    prevImage: function () {
        this.jumpAdd(-1);
    },
    nextRow: function () {
        this.jumpAdd(this.datas.cols);
    },
    prevRow: function () {
        this.jumpAdd(-this.datas.cols);
    },
    hideFocus: function () {
        for (var i = 0; i < 20000; i++) {
            var img = ImageBox.doc.getElementById(this.datas.boxId + "_div_" + i);
            if (img) {
                var box = ImageBox.doc.getElementById(this.datas.boxId);
                if (img.style.borderColor != box.style.backgroundColor) {
                    img.style.borderColor = box.style.backgroundColor;
                }
            } else {
                break;
            }
        }
        for (var i = 0; i < 10; i++) {
            var img = ImageBox.doc.getElementById(this.datas.boxId + "_div_" + i + "_nav");
            if (img) {
                var box = ImageBox.doc.getElementById(this.datas.boxId);
                if (img.style.borderColor != box.style.backgroundColor) {
                    img.style.borderColor = box.style.backgroundColor;
                }
            }

        }
        if (this.datas.showFocus) {
            var img = ImageBox.doc.getElementById(this.datas.boxId + "_div_" + this.datas.IdxInPageOfFocusedImage);
            if (img) {
                var box = ImageBox.doc.getElementById(this.datas.boxId);
                img.style.borderColor = box.style.backgroundColor;
            }
            if (this.datas.showNavigate) {
                var img1 = ImageBox.doc.getElementById(this.datas.boxId + "_img_" + this.datas.IdxInPageOfFocusedImage1
                    + "_nav");
                if (img1) {
                    var box = ImageBox.doc.getElementById(this.datas.boxId);
                    img1.style.borderColor = box.style.backgroundColor;
                }
            }
        }

    },
    showFocus: function () {
        if (this.datas.showFocus) {
            var img = ImageBox.doc.getElementById(this.datas.boxId + "_div_" + this.datas.IdxInPageOfFocusedImage);
            if (img) {
                img.style.borderColor = "#ff0000";
            }
            if (this.datas.showNavigate) {
                var img1 = ImageBox.doc.getElementById(this.datas.boxId + "_img_" + this.datas.IdxInPageOfFocusedImage1
                    + "_nav");
                if (img1) {
                    img1.style.borderColor = "#ff0000";
                }
            }
        }

        try {
            imgbox_onfocuseimg(imageBoxOption.images[imageBoxOption.idx0 + imageBoxOption.IdxInPageOfFocusedImage]);
        } catch (e) {
        }
    },

    getimgdivhahas: function () {
        var divs = document.getElementsByTagName("div");
        var dds = new Array();
        for (var i = 0; i < divs.length; i++) {
            if (divs[i].getAttribute("name") == "imgdivhaha" || divs[i].name == "imgdivhaha") {
                dds[dds.length] = divs[i];
            }
        }
        return dds;
    },
    onmouseup: function (idxInPage, event) {
        var e = event || window.event;
        this.img_box_pickImg = null;
        this.img_box_pickX = null;
        if (this.datas.canDragExchange) {
            if (idxInPage == this.datas.IdxInPageOfFocusedImage) {
                if (e) {
                    var x = e.clientX;
                    var y = e.clientY;
                    var divs = this.getimgdivhahas();
                    for (var i = 0; i < divs.length; i++) {
                        var div = divs[i];
                        var l = this.getLeft(div);
                        var t = this.getTop(div);
                        var w = div.offsetWidth;
                        var h = div.offsetHeight;
                        if (x > l && x < l + w && y > t && y < t + h) {
                            idxInPage = i;
                            break;
                        }
                    }
                }
            }
            this.exchange(this.datas.IdxInPageOfFocusedImage, idxInPage);
        }
        return false;
    },

    exchange: function (oldi, newi) {
        var oldIdx = this.datas.idx0 + oldi;
        var newIdx = this.datas.idx0 + newi;
        this.showTitle("\r\nonmouseup:toldIdx:" + oldIdx + ",newIdx:" + newIdx);
        if (oldIdx == newIdx || this.datas.isNavigate) {
            this.pickend();
            return;
        }
        if (oldi > newi) {// 往前移
            var oldImage = this.datas.images[oldIdx];
            this.datas.images.splice(oldIdx, 1);
            this.datas.images.splice(newIdx, 0, oldImage);
        } else {// 往后移
            var oldImage = this.datas.images[oldIdx];
            this.datas.images.splice(newIdx + 1, 0, oldImage);
            this.datas.images.splice(oldIdx, 1);
        }
        this.setImages(this.datas.images, true, false);
        if (false) {
            var img = ImageBox.doc.getElementById(this.datas.boxId + "_img_" + newi);
            var imgOld = ImageBox.doc.getElementById(this.datas.boxId + "_img_" + oldi);
            var oldSrc = imgOld.src;
            imgOld.src = img.src;
            img.src = oldSrc;
            var old = this.datas.images[oldIdx];
            this.datas.images[oldIdx] = this.datas.images[newIdx];
            this.datas.images[newIdx] = old;
        }

        this.pickend();

    },
    pickend: function () {
        this.pickedSrc = null;
        var dragBox = ImageBox.doc.getElementById("ibx_dragBox");
        if (dragBox) {
            dragBox.style.display = "none";
        }
        return true;
    },
    onmouseoutImg: function () {

        var ibx_zoom_img = ImageBox.doc.getElementById("ibx_zoom_img");
        if (ibx_zoom_img) {
            ibx_zoom_img.style.display = "none";
        }
        return false;
    },
    onmousemoveImg: function (event, img) {
        if (img.id.indexOf("_label_") != -1) {
            img = ImageBox.doc.getElementById(img.id.replace("_label_", "_img_"));
        }
        if (img.id.indexOf("nav") != -1) {
            return;
        }
        if (this.pickedSrc != null) {
            return;
        }
        if (!this.datas.canMousePartZoom) {
            return;
        }
        var e = event || window.event;
        // this.showTitle(e.clientX + "," + e.clientY + "," + e.pageX + "," +
        // e.pageY);
        var leftImg = this.getLeft(img);
        var topImg = this.getTop(img);
        var left = (e.pageX || e.clientX) - leftImg;
        var top = (e.pageY || e.clientY) - topImg;
        var width = img.offsetWidth;
        var height = img.offsetHeight;
        var ibx_zoom_img = ImageBox.doc.getElementById("ibx_zoom_img");
        if (!ibx_zoom_img) {
            ibx_zoom_img = ImageBox.doc.createElement("div");
            ibx_zoom_img.id = "ibx_zoom_img";
            ibx_zoom_img.innerHTML = "<img id='ibx_zoom_img_img'>";
            ImageBox.doc.body.appendChild(ibx_zoom_img);
        } else {
            if (ibx_zoom_img.style.display == "none") {
                ibx_zoom_img.style.display = "";
            }
        }
        var ibx_zoom_img_img = ImageBox.doc.getElementById("ibx_zoom_img_img");
        if (ibx_zoom_img_img.src != img.src) {
            ibx_zoom_img_img.src = img.src;
        }

        // this.showTitle(ibx_zoom_img_img.src);
        left = left * ibx_zoom_img_img.offsetWidth / width;
        top = top * ibx_zoom_img_img.offsetHeight / height;
        ibx_zoom_img_img.style.cssText = "position:absolute;left:-" + parseInt(left) + "px;top:-" + parseInt(top)
            + "px";
        ibx_zoom_img.style.cssText = "position:absolute;overflow:hidden;z-index:" + ImageBox.z_zoom_partial_boz
            + ";left:" + ((e.pageX || e.clientX) + 30) + "px;top:" + ((e.pageY || e.clientY) + 30) + "px;width:"
            + this.datas.zoomBoxWidth + "px;height:" + this.datas.zoomBoxHeight + "px;";
        return false;
    },
    onmousemove: function (event) {
        var e = event || window.event;
        if (this.datas.canMoveImg && this.img_box_pickImg && this.img_box_pickX) {
            this.img_box_pickImg.style.left = parseInt111(this.img_box_pickImg.style.left) + e.clientX
                - this.img_box_pickX + "px";
            this.img_box_pickImg.style.top = parseInt111(this.img_box_pickImg.style.top) + e.clientY
                - this.img_box_pickY + "px";

            this.img_box_pickX = e.clientX;
            this.img_box_pickY = e.clientY;
        }
        if (!this.datas.canDragExchange) {
            return false;
        }
        if (this.pickedSrc != null) {

            // this.showTitle(e.clientX + "," + e.clientY);
            var dragBox = ImageBox.doc.getElementById("ibx_dragBox");
            if (!dragBox) {
                dragBox = ImageBox.doc.createElement("img");
                dragBox.id = "ibx_dragBox";
                ImageBox.doc.body.appendChild(dragBox);
            } else {
                if (dragBox.style.display == "none") {
                    dragBox.style.display = "";
                }
            }
            var img = ImageBox.doc.getElementById(this.datas.boxId + "_img_" + this.pickedSrc);
            dragBox.src = img.src;

            var alpha = "-ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=60); filter:alpha(opacity=60);opacity: .6;";
            dragBox.style.cssText = alpha + "position:absolute;z-index:" + ImageBox.z_drag_div + ";left:"
                + (e.clientX + 10) + "px;top:" + (e.clientY + 10) + "px;width:" + img.parentNode.offsetWidth
                + "px;height:" + img.parentNode.offsetHeight + "px;";
        }
        return false;
    },
    showTitle: function (text) {
        // window.title = text;
    },
    onmousedown: function (event, idxInPage) {
        this.pickBegin(event, idxInPage);
        this.onmousedownImage(idxInPage + this.datas.idx0);
        this.showLabel(idxInPage);
        this.jumpIdx(idxInPage + this.datas.idx0);
        return false;
    },
    showLabel: function (idxInPage) {
        var label = ImageBox.doc.getElementById(this.datas.boxId + "_label_" + idxInPage);
        label.innerHTML = this.calLabel(idxInPage + this.datas.idx0);
    },
    pickBegin: function (event, idxInPage) {
        var e = event || window.event;
        if (!this.datas.isNavigate) {
            this.pickedSrc = idxInPage;
            var ibx_zoom_img = ImageBox.doc.getElementById("ibx_zoom_img");
            if (ibx_zoom_img) {
                ibx_zoom_img.style.display = "none";
            }
            var img = ImageBox.doc.getElementById(this.datas.boxId + "_img_" + idxInPage);
            this.img_box_pickX = e.clientX;
            this.img_box_pickY = e.clientY;
            this.img_box_pickImg = img;

            this.showTitle("\r\pickBegin:this.img_box_pickImg:" + this.img_box_pickImg);
        }

    },
    onDblClickImg: function (event, obj) {
        if (obj.tagName.toLowerCase() != "img") {
            obj = ImageBox.doc.getElementById(obj.id.replace("_div_", "_img_"));
        }
        if (obj.orgWidth) {
            obj.style.cssText = "position:absolute;left:" + (obj.orgLeft - this.getLeft(obj.parentNode)) + "px;top:"
                + (obj.orgTop - this.getTop(obj.parentNode)) + "px;width:" + obj.orgWidth
                * (obj.ratio ? obj.ratio : 1) + "px;height:" + obj.orgHeight * (obj.ratio ? obj.ratio : 1) + "px;";
        } else {
            obj.style.left = "";
            obj.style.top = "";
        }
        obj.ratio = obj.orgRatio;
        return false;
    },

    getTop: function (e) {
        var offset = e.offsetTop;
        if (e.offsetParent != null)
            offset += this.getTop(e.offsetParent);
        return offset;
    },
    // 获取元素的横坐标
    getLeft: function (e) {
        var offset = e.offsetLeft;
        if (e.offsetParent != null)
            offset += this.getLeft(e.offsetParent);
        return offset;
    }

};

function parseInt111(x) {
    if (!x) {
        return 0;
    }
    x = (x + "").replace("px", "");
    return parseInt(x);
}

function parseInt11111(x) {

    if (x) {
        x = (x + "").replace("px", "");
        return parseInt(x);
    }
    return x;
}

function addEventHandler(oTarget, sEventType, fnHandler) {
    if (oTarget.addEventListener) {
        oTarget.addEventListener(sEventType, fnHandler, false);
    } else if (oTarget.attachEvent) {
        oTarget.attachEvent("on" + sEventType, fnHandler);
    } else {
        oTarget["on" + sEventType] = fnHandler;
    }
}

// firefox支持onmousewheel:
if (navigator.userAgent.toLowerCase().indexOf('firefox') >= 0) {
    addEventListener('DOMMouseScroll', function (e) {
        var onmousewheel = e.target.getAttribute('onmousewheel');
        if (onmousewheel) {
            if (e.preventDefault)
                e.preventDefault();
            e.returnValue = false; // 禁止页面滚动
            if (typeof e.target.onmousewheel != 'function') {
                // 将onmousewheel转换成function
                eval('window._tmpFun = function(event){' + onmousewheel + '}');
                e.target.onmousewheel = window._tmpFun;
                window._tmpFun = null;
            }
            // 不直接执行是因为若onmousewheel(e)运行时间较长的话，会导致锁定滚动失效，使用setTimeout可避免
            setTimeout(function () {
                e.target.onmousewheel(e);
            }, 1);
        }
    }, false);
}

// ****************************** 下面函数是为了兼容以前非面向对象版本:
function ib_key_on() {// 兼容上一版本
    return true;
}

function ib_firstPage(boxId) {// 兼容上一版本
    if (!boxId) {
        boxId = ib111.datas.boxId;
    }
    if (!ImageBox.isString(boxId)) {
        boxId = boxId.boxId;
    }
    eval(ImageBox.map[boxId] + ".firstPage();");
}

function ib_nextPage(boxId) {// 兼容上一版本
    if (!boxId) {
        boxId = ib111.datas.boxId;
    }
    if (!ImageBox.isString(boxId)) {
        boxId = boxId.boxId;
    }
    eval(ImageBox.map[boxId] + ".nextPage();");
}

function ib_prevImage(boxId) {// 兼容上一版本
    if (!boxId) {
        boxId = ib111.datas.boxId;
    }
    if (!ImageBox.isString(boxId)) {
        boxId = boxId.boxId;
    }
    eval(ImageBox.map[boxId] + ".prevImage();");
}

function ib_nextImage(boxId) {// 兼容上一版本
    if (!boxId) {
        boxId = ib111.datas.boxId;
    }
    if (!ImageBox.isString(boxId)) {
        boxId = boxId.boxId;
    }
    eval(ImageBox.map[boxId] + ".nextImage();");
}

function ib_zoom(boxId, add) {// 兼容上一版本
    if (!boxId) {
        boxId = ib111.datas.boxId;
    }
    if (!ImageBox.isString(boxId)) {
        boxId = boxId.boxId;
    }
    eval(ImageBox.map[boxId] + ".zoom(" + add + ");");
}

var ib111;

function ib_createImageBox(imageBoxOption) {// 兼容上一版本
    imageBoxOption.varName = "ib111";
    ib111 = new ImageBox(imageBoxOption);
    ib111.show();
}

// *************兼容以前非面向对象版本结束*************************/
function IconBreviary(left, top, imgWidth, imgHeight, cols) {
    this.id = "IconBreviary" + parseInt(Math.random() * 1000000);
    // 缩略图数组
    this.iconItems = new Array();
    // 菜单起点ｘ坐标
    this.left = left;
    // 菜单起点ｙ坐标
    this.cols = cols;
    // 菜单起点ｙ坐标
    this.top = top;

    // 图像大小
    this.imgWidth = imgWidth;
    this.imgHeight = imgHeight;

    // 间隔距离
    this.iImgDistance = 60;
    this.iTextDistance = 10;
    this.lineDistance = 50;
    this.opacity = 99;

    this.eventObj = null;

    this.showText = "1";
    this.container = null;
    this.showContainer = "1";
    this.PDiv = null;
}

/**
 * 菜单项对象 imgUrl 菜单项的图片Url name 菜单名称 action 菜单的动作事件 className 菜单的css风格 type 菜单的类别
 */
function IconItem(imgUrl, name, action, enabled) {
    this.imgUrl = imgUrl;
    this.name = name;
    this.action = action;
    //alert(disabled);
    if (enabled == false) {
        this.enabled = enabled;
    } else {
        this.enabled = true;
    }
}

IconBreviary.prototype = {
    /**
     * 增加菜单项
     */
    addIconItem: function (iconItem) {
        this.iconItems[this.iconItems.length] = iconItem;
    },

    /**
     * 增加菜单项
     */
    addIcon: function (imgUrl, name, action, disabled) {
        this.iconItems[this.iconItems.length] = new IconItem(imgUrl, name,
            action, disabled);
    },

    /**
     * 取得x坐标
     */
    getLeft: function (i) {
        return this.left + (this.imgWidth + this.iImgDistance)
            * (i % this.cols) - -5;
    },

    /**
     * 取得y坐标
     */
    getTop: function (i) {
        return this.top + (this.imgHeight + this.lineDistance)
            * (((i / this.cols) + "").split(".")[0]) - -10;
    },

    /**
     * 组装菜单项字符串
     */
    createIcons: function () {
        for (i = 0; i < this.iconItems.length; i++) {

            var left = this.getLeft(i) - this.left;
            var top = this.getTop(i) - this.top;
            //var iconDiv = document.createElement("<div title='" + this.iconItems[i].name + "'  style='cursor:hand;border:0px solid #dddddd;font-family:微软雅黑; text-align:center;z-index: 100;position:absolute;left:"	+ left + "px;top:" + top + "px;' >");
            var iconDiv = document.createElement("div");
            iconDiv.title = this.iconItems[i].name;
            iconDiv.style.cssText = "cursor:hand;border:0px solid #dddddd;font-family:微软雅黑; text-align:center;z-index: 100;position:absolute;left:" + left + "px;top:" + top + "px;";
            iconDiv.setAttribute("opacityFlag", "1");
            iconDiv.setAttribute("align", "center");
            iconDiv.setAttribute("iIndex", i);
            iconDiv.setAttribute("eventObj", this.eventObj);

            iconDiv.setAttribute("btID", this.id + "ibBT" + i);
            iconDiv.btID = iconDiv.getAttribute("btID");
            iconDiv.setAttribute("clickFunc", this.iconItems[i].action);

            //	alert(this.iconItems[i].enabled);
            if (this.iconItems[i].enabled == true || this.iconItems[i].enabled == "true") {
                iconDiv.onclick = function () {
                    eval(this.clickFunc || this.getAttribute("clickFunc"));
                };
                iconDiv.onmouseover = function () {
                    //this.style.fontSize = "14px";
                    this.style.color = "red";

                    var bt = document.getElementById(this.btID);
                    bt.style.border = "1px solid gray";
                    //	this.style.top = this.style.top.replace("px","") - 5;
                    //this.style.filter = "alpha(opacity =50)";
                    // (new ImgTool(20, 15, 65)).setObjState(this, 1);
                }
                iconDiv.onmouseout = function () {
                    this.style.color = "navy";
                    //this.style.fontSize = "12px";
                    var bt = document.getElementById(this.btID);
                    bt.style.border = "1px solid #dddddd";
                    // alert(document.getElementById("ibBT" + this.iIndex));
                    //this.style.border = "1px solid #dddddd";
                    //	this.style.top = this.style.top.replace("px","") - -5;
                    //this.style.filter = "alpha(opacity =80)";
//				this.style.filter = "alpha(opacity =40)";
                    // (new ImgTool(20, 15, 65)).setObjState(this, 0);
                }
            }
            // 加按钮
            //var bt = document .createElement("<input id='" + this.id + "ibBT" + i + "'  type=button class='shadowButtons' style='border:1px solid #dddddd'>");
            var bt = document.createElement("input");
            bt.id = this.id + "ibBT" + i;
            bt.type = "button";
            bt.className = 'shadowButtons';
            bt.setAttribute("class", 'shadowButtons');
            bt.setAttribute("className", 'shadowButtons');
            bt.style.cssText = 'border:1px solid #dddddd;';
            bt.style.background = "url(" + this.iconItems[i].imgUrl + ") no-repeat";
            bt.style.width = this.imgWidth;
            bt.style.height = this.imgHeight;
            try {
                bt.setAttribute("pDiv", iconDiv);
            } catch (e) {
                bt.pDiv = iconDiv;
            }
            //filter: Gray;
            if (this.iconItems[i].enabled == false || this.iconItems[i].enabled == "false") {
                bt.setAttribute("disabled", true);
                bt.style.filter = "Gray";
                iconDiv.style.color = "gray";
            } else {
                try {
                    bt.setAttribute("clickFunc", this.iconItems[i].action);
                } catch (e) {
                    bt.clickFunc = this.iconItems[i].action;
                }
                iconDiv.style.color = "navy";
            }

            bt.setAttribute("disabled", "true");
            iconDiv.appendChild(bt);

            // 加文字
            if (this.showText == "1") {
                var br = document.createElement("br");
                iconDiv.appendChild(br);
                iconDiv.appendChild(document
                    .createTextNode(this.iconItems[i].name));
            }
            // alert(iconDiv.outerHTML)
            if (this.showContainer == "1") {
                this.PDiv.appendChild(iconDiv);
            } else {
                document.body.appendChild(iconDiv);
            }
        }
        //alert(this.PDiv.outerHTML);
    },
    getRows: function () {
        var mod = this.iconItems.length % this.cols;
        var row = (this.iconItems.length / this.cols + "").split(".")[0];
        return mod == 0 ? row : ++row;
    },

    /**
     * 展示菜单项
     */
    show: function () {
        /**
         * div
         */
        this.createDiv();
        this.createIcons();
        // document.body.appendChild(IconDiv);

    },

    /**
     * 隐藏
     * @return
     */
    hidden: function () {
        this.PDiv.style.display = "none";
    },

    /**
     * 显示
     * @return
     */
    display: function (x, y) {
        this.PDiv.style.left = x;
        this.PDiv.style.top = y;
        this.PDiv.style.display = "inline";
    },

    /**
     * 生成父Div
     * @return
     */
    createDiv: function () {
        if (this.showContainer == "1") {
            //this.PDiv = document .createElement("<div id='ibDiv'  style='background:#ffffff;borders:1px solid #999999;text-align:center;position:absolute;left:" + this.left + "px;top:" + this.top + "px;' >");
            this.PDiv = document.createElement("div");
            this.PDiv.id = 'ibDiv';
            this.PDiv.style.cssText = "background:#ffffff;borders:1px solid #999999;text-align:center;position:absolute;left:" + this.left + "px;top:" + this.top + "px;";

            this.PDiv.style.width = this.imgWidth * this.cols - -this.iImgDistance
                * this.cols - -10;
            var imgTureHeight;
            if (this.showText == "1") {
                imgTureHeight = this.imgHeight - -10;
            } else {
                imgTureHeight = this.imgHeight
            }
            this.PDiv.style.height = imgTureHeight * this.getRows()
                - -this.lineDistance * (this.getRows() - 1) - -20;
            //	this.PDiv.style.filter = "progid:DXImageTransform.Microsoft.Shadow(color=#dddddd,direction=135,strength=5)";
            document.body.appendChild(this.PDiv);
            //  alert(this.PDiv.outerHTML);
        }

    },
    /**
     * 隐藏菜单项
     */
    hide: function () {
    }
}

function MsgBoard(left, top) {
    // ID
    this.id = "MsgBoard" + parseInt(Math.random() * 1000000);

    // 菜单项数组
    this.msgItems = new Array();

    // 菜单起点ｘ坐标
    this.left = left;

    // 菜单起点ｙ坐标
    this.top = top;

    // 名称
    this.titleText = "";

    // 图像
    this.titleImg = "";

    // 背景颜色
    this.bgColor = "";

    //
    this.showFlag = "0";

    // 变量绑定事件
    eval(this.id + "=this");

}

function MsgItem(code, text, action, enabled) {
    this.code = code;
    this.text = text;
    this.action = action;
    if (enabled == false) {
        this.enabled = enabled;
    } else {
        this.enabled = true;
    }
}

MsgBoard.prototype = {
    /**
     * 增加菜单项
     */
    addMsgItem: function (imgUrl, text, action, enabled) {
        this.msgItems[this.msgItems.length] = new MsgItem(imgUrl, text, action,
            enabled);
    },

    /**
     * 组装菜单项字符串
     */
    createTableContent: function () {

        var tableContentStr = "";
        tableContentStr += "<tr><td class='msgBoard_title2' align='center' style='border-right:1px solid gray;width:24px;'>"
            + "<img src='"
            + this.titleImg
            + "'></img></td><td class='msgBoard_title2'>&nbsp;"
            + this.titleText + "</td></tr>";
        for (i = 0; i < this.msgItems.length; i++) {
            if ("splitLine" == this.msgItems[i].text) {
                tableContentStr += "<tr height=5><td align='center' style='border-top:1px solid gray;border-right:1px solid gray;width:24px;'></td><td style='border-top:1px solid gray;'>"
                    + "</td></tr>";
            } else {
                if (!this.msgItems[i].enabled) {
                    tableContentStr += "<tr><td align='center' style='border-right:1px solid gray;width:24px;'><img  style='filter:Gray'  src='"
                        + this.msgItems[i].imgUrl
                        + "'></img></td><td style='color:gray;filter:Gray'>&nbsp;"
                        + this.msgItems[i].text + "</td></tr>";
                } else {
                    tableContentStr += "<tr onclick='"
                        + this.msgItems[i].action
                        + ";"
                        + this.id
                        + ".hidden()' onmouseover='this.className=\"msgBoard_mouseOver\"'  onmouseout='this.className=\"msgBoard_mouseOut\"'><td class='msgBoard_title' align='center' style='border-right:1px solid gray;width:24px;'>"
                        + "</td><td class='msgBoard_text'>&nbsp;"
                        + this.msgItems[i].code + "-"
                        + this.msgItems[i].text + "&nbsp;</td></tr>";
                }
            }
        }
        return tableContentStr;
    },

    /**
     * 生成table
     *
     * @return
     */
    createTable: function () {
        /**
         * table
         */
        var tableStr = "<table id='"
            + this.id
            + "' class='msgBoard_table' style=\"display:none;cursor:hand;position:absolute;width:"
            + this.width + ";left:" + this.left + ";top:" + this.top
            + ";\">";

        if (this.msgItems.length > 0) {
            tableStr += this.createTableContent();
        }

        tableStr += "</table>";
        return tableStr;
    },

    /**
     * 展示菜单项
     */
    show: function (x, y) {
        var menuTable = document.getElementById(this.id);
        menuTable.style.left = x;
        menuTable.style.top = y;
        menuTable.style.display = "inline";
        this.showFlag = "1";
    },

    switchDisplay: function (x, y) {
        var menuTable = document.getElementById(this.id);
        if (menuTable.style.display == "none")
            this.show(x, y);
        else
            this.hidden();
    },

    hidden: function () {
        var menuTable = document.getElementById(this.id);
        menuTable.style.display = "none";
        this.showFlag = "0";
    },

    create: function () {
        var tableObj = document.createElement("table");
        document.body.appendChild(tableObj);
        tableObj.outerHTML = this.createTable();
    }

}

function MsgBoard(left, top) {
    // ID
    this.id = "MsgBoard" + parseInt(Math.random() * 1000000);

    // 菜单项数组
    this.msgItems = new Array();

    // 菜单起点ｘ坐标
    this.left = left;

    // 菜单起点ｙ坐标
    this.top = top;

    // 名称
    this.titleText = "";

    // 图像
    this.titleImg = "";

    // 背景颜色
    this.bgColor = "";

    //
    this.showFlag = "0";

    // 变量绑定事件
    eval(this.id + "=this");

}

function MsgItem(code, text, action, enabled) {
    this.code = code;
    this.text = text;
    this.action = action;
    if (enabled == false) {
        this.enabled = enabled;
    } else {
        this.enabled = true;
    }
}

MsgBoard.prototype = {
    /**
     * 增加菜单项
     */
    addMsgItem: function (imgUrl, text, action, enabled) {
        this.msgItems[this.msgItems.length] = new MsgItem(imgUrl, text, action,
            enabled);
    },

    /**
     * 组装菜单项字符串
     */
    createTableContent: function () {

        var tableContentStr = "";
        tableContentStr += "<tr><td class='msgBoard_title2' align='center' style='border-right:1px solid gray;width:24px;'>"
            + "<img src='"
            + this.titleImg
            + "'></img></td><td class='msgBoard_title2'>&nbsp;"
            + this.titleText + "</td></tr>";
        for (i = 0; i < this.msgItems.length; i++) {
            if ("splitLine" == this.msgItems[i].text) {
                tableContentStr += "<tr height=5><td align='center' style='border-top:1px solid gray;border-right:1px solid gray;width:24px;'></td><td style='border-top:1px solid gray;'>"
                    + "</td></tr>";
            } else {
                if (!this.msgItems[i].enabled) {
                    tableContentStr += "<tr><td align='center' style='border-right:1px solid gray;width:24px;'><img  style='filter:Gray'  src='"
                        + this.msgItems[i].imgUrl
                        + "'></img></td><td style='color:gray;filter:Gray'>&nbsp;"
                        + this.msgItems[i].text + "</td></tr>";
                } else {
                    tableContentStr += "<tr onclick='"
                        + this.msgItems[i].action
                        + ";"
                        + this.id
                        + ".hidden()' onmouseover='this.className=\"msgBoard_mouseOver\"'  onmouseout='this.className=\"msgBoard_mouseOut\"'><td class='msgBoard_title' align='center' style='border-right:1px solid gray;width:24px;'>"
                        + "</td><td class='msgBoard_text'>&nbsp;"
                        + this.msgItems[i].code + "-"
                        + this.msgItems[i].text + "&nbsp;</td></tr>";
                }
            }
        }
        return tableContentStr;
    },

    /**
     * 生成table
     *
     * @return
     */
    createTable: function () {
        /**
         * table
         */
        var tableStr = "<table id='"
            + this.id
            + "' class='msgBoard_table' style=\"display:none;cursor:hand;position:absolute;width:"
            + this.width + ";left:" + this.left + ";top:" + this.top
            + ";\">";

        if (this.msgItems.length > 0) {
            tableStr += this.createTableContent();
        }

        tableStr += "</table>";
        return tableStr;
    },

    /**
     * 展示菜单项
     */
    show: function (x, y) {
        var menuTable = document.getElementById(this.id);
        menuTable.style.left = x;
        menuTable.style.top = y;
        menuTable.style.display = "inline";
        this.showFlag = "1";
    },

    switchDisplay: function (x, y) {
        var menuTable = document.getElementById(this.id);
        if (menuTable.style.display == "none")
            this.show(x, y);
        else
            this.hidden();
    },

    hidden: function () {
        var menuTable = document.getElementById(this.id);
        menuTable.style.display = "none";
        this.showFlag = "0";
    },

    create: function () {
        var tableObj = document.createElement("table");
        document.body.appendChild(tableObj);
        tableObj.outerHTML = this.createTable();
    }

}

function TitleBar(left, top, width, height, styleClass) {
    this.eventObj = null;
    // 菜单项数组
    this.buttonItems = new Array();
    // 菜单起点ｘ坐标
    this.left = left;
    // 菜单起点ｙ坐标
    this.width = width;
    // 菜单起点ｘ坐标
    this.height = height;
    // 菜单起点ｙ坐标
    this.top = top;
    // 名称
    this.titleText = "";
    this.textClassName = "TitleText_LIST";
    // 图像
    this.titleImg = "";
    // 背景颜色
    this.bgColor = "";
    // 风格 用来适用不同的页面
    // 1.列表页面 STYLE_LIST
    // 2.弹出页面 STYLE_POP
    this.styleClass = styleClass;
    this.rightCornerFlag = true;

    this.titleImage = null;

    if (this.styleClass == "STYLE_LIST") {
        // 标题栏图像
        this.leftImgUrl = "JBFCommon/js/titleBar/images/1.png";
        // 标题栏图像
        this.rightImgUrl = "JBFCommon/js/titleBar/images/1.png";
        this.textClassName = "TitleText_LIST";
    } else if (this.styleClass == "STYLE_POP") {
        // 标题栏图像
        this.leftImgUrl = "JBFCommon/js/titleBar/images/t2_1.png";
        // 标题栏图像
        this.rightImgUrl = "JBFCommon/js/titleBar/images/t2_1.png";
        // this.rightCornerFlag = false;
        this.textClassName = "TitleText_POP";
    } else if (this.styleClass == "STYLE_POP2") {
        // 标题栏图像
        this.leftImgUrl = "JBFCommon/js/titleBar/images/flowtitle2.gif";
        // 标题栏图像
        this.rightImgUrl = "JBFCommon/js/titleBar/images/flowtitle2.gif";
        // this.rightCornerFlag = false;
        this.textClassName = "TitleText_POP";
    } else if (this.styleClass == "STYLE_DIV") {
        // 标题栏图像
        this.rightCornerFlag = false;

    }

}


TitleBar.prototype = {
    /**
     * 增加菜单项
     */
    addButtonItem: function (buttonItem, sType) {
        if (sType) buttonItem.type = sType;
        this.buttonItems[this.buttonItems.length] = buttonItem;
    },

    addInputItem: function (InputItem) {
        this.inputItems[this.inputItems.length] = inputItem;
    },
    /**
     * 组装菜单项字符串
     */
    createButtonTd: function () {

        var titleBarTable_Td2 = document.createElement("td");

        titleBarTable_Td2.setAttribute("align", "right");
        for (i = 0; i < this.buttonItems.length; i++) {
            var bt = this.buttonItems[i];
            bt.container = titleBarTable_Td2;
            if (this.eventObj) {
                bt.eventObj = this.eventObj;
            }
            bt.create();
            var textObj = document.createTextNode("\u00A0");
            titleBarTable_Td2.appendChild(textObj);
        }
        // alert(titleBarTable_Td2.outerHTML )
        return titleBarTable_Td2;

    },

    /**
     * 生成div
     *
     * @return
     */
    createDiv: function () {
        var titleBarDiv = document.createElement("div");
        // titleBarDiv.setAttribute("id", "titleBarDiv" + this.top + this.left);
        titleBarDiv.style.position = "absolute";
        titleBarDiv.style.left = this.left;
        titleBarDiv.style.top = this.top;
        //titleBarDiv.className = "DivContainer";
        titleBarDiv.style.width = this.width;
        titleBarDiv.style.background = this.bgColor;
        // titleBarDiv.style.border = "1px solid #155cc2";
        // alert(titleBarDiv.outerHTML)
        return titleBarDiv;
    },

    /**
     * 生成table
     *
     * @return
     */
    createTable: function () {
        /**
         * table
         */

        var titleBarTable = document.createElement("table");
        titleBarTable.cssText = "filter:progid:DXImageTransform.Microsoft.Gradient(startColorStr='#1b5999', endColorStr='skyblue', gradientType='1')";

        titleBarTable.setAttribute("align", "left");
        titleBarTable.setAttribute("cellSpacing", 0);
        titleBarTable.setAttribute("cellPadding", 0);
        titleBarTable.style.width = "100%";
        titleBarTable.style.background = "url(" + this.leftImgUrl + ") repeat";
        // titleBarTable.style.background = "gray";
        // titleBarTable.style.background = "red";
        /**
         * tbody
         */
        var titleBarTable_Tbody = document.createElement("tbody");

        /**
         * tr
         */
        var titleBarTable_Tr = document.createElement("tr");
        titleBarTable_Tr.style.height = this.height;

        /**
         * tdImg
         */
        var titleBarTable_TdImg = document.createElement("td");
        var imgObj = document.createElement("img");
        imgObj.setAttribute("src", this.titleImg);
        titleBarTable_TdImg.setAttribute("align", "right");
        titleBarTable_TdImg.setAttribute("width", 16);
        titleBarTable_TdImg.appendChild(imgObj);
        titleBarTable_TdImg.style.background = "url(" + this.leftImgUrl + ")";
        // titleBarTable_TdImg.style.background = this.bgColor;

        /**
         * td
         */
        var titleBarTable_Td1 = document.createElement("td");
        titleBarTable_Td1.style.width = 15;
        // titleBarTable_Td1.style.background = "url(" + this.leftImgUrl
        // + ")";

        var titleBarTable_Td_Text = document.createElement("td");
        titleBarTable_Td_Text.align = "left";
        titleBarTable_Td_Text.setAttribute("align", "left");
        titleBarTable_Td_Text.setAttribute("id", "workitemTitle");
        if (this.titleImage) {

            var td1Img = document.createElement("img");
            td1Img.cssText = "margin-bottom: -3px";
            td1Img.src = this.titleImage;
            titleBarTable_Td_Text.appendChild(td1Img);
        }
        var textObj = document.createTextNode("\u00A0" + this.titleText);
        titleBarTable_Td_Text.className = this.textClassName;
        titleBarTable_Td_Text.appendChild(textObj);
        // titleBarTable_Td_Text.style.background = "url(" + this.rightImgUrl
        // + ") repeat";

        /**
         * group
         */
        // titleBarTable_Tr.appendChild(titleBarTable_TdImg);
        titleBarTable_Tr.appendChild(titleBarTable_Td1);

        titleBarTable_Tr.appendChild(titleBarTable_Td_Text);
        if (this.buttonItems.length > 0) {
            titleBarTable_Tr.appendChild(this.createButtonTd());
        }

        if (this.rightCornerFlag) {
            var titleBarTable_right = document.createElement("td");
            titleBarTable_right.style.width = 20;
            titleBarTable_right.style.background = "url(" + this.rightImgUrl
                + ") right top ";
            titleBarTable_Tr.appendChild(titleBarTable_right);
        }
        titleBarTable_Tbody.appendChild(titleBarTable_Tr);
        titleBarTable.appendChild(titleBarTable_Tbody);
        //alert(titleBarTable.outerHTML)
        return titleBarTable;
    },

    /**
     * 展示菜单项
     */
    show: function () {
        /**
         * div
         */
        this.titleBarDiv = this.createDiv();
        var titleBarTable = this.createTable();
        this.titleBarDiv.appendChild(titleBarTable);
        // alert(titleBarDiv.outerHTML)
        document.body.appendChild(this.titleBarDiv);

    },
    create: function () {
        /**
         * div
         */
        this.titleBarDiv = this.createDiv();
        var titleBarTable = this.createTable();
        this.titleBarDiv.appendChild(titleBarTable);
        return this.titleBarDiv;
        // alert(titleBarDiv.outerHTML)
//	document.body.appendChild(titleBarDiv);

    },
    /**
     * 隐藏菜单项
     */
    clear: function () {
        if (this.titleBarDiv) {
            this.titleBarDiv.outerHTML = "";
            this.buttonItems.length = 0;
        }
    }
}
